/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [8]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			yyq969[5] = x.PeriodSeconds != 0
			yyq969[6] = x.SuccessThreshold != 0
			yyq969[7] = x.FailureThreshold != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(8)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[5] {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[6] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[7] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym988 := z.DecBinary()
	_ = yym988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl989 := r.ReadMapStart()
			if yyl989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl989, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl989 := r.ReadArrayStart()
			if yyl989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys990Slc
	var yyhl990 bool = l >= 0
	for yyj990 := 0; ; yyj990++ {
		if yyhl990 {
			if yyj990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys990Slc = r.DecodeBytes(yys990Slc, true, true)
		yys990 := string(yys990Slc)
		switch yys990 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys990)
		} // end switch yys990
	} // end for yyj990
	if !yyhl990 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1008 := z.EncBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1009 := z.DecBinary()
	_ = yym1009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1010 := z.EncBinary()
	_ = yym1010
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1011 := z.DecBinary()
	_ = yym1011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1012 := z.EncBinary()
		_ = yym1012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1013 := !z.EncBinary()
			yy2arr1013 := z.EncBasicHandle().StructToArray
			var yyq1013 [2]bool
			_, _, _ = yysep1013, yyq1013, yy2arr1013
			const yyr1013 bool = false
			yyq1013[0] = len(x.Add) != 0
			yyq1013[1] = len(x.Drop) != 0
			if yyr1013 || yy2arr1013 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1013 int = 0
				for _, b := range yyq1013 {
					if b {
						yynn1013++
					}
				}
				r.EncodeMapStart(yynn1013)
			}
			if yyr1013 || yy2arr1013 {
				if yyq1013[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1015 := z.EncBinary()
						_ = yym1015
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1013[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1016 := z.EncBinary()
						_ = yym1016
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				if yyq1013[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1018 := z.EncBinary()
						_ = yym1018
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1013[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1019 := z.EncBinary()
						_ = yym1019
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1013 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1020 := z.DecBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1021 := r.ReadMapStart()
			if yyl1021 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1021, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1021 := r.ReadArrayStart()
			if yyl1021 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1022Slc
	var yyhl1022 bool = l >= 0
	for yyj1022 := 0; ; yyj1022++ {
		if yyhl1022 {
			if yyj1022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1022Slc = r.DecodeBytes(yys1022Slc, true, true)
		yys1022 := string(yys1022Slc)
		switch yys1022 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1023 := &x.Add
				yym1024 := z.DecBinary()
				_ = yym1024
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1023), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1025 := &x.Drop
				yym1026 := z.DecBinary()
				_ = yym1026
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1022)
		} // end switch yys1022
	} // end for yyj1022
	if !yyhl1022 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1028 := &x.Add
		yym1029 := z.DecBinary()
		_ = yym1029
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1028), d)
		}
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1030 := &x.Drop
		yym1031 := z.DecBinary()
		_ = yym1031
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1030), d)
		}
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [3]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			yyq1033[0] = len(x.Limits) != 0
			yyq1033[1] = len(x.Requests) != 0
			yyq1033[2] = len(x.SoftRequests) != 0
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1033 int = 0
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
			}
			if yyr1033 || yy2arr1033 {
				if yyq1033[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				if yyq1033[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				if yyq1033[2] {
					if x.SoftRequests == nil {
						r.EncodeNil()
					} else {
						x.SoftRequests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[2] {
					r.EncodeString(codecSelferC_UTF81234, string("softRequests"))
					if x.SoftRequests == nil {
						r.EncodeNil()
					} else {
						x.SoftRequests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1033 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		switch yys1039 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1040 := &x.Limits
				yyv1040.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1041 := &x.Requests
				yyv1041.CodecDecodeSelf(d)
			}
		case "softRequests":
			if r.TryDecodeAsNil() {
				x.SoftRequests = nil
			} else {
				yyv1042 := &x.SoftRequests
				yyv1042.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	if !yyhl1039 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1043 int
	var yyb1043 bool
	var yyhl1043 bool = l >= 0
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1044 := &x.Limits
		yyv1044.CodecDecodeSelf(d)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1045 := &x.Requests
		yyv1045.CodecDecodeSelf(d)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SoftRequests = nil
	} else {
		yyv1046 := &x.SoftRequests
		yyv1046.CodecDecodeSelf(d)
	}
	for {
		yyj1043++
		if yyhl1043 {
			yyb1043 = yyj1043 > l
		} else {
			yyb1043 = r.CheckBreak()
		}
		if yyb1043 {
			break
		}
		z.DecStructFieldNotFound(yyj1043-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1047 := z.EncBinary()
		_ = yym1047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1048 := !z.EncBinary()
			yy2arr1048 := z.EncBasicHandle().StructToArray
			var yyq1048 [18]bool
			_, _, _ = yysep1048, yyq1048, yy2arr1048
			const yyr1048 bool = false
			yyq1048[1] = x.Image != ""
			yyq1048[2] = len(x.Command) != 0
			yyq1048[3] = len(x.Args) != 0
			yyq1048[4] = x.WorkingDir != ""
			yyq1048[5] = len(x.Ports) != 0
			yyq1048[6] = len(x.Env) != 0
			yyq1048[7] = true
			yyq1048[8] = len(x.VolumeMounts) != 0
			yyq1048[9] = x.LivenessProbe != nil
			yyq1048[10] = x.ReadinessProbe != nil
			yyq1048[11] = x.Lifecycle != nil
			yyq1048[12] = x.TerminationMessagePath != ""
			yyq1048[13] = x.ImagePullPolicy != ""
			yyq1048[14] = x.SecurityContext != nil
			yyq1048[15] = x.Stdin != false
			yyq1048[16] = x.StdinOnce != false
			yyq1048[17] = x.TTY != false
			if yyr1048 || yy2arr1048 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1048 int = 1
				for _, b := range yyq1048 {
					if b {
						yynn1048++
					}
				}
				r.EncodeMapStart(yynn1048)
			}
			if yyr1048 || yy2arr1048 {
				yym1050 := z.EncBinary()
				_ = yym1050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[1] {
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1059 := z.EncBinary()
						_ = yym1059
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[4] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1066 := z.EncBinary()
						_ = yym1066
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1069 := z.EncBinary()
						_ = yym1069
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[7] {
					yy1071 := &x.Resources
					yy1071.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1072 := &x.Resources
					yy1072.CodecEncodeSelf(e)
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1074 := z.EncBinary()
						_ = yym1074
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1075 := z.EncBinary()
						_ = yym1075
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[12] {
					yym1080 := z.EncBinary()
					_ = yym1080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1081 := z.EncBinary()
					_ = yym1081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[15] {
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1048[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[16] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1048[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				if yyq1048[17] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1048[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1048 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		switch yys1095 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1098 := &x.Command
				yym1099 := z.DecBinary()
				_ = yym1099
				if false {
				} else {
					z.F.DecSliceStringX(yyv1098, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1100 := &x.Args
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					z.F.DecSliceStringX(yyv1100, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1103 := &x.Ports
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1103), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1105 := &x.Env
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1105), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1107 := &x.Resources
				yyv1107.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1108 := &x.VolumeMounts
				yym1109 := z.DecBinary()
				_ = yym1109
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1108), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	if !yyhl1095 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1119 int
	var yyb1119 bool
	var yyhl1119 bool = l >= 0
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1122 := &x.Command
		yym1123 := z.DecBinary()
		_ = yym1123
		if false {
		} else {
			z.F.DecSliceStringX(yyv1122, false, d)
		}
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1124 := &x.Args
		yym1125 := z.DecBinary()
		_ = yym1125
		if false {
		} else {
			z.F.DecSliceStringX(yyv1124, false, d)
		}
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1127 := &x.Ports
		yym1128 := z.DecBinary()
		_ = yym1128
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1127), d)
		}
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1129 := &x.Env
		yym1130 := z.DecBinary()
		_ = yym1130
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1129), d)
		}
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1131 := &x.Resources
		yyv1131.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1132 := &x.VolumeMounts
		yym1133 := z.DecBinary()
		_ = yym1133
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1132), d)
		}
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1119++
		if yyhl1119 {
			yyb1119 = yyj1119 > l
		} else {
			yyb1119 = r.CheckBreak()
		}
		if yyb1119 {
			break
		}
		z.DecStructFieldNotFound(yyj1119-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1143 := z.EncBinary()
		_ = yym1143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1144 := !z.EncBinary()
			yy2arr1144 := z.EncBasicHandle().StructToArray
			var yyq1144 [3]bool
			_, _, _ = yysep1144, yyq1144, yy2arr1144
			const yyr1144 bool = false
			yyq1144[0] = x.Exec != nil
			yyq1144[1] = x.HTTPGet != nil
			yyq1144[2] = x.TCPSocket != nil
			if yyr1144 || yy2arr1144 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1144 int = 0
				for _, b := range yyq1144 {
					if b {
						yynn1144++
					}
				}
				r.EncodeMapStart(yynn1144)
			}
			if yyr1144 || yy2arr1144 {
				if yyq1144[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1144[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1144 || yy2arr1144 {
				if yyq1144[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1144[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1144 || yy2arr1144 {
				if yyq1144[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1144[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1144 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1148 := z.DecBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1149 := r.ReadMapStart()
			if yyl1149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1149, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1149 := r.ReadArrayStart()
			if yyl1149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1150Slc
	var yyhl1150 bool = l >= 0
	for yyj1150 := 0; ; yyj1150++ {
		if yyhl1150 {
			if yyj1150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1150Slc = r.DecodeBytes(yys1150Slc, true, true)
		yys1150 := string(yys1150Slc)
		switch yys1150 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1150)
		} // end switch yys1150
	} // end for yyj1150
	if !yyhl1150 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1154 int
	var yyb1154 bool
	var yyhl1154 bool = l >= 0
	yyj1154++
	if yyhl1154 {
		yyb1154 = yyj1154 > l
	} else {
		yyb1154 = r.CheckBreak()
	}
	if yyb1154 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1154++
	if yyhl1154 {
		yyb1154 = yyj1154 > l
	} else {
		yyb1154 = r.CheckBreak()
	}
	if yyb1154 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1154++
	if yyhl1154 {
		yyb1154 = yyj1154 > l
	} else {
		yyb1154 = r.CheckBreak()
	}
	if yyb1154 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1154++
		if yyhl1154 {
			yyb1154 = yyj1154 > l
		} else {
			yyb1154 = r.CheckBreak()
		}
		if yyb1154 {
			break
		}
		z.DecStructFieldNotFound(yyj1154-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1158 := z.EncBinary()
		_ = yym1158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1159 := !z.EncBinary()
			yy2arr1159 := z.EncBasicHandle().StructToArray
			var yyq1159 [2]bool
			_, _, _ = yysep1159, yyq1159, yy2arr1159
			const yyr1159 bool = false
			yyq1159[0] = x.PostStart != nil
			yyq1159[1] = x.PreStop != nil
			if yyr1159 || yy2arr1159 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1159 int = 0
				for _, b := range yyq1159 {
					if b {
						yynn1159++
					}
				}
				r.EncodeMapStart(yynn1159)
			}
			if yyr1159 || yy2arr1159 {
				if yyq1159[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1159[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1159 || yy2arr1159 {
				if yyq1159[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1159[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1159 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1170 := z.EncBinary()
	_ = yym1170
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1171 := z.DecBinary()
	_ = yym1171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [2]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			yyq1173[0] = x.Reason != ""
			yyq1173[1] = x.Message != ""
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1173 int = 0
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
			}
			if yyr1173 || yy2arr1173 {
				if yyq1173[0] {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1173[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				if yyq1173[1] {
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1173[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1173 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1180 := z.DecBinary()
	_ = yym1180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1181 := r.ReadMapStart()
			if yyl1181 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1181, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1181 := r.ReadArrayStart()
			if yyl1181 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1182Slc
	var yyhl1182 bool = l >= 0
	for yyj1182 := 0; ; yyj1182++ {
		if yyhl1182 {
			if yyj1182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1182Slc = r.DecodeBytes(yys1182Slc, true, true)
		yys1182 := string(yys1182Slc)
		switch yys1182 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1182)
		} // end switch yys1182
	} // end for yyj1182
	if !yyhl1182 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1185 int
	var yyb1185 bool
	var yyhl1185 bool = l >= 0
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1185++
		if yyhl1185 {
			yyb1185 = yyj1185 > l
		} else {
			yyb1185 = r.CheckBreak()
		}
		if yyb1185 {
			break
		}
		z.DecStructFieldNotFound(yyj1185-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1188 := z.EncBinary()
		_ = yym1188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1189 := !z.EncBinary()
			yy2arr1189 := z.EncBasicHandle().StructToArray
			var yyq1189 [1]bool
			_, _, _ = yysep1189, yyq1189, yy2arr1189
			const yyr1189 bool = false
			yyq1189[0] = true
			if yyr1189 || yy2arr1189 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1189 int = 0
				for _, b := range yyq1189 {
					if b {
						yynn1189++
					}
				}
				r.EncodeMapStart(yynn1189)
			}
			if yyr1189 || yy2arr1189 {
				if yyq1189[0] {
					yy1191 := &x.StartedAt
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1191) {
					} else if yym1192 {
						z.EncBinaryMarshal(yy1191)
					} else if !yym1192 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1191)
					} else {
						z.EncFallback(yy1191)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1189[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1193 := &x.StartedAt
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1193) {
					} else if yym1194 {
						z.EncBinaryMarshal(yy1193)
					} else if !yym1194 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1193)
					} else {
						z.EncFallback(yy1193)
					}
				}
			}
			if yysep1189 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1195 := z.DecBinary()
	_ = yym1195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1196 := r.ReadMapStart()
			if yyl1196 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1196, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1196 := r.ReadArrayStart()
			if yyl1196 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1197Slc
	var yyhl1197 bool = l >= 0
	for yyj1197 := 0; ; yyj1197++ {
		if yyhl1197 {
			if yyj1197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1197Slc = r.DecodeBytes(yys1197Slc, true, true)
		yys1197 := string(yys1197Slc)
		switch yys1197 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1198 := &x.StartedAt
				yym1199 := z.DecBinary()
				_ = yym1199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1198) {
				} else if yym1199 {
					z.DecBinaryUnmarshal(yyv1198)
				} else if !yym1199 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1198)
				} else {
					z.DecFallback(yyv1198, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1197)
		} // end switch yys1197
	} // end for yyj1197
	if !yyhl1197 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1200 int
	var yyb1200 bool
	var yyhl1200 bool = l >= 0
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1201 := &x.StartedAt
		yym1202 := z.DecBinary()
		_ = yym1202
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1201) {
		} else if yym1202 {
			z.DecBinaryUnmarshal(yyv1201)
		} else if !yym1202 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1201)
		} else {
			z.DecFallback(yyv1201, false)
		}
	}
	for {
		yyj1200++
		if yyhl1200 {
			yyb1200 = yyj1200 > l
		} else {
			yyb1200 = r.CheckBreak()
		}
		if yyb1200 {
			break
		}
		z.DecStructFieldNotFound(yyj1200-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [7]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			yyq1204[1] = x.Signal != 0
			yyq1204[2] = x.Reason != ""
			yyq1204[3] = x.Message != ""
			yyq1204[4] = true
			yyq1204[5] = true
			yyq1204[6] = x.ContainerID != ""
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1204 int = 1
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
			}
			if yyr1204 || yy2arr1204 {
				yym1206 := z.EncBinary()
				_ = yym1206
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[1] {
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1204[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[2] {
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1213 := z.EncBinary()
					_ = yym1213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[3] {
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[4] {
					yy1218 := &x.StartedAt
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1218) {
					} else if yym1219 {
						z.EncBinaryMarshal(yy1218)
					} else if !yym1219 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1218)
					} else {
						z.EncFallback(yy1218)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1204[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1220 := &x.StartedAt
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1220) {
					} else if yym1221 {
						z.EncBinaryMarshal(yy1220)
					} else if !yym1221 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1220)
					} else {
						z.EncFallback(yy1220)
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[5] {
					yy1223 := &x.FinishedAt
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1223) {
					} else if yym1224 {
						z.EncBinaryMarshal(yy1223)
					} else if !yym1224 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1223)
					} else {
						z.EncFallback(yy1223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1204[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1225 := &x.FinishedAt
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else if yym1226 {
						z.EncBinaryMarshal(yy1225)
					} else if !yym1226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1225)
					} else {
						z.EncFallback(yy1225)
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				if yyq1204[6] {
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1229 := z.EncBinary()
					_ = yym1229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1204 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1230 := z.DecBinary()
	_ = yym1230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1231 := r.ReadMapStart()
			if yyl1231 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1231, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1231 := r.ReadArrayStart()
			if yyl1231 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1232Slc
	var yyhl1232 bool = l >= 0
	for yyj1232 := 0; ; yyj1232++ {
		if yyhl1232 {
			if yyj1232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1232Slc = r.DecodeBytes(yys1232Slc, true, true)
		yys1232 := string(yys1232Slc)
		switch yys1232 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1237 := &x.StartedAt
				yym1238 := z.DecBinary()
				_ = yym1238
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1237) {
				} else if yym1238 {
					z.DecBinaryUnmarshal(yyv1237)
				} else if !yym1238 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1237)
				} else {
					z.DecFallback(yyv1237, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1239 := &x.FinishedAt
				yym1240 := z.DecBinary()
				_ = yym1240
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1239) {
				} else if yym1240 {
					z.DecBinaryUnmarshal(yyv1239)
				} else if !yym1240 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1239)
				} else {
					z.DecFallback(yyv1239, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1232)
		} // end switch yys1232
	} // end for yyj1232
	if !yyhl1232 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1242 int
	var yyb1242 bool
	var yyhl1242 bool = l >= 0
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1247 := &x.StartedAt
		yym1248 := z.DecBinary()
		_ = yym1248
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1247) {
		} else if yym1248 {
			z.DecBinaryUnmarshal(yyv1247)
		} else if !yym1248 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1247)
		} else {
			z.DecFallback(yyv1247, false)
		}
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1249 := &x.FinishedAt
		yym1250 := z.DecBinary()
		_ = yym1250
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1249) {
		} else if yym1250 {
			z.DecBinaryUnmarshal(yyv1249)
		} else if !yym1250 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1249)
		} else {
			z.DecFallback(yyv1249, false)
		}
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1242++
		if yyhl1242 {
			yyb1242 = yyj1242 > l
		} else {
			yyb1242 = r.CheckBreak()
		}
		if yyb1242 {
			break
		}
		z.DecStructFieldNotFound(yyj1242-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1252 := z.EncBinary()
		_ = yym1252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1253 := !z.EncBinary()
			yy2arr1253 := z.EncBasicHandle().StructToArray
			var yyq1253 [3]bool
			_, _, _ = yysep1253, yyq1253, yy2arr1253
			const yyr1253 bool = false
			yyq1253[0] = x.Waiting != nil
			yyq1253[1] = x.Running != nil
			yyq1253[2] = x.Terminated != nil
			if yyr1253 || yy2arr1253 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1253 int = 0
				for _, b := range yyq1253 {
					if b {
						yynn1253++
					}
				}
				r.EncodeMapStart(yynn1253)
			}
			if yyr1253 || yy2arr1253 {
				if yyq1253[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				if yyq1253[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				if yyq1253[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1253 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1257 := z.DecBinary()
	_ = yym1257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1258 := r.ReadMapStart()
			if yyl1258 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1258, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1258 := r.ReadArrayStart()
			if yyl1258 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1259Slc
	var yyhl1259 bool = l >= 0
	for yyj1259 := 0; ; yyj1259++ {
		if yyhl1259 {
			if yyj1259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1259Slc = r.DecodeBytes(yys1259Slc, true, true)
		yys1259 := string(yys1259Slc)
		switch yys1259 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1259)
		} // end switch yys1259
	} // end for yyj1259
	if !yyhl1259 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1263 int
	var yyb1263 bool
	var yyhl1263 bool = l >= 0
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1263++
		if yyhl1263 {
			yyb1263 = yyj1263 > l
		} else {
			yyb1263 = r.CheckBreak()
		}
		if yyb1263 {
			break
		}
		z.DecStructFieldNotFound(yyj1263-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1267 := z.EncBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1268 := !z.EncBinary()
			yy2arr1268 := z.EncBasicHandle().StructToArray
			var yyq1268 [8]bool
			_, _, _ = yysep1268, yyq1268, yy2arr1268
			const yyr1268 bool = false
			yyq1268[1] = true
			yyq1268[2] = true
			yyq1268[7] = x.ContainerID != ""
			if yyr1268 || yy2arr1268 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1268 int = 5
				for _, b := range yyq1268 {
					if b {
						yynn1268++
					}
				}
				r.EncodeMapStart(yynn1268)
			}
			if yyr1268 || yy2arr1268 {
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1268 || yy2arr1268 {
				if yyq1268[1] {
					yy1273 := &x.State
					yy1273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1274 := &x.State
					yy1274.CodecEncodeSelf(e)
				}
			}
			if yyr1268 || yy2arr1268 {
				if yyq1268[2] {
					yy1276 := &x.LastTerminationState
					yy1276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1277 := &x.LastTerminationState
					yy1277.CodecEncodeSelf(e)
				}
			}
			if yyr1268 || yy2arr1268 {
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1280 := z.EncBinary()
				_ = yym1280
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1268 || yy2arr1268 {
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1283 := z.EncBinary()
				_ = yym1283
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1268 || yy2arr1268 {
				yym1285 := z.EncBinary()
				_ = yym1285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1286 := z.EncBinary()
				_ = yym1286
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1268 || yy2arr1268 {
				yym1288 := z.EncBinary()
				_ = yym1288
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1289 := z.EncBinary()
				_ = yym1289
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1268 || yy2arr1268 {
				if yyq1268[7] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1268 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		switch yys1295 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1297 := &x.State
				yyv1297.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1298 := &x.LastTerminationState
				yyv1298.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	if !yyhl1295 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1306 := &x.State
		yyv1306.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1307 := &x.LastTerminationState
		yyv1307.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1313 := z.EncBinary()
	_ = yym1313
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1314 := z.DecBinary()
	_ = yym1314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1315 := z.EncBinary()
	_ = yym1315
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1316 := z.DecBinary()
	_ = yym1316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [6]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[2] = true
			yyq1318[3] = true
			yyq1318[4] = x.Reason != ""
			yyq1318[5] = x.Message != ""
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1318 int = 2
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
			}
			if yyr1318 || yy2arr1318 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1318 || yy2arr1318 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1318 || yy2arr1318 {
				if yyq1318[2] {
					yy1322 := &x.LastProbeTime
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1322) {
					} else if yym1323 {
						z.EncBinaryMarshal(yy1322)
					} else if !yym1323 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1322)
					} else {
						z.EncFallback(yy1322)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1324 := &x.LastProbeTime
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1324) {
					} else if yym1325 {
						z.EncBinaryMarshal(yy1324)
					} else if !yym1325 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1324)
					} else {
						z.EncFallback(yy1324)
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				if yyq1318[3] {
					yy1327 := &x.LastTransitionTime
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1327) {
					} else if yym1328 {
						z.EncBinaryMarshal(yy1327)
					} else if !yym1328 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1327)
					} else {
						z.EncFallback(yy1327)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1329 := &x.LastTransitionTime
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1329) {
					} else if yym1330 {
						z.EncBinaryMarshal(yy1329)
					} else if !yym1330 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1329)
					} else {
						z.EncFallback(yy1329)
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				if yyq1318[4] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				if yyq1318[5] {
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1318 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1338 := r.ReadMapStart()
			if yyl1338 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1338, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1338 := r.ReadArrayStart()
			if yyl1338 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1339Slc
	var yyhl1339 bool = l >= 0
	for yyj1339 := 0; ; yyj1339++ {
		if yyhl1339 {
			if yyj1339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1339Slc = r.DecodeBytes(yys1339Slc, true, true)
		yys1339 := string(yys1339Slc)
		switch yys1339 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1342 := &x.LastProbeTime
				yym1343 := z.DecBinary()
				_ = yym1343
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1342) {
				} else if yym1343 {
					z.DecBinaryUnmarshal(yyv1342)
				} else if !yym1343 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1342)
				} else {
					z.DecFallback(yyv1342, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1344 := &x.LastTransitionTime
				yym1345 := z.DecBinary()
				_ = yym1345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1344) {
				} else if yym1345 {
					z.DecBinaryUnmarshal(yyv1344)
				} else if !yym1345 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1344)
				} else {
					z.DecFallback(yyv1344, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1339)
		} // end switch yys1339
	} // end for yyj1339
	if !yyhl1339 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1348 int
	var yyb1348 bool
	var yyhl1348 bool = l >= 0
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1351 := &x.LastProbeTime
		yym1352 := z.DecBinary()
		_ = yym1352
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1351) {
		} else if yym1352 {
			z.DecBinaryUnmarshal(yyv1351)
		} else if !yym1352 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1351)
		} else {
			z.DecFallback(yyv1351, false)
		}
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1353 := &x.LastTransitionTime
		yym1354 := z.DecBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1353) {
		} else if yym1354 {
			z.DecBinaryUnmarshal(yyv1353)
		} else if !yym1354 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1353)
		} else {
			z.DecFallback(yyv1353, false)
		}
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1348++
		if yyhl1348 {
			yyb1348 = yyj1348 > l
		} else {
			yyb1348 = r.CheckBreak()
		}
		if yyb1348 {
			break
		}
		z.DecStructFieldNotFound(yyj1348-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1357 := z.EncBinary()
	_ = yym1357
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1358 := z.DecBinary()
	_ = yym1358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1359 := z.EncBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1360 := z.DecBinary()
	_ = yym1360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1361 := z.EncBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1362 := !z.EncBinary()
			yy2arr1362 := z.EncBasicHandle().StructToArray
			var yyq1362 [15]bool
			_, _, _ = yysep1362, yyq1362, yy2arr1362
			const yyr1362 bool = false
			yyq1362[0] = len(x.Volumes) != 0
			yyq1362[2] = x.RestartPolicy != ""
			yyq1362[3] = x.TerminationGracePeriodSeconds != nil
			yyq1362[4] = x.ActiveDeadlineSeconds != nil
			yyq1362[5] = x.DNSPolicy != ""
			yyq1362[6] = len(x.NodeSelector) != 0
			yyq1362[7] = x.ServiceAccountName != ""
			yyq1362[8] = x.DeprecatedServiceAccount != ""
			yyq1362[9] = x.NodeName != ""
			yyq1362[10] = x.HostNetwork != false
			yyq1362[11] = x.HostPID != false
			yyq1362[12] = x.HostIPC != false
			yyq1362[13] = x.SecurityContext != nil
			yyq1362[14] = len(x.ImagePullSecrets) != 0
			if yyr1362 || yy2arr1362 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1362 int = 1
				for _, b := range yyq1362 {
					if b {
						yynn1362++
					}
				}
				r.EncodeMapStart(yynn1362)
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1362[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1371 := *x.TerminationGracePeriodSeconds
						yym1372 := z.EncBinary()
						_ = yym1372
						if false {
						} else {
							r.EncodeInt(int64(yy1371))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1373 := *x.TerminationGracePeriodSeconds
						yym1374 := z.EncBinary()
						_ = yym1374
						if false {
						} else {
							r.EncodeInt(int64(yy1373))
						}
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1376 := *x.ActiveDeadlineSeconds
						yym1377 := z.EncBinary()
						_ = yym1377
						if false {
						} else {
							r.EncodeInt(int64(yy1376))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1378 := *x.ActiveDeadlineSeconds
						yym1379 := z.EncBinary()
						_ = yym1379
						if false {
						} else {
							r.EncodeInt(int64(yy1378))
						}
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1362[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1382 := z.EncBinary()
						_ = yym1382
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1383 := z.EncBinary()
						_ = yym1383
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[7] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1362[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[8] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1362[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[9] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1362[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[10] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1362[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[11] {
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1362[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[12] {
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1362[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1362 || yy2arr1362 {
				if yyq1362[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1404 := z.EncBinary()
						_ = yym1404
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1362[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1405 := z.EncBinary()
						_ = yym1405
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1362 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1406 := z.DecBinary()
	_ = yym1406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1407 := r.ReadMapStart()
			if yyl1407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1407, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1407 := r.ReadArrayStart()
			if yyl1407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1408Slc
	var yyhl1408 bool = l >= 0
	for yyj1408 := 0; ; yyj1408++ {
		if yyhl1408 {
			if yyj1408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1408Slc = r.DecodeBytes(yys1408Slc, true, true)
		yys1408 := string(yys1408Slc)
		switch yys1408 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1409 := &x.Volumes
				yym1410 := z.DecBinary()
				_ = yym1410
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1409), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1411 := &x.Containers
				yym1412 := z.DecBinary()
				_ = yym1412
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1411), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1415 := z.DecBinary()
				_ = yym1415
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1419 := &x.NodeSelector
				yym1420 := z.DecBinary()
				_ = yym1420
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1419, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1428 := &x.ImagePullSecrets
				yym1429 := z.DecBinary()
				_ = yym1429
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1428), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1408)
		} // end switch yys1408
	} // end for yyj1408
	if !yyhl1408 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1430 int
	var yyb1430 bool
	var yyhl1430 bool = l >= 0
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1431 := &x.Volumes
		yym1432 := z.DecBinary()
		_ = yym1432
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1431), d)
		}
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1433 := &x.Containers
		yym1434 := z.DecBinary()
		_ = yym1434
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1433), d)
		}
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1437 := z.DecBinary()
		_ = yym1437
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1439 := z.DecBinary()
		_ = yym1439
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1441 := &x.NodeSelector
		yym1442 := z.DecBinary()
		_ = yym1442
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1441, false, d)
		}
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1450 := &x.ImagePullSecrets
		yym1451 := z.DecBinary()
		_ = yym1451
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1450), d)
		}
	}
	for {
		yyj1430++
		if yyhl1430 {
			yyb1430 = yyj1430 > l
		} else {
			yyb1430 = r.CheckBreak()
		}
		if yyb1430 {
			break
		}
		z.DecStructFieldNotFound(yyj1430-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1452 := z.EncBinary()
		_ = yym1452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1453 := !z.EncBinary()
			yy2arr1453 := z.EncBasicHandle().StructToArray
			var yyq1453 [5]bool
			_, _, _ = yysep1453, yyq1453, yy2arr1453
			const yyr1453 bool = false
			yyq1453[0] = x.SELinuxOptions != nil
			yyq1453[1] = x.RunAsUser != nil
			yyq1453[2] = x.RunAsNonRoot != nil
			yyq1453[3] = len(x.SupplementalGroups) != 0
			yyq1453[4] = x.FSGroup != nil
			if yyr1453 || yy2arr1453 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1453 int = 0
				for _, b := range yyq1453 {
					if b {
						yynn1453++
					}
				}
				r.EncodeMapStart(yynn1453)
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1456 := *x.RunAsUser
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							r.EncodeInt(int64(yy1456))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1458 := *x.RunAsUser
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else {
							r.EncodeInt(int64(yy1458))
						}
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1461 := *x.RunAsNonRoot
						yym1462 := z.EncBinary()
						_ = yym1462
						if false {
						} else {
							r.EncodeBool(bool(yy1461))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1463 := *x.RunAsNonRoot
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							r.EncodeBool(bool(yy1463))
						}
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1469 := *x.FSGroup
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							r.EncodeInt(int64(yy1469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1471 := *x.FSGroup
						yym1472 := z.EncBinary()
						_ = yym1472
						if false {
						} else {
							r.EncodeInt(int64(yy1471))
						}
					}
				}
			}
			if yysep1453 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1473 := z.DecBinary()
	_ = yym1473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1474 := r.ReadMapStart()
			if yyl1474 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1474, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1474 := r.ReadArrayStart()
			if yyl1474 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1475Slc
	var yyhl1475 bool = l >= 0
	for yyj1475 := 0; ; yyj1475++ {
		if yyhl1475 {
			if yyj1475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1475Slc = r.DecodeBytes(yys1475Slc, true, true)
		yys1475 := string(yys1475Slc)
		switch yys1475 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1478 := z.DecBinary()
				_ = yym1478
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1480 := z.DecBinary()
				_ = yym1480
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1481 := &x.SupplementalGroups
				yym1482 := z.DecBinary()
				_ = yym1482
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1481, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1484 := z.DecBinary()
				_ = yym1484
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1475)
		} // end switch yys1475
	} // end for yyj1475
	if !yyhl1475 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1485 int
	var yyb1485 bool
	var yyhl1485 bool = l >= 0
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1488 := z.DecBinary()
		_ = yym1488
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1490 := z.DecBinary()
		_ = yym1490
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1491 := &x.SupplementalGroups
		yym1492 := z.DecBinary()
		_ = yym1492
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1491, false, d)
		}
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1485++
		if yyhl1485 {
			yyb1485 = yyj1485 > l
		} else {
			yyb1485 = r.CheckBreak()
		}
		if yyb1485 {
			break
		}
		z.DecStructFieldNotFound(yyj1485-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [8]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[0] = x.Phase != ""
			yyq1496[1] = len(x.Conditions) != 0
			yyq1496[2] = x.Message != ""
			yyq1496[3] = x.Reason != ""
			yyq1496[4] = x.HostIP != ""
			yyq1496[5] = x.PodIP != ""
			yyq1496[6] = x.StartTime != nil
			yyq1496[7] = len(x.ContainerStatuses) != 0
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1496 int = 0
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1500 := z.EncBinary()
						_ = yym1500
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[2] {
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[3] {
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[4] {
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[5] {
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1514 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1514 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1515 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1515 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				if yyq1496[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1496 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1519 := z.DecBinary()
	_ = yym1519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1520 := r.ReadMapStart()
			if yyl1520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1520, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1520 := r.ReadArrayStart()
			if yyl1520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1521Slc
	var yyhl1521 bool = l >= 0
	for yyj1521 := 0; ; yyj1521++ {
		if yyhl1521 {
			if yyj1521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1521Slc = r.DecodeBytes(yys1521Slc, true, true)
		yys1521 := string(yys1521Slc)
		switch yys1521 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1523 := &x.Conditions
				yym1524 := z.DecBinary()
				_ = yym1524
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1523), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1530 := z.DecBinary()
				_ = yym1530
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1530 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1530 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1531 := &x.ContainerStatuses
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1521)
		} // end switch yys1521
	} // end for yyj1521
	if !yyhl1521 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1533 int
	var yyb1533 bool
	var yyhl1533 bool = l >= 0
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1535 := &x.Conditions
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1535), d)
		}
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1542 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1542 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1543 := &x.ContainerStatuses
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1543), d)
		}
	}
	for {
		yyj1533++
		if yyhl1533 {
			yyb1533 = yyj1533 > l
		} else {
			yyb1533 = r.CheckBreak()
		}
		if yyb1533 {
			break
		}
		z.DecStructFieldNotFound(yyj1533-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1545 := z.EncBinary()
		_ = yym1545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1546 := !z.EncBinary()
			yy2arr1546 := z.EncBasicHandle().StructToArray
			var yyq1546 [4]bool
			_, _, _ = yysep1546, yyq1546, yy2arr1546
			const yyr1546 bool = false
			yyq1546[0] = x.Kind != ""
			yyq1546[1] = x.APIVersion != ""
			yyq1546[2] = true
			yyq1546[3] = true
			if yyr1546 || yy2arr1546 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1546 int = 0
				for _, b := range yyq1546 {
					if b {
						yynn1546++
					}
				}
				r.EncodeMapStart(yynn1546)
			}
			if yyr1546 || yy2arr1546 {
				if yyq1546[0] {
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1546[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1546 || yy2arr1546 {
				if yyq1546[1] {
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1546[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1546 || yy2arr1546 {
				if yyq1546[2] {
					yy1554 := &x.ObjectMeta
					yy1554.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1555 := &x.ObjectMeta
					yy1555.CodecEncodeSelf(e)
				}
			}
			if yyr1546 || yy2arr1546 {
				if yyq1546[3] {
					yy1557 := &x.Status
					yy1557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1558 := &x.Status
					yy1558.CodecEncodeSelf(e)
				}
			}
			if yysep1546 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		switch yys1561 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1564 := &x.ObjectMeta
				yyv1564.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1565 := &x.Status
				yyv1565.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	if !yyhl1561 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1566 int
	var yyb1566 bool
	var yyhl1566 bool = l >= 0
	yyj1566++
	if yyhl1566 {
		yyb1566 = yyj1566 > l
	} else {
		yyb1566 = r.CheckBreak()
	}
	if yyb1566 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1566++
	if yyhl1566 {
		yyb1566 = yyj1566 > l
	} else {
		yyb1566 = r.CheckBreak()
	}
	if yyb1566 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1566++
	if yyhl1566 {
		yyb1566 = yyj1566 > l
	} else {
		yyb1566 = r.CheckBreak()
	}
	if yyb1566 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1569 := &x.ObjectMeta
		yyv1569.CodecDecodeSelf(d)
	}
	yyj1566++
	if yyhl1566 {
		yyb1566 = yyj1566 > l
	} else {
		yyb1566 = r.CheckBreak()
	}
	if yyb1566 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1570 := &x.Status
		yyv1570.CodecDecodeSelf(d)
	}
	for {
		yyj1566++
		if yyhl1566 {
			yyb1566 = yyj1566 > l
		} else {
			yyb1566 = r.CheckBreak()
		}
		if yyb1566 {
			break
		}
		z.DecStructFieldNotFound(yyj1566-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1571 := z.EncBinary()
		_ = yym1571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1572 := !z.EncBinary()
			yy2arr1572 := z.EncBasicHandle().StructToArray
			var yyq1572 [5]bool
			_, _, _ = yysep1572, yyq1572, yy2arr1572
			const yyr1572 bool = false
			yyq1572[0] = x.Kind != ""
			yyq1572[1] = x.APIVersion != ""
			yyq1572[2] = true
			yyq1572[3] = true
			yyq1572[4] = true
			if yyr1572 || yy2arr1572 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1572 int = 0
				for _, b := range yyq1572 {
					if b {
						yynn1572++
					}
				}
				r.EncodeMapStart(yynn1572)
			}
			if yyr1572 || yy2arr1572 {
				if yyq1572[0] {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1572[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1572 || yy2arr1572 {
				if yyq1572[1] {
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1572[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1572 || yy2arr1572 {
				if yyq1572[2] {
					yy1580 := &x.ObjectMeta
					yy1580.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1572[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1581 := &x.ObjectMeta
					yy1581.CodecEncodeSelf(e)
				}
			}
			if yyr1572 || yy2arr1572 {
				if yyq1572[3] {
					yy1583 := &x.Spec
					yy1583.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1572[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1584 := &x.Spec
					yy1584.CodecEncodeSelf(e)
				}
			}
			if yyr1572 || yy2arr1572 {
				if yyq1572[4] {
					yy1586 := &x.Status
					yy1586.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1572[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1587 := &x.Status
					yy1587.CodecEncodeSelf(e)
				}
			}
			if yysep1572 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1588 := z.DecBinary()
	_ = yym1588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1589 := r.ReadMapStart()
			if yyl1589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1589, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1589 := r.ReadArrayStart()
			if yyl1589 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1590Slc
	var yyhl1590 bool = l >= 0
	for yyj1590 := 0; ; yyj1590++ {
		if yyhl1590 {
			if yyj1590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1590Slc = r.DecodeBytes(yys1590Slc, true, true)
		yys1590 := string(yys1590Slc)
		switch yys1590 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1593 := &x.ObjectMeta
				yyv1593.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1594 := &x.Spec
				yyv1594.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1595 := &x.Status
				yyv1595.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1590)
		} // end switch yys1590
	} // end for yyj1590
	if !yyhl1590 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1599 := &x.ObjectMeta
		yyv1599.CodecDecodeSelf(d)
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1600 := &x.Spec
		yyv1600.CodecDecodeSelf(d)
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1601 := &x.Status
		yyv1601.CodecDecodeSelf(d)
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1602 := z.EncBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1603 := !z.EncBinary()
			yy2arr1603 := z.EncBasicHandle().StructToArray
			var yyq1603 [4]bool
			_, _, _ = yysep1603, yyq1603, yy2arr1603
			const yyr1603 bool = false
			yyq1603[0] = x.Kind != ""
			yyq1603[1] = x.APIVersion != ""
			yyq1603[2] = true
			if yyr1603 || yy2arr1603 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1603 int = 1
				for _, b := range yyq1603 {
					if b {
						yynn1603++
					}
				}
				r.EncodeMapStart(yynn1603)
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[0] {
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1603[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[1] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1603[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[2] {
					yy1611 := &x.ListMeta
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1611) {
					} else {
						z.EncFallback(yy1611)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1613 := &x.ListMeta
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1613) {
					} else {
						z.EncFallback(yy1613)
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1603 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1618 := z.DecBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1619 := r.ReadMapStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1619, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1619 := r.ReadArrayStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1620Slc
	var yyhl1620 bool = l >= 0
	for yyj1620 := 0; ; yyj1620++ {
		if yyhl1620 {
			if yyj1620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1620Slc = r.DecodeBytes(yys1620Slc, true, true)
		yys1620 := string(yys1620Slc)
		switch yys1620 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1623 := &x.ListMeta
				yym1624 := z.DecBinary()
				_ = yym1624
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1623) {
				} else {
					z.DecFallback(yyv1623, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1625 := &x.Items
				yym1626 := z.DecBinary()
				_ = yym1626
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1625), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1620)
		} // end switch yys1620
	} // end for yyj1620
	if !yyhl1620 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1627 int
	var yyb1627 bool
	var yyhl1627 bool = l >= 0
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1630 := &x.ListMeta
		yym1631 := z.DecBinary()
		_ = yym1631
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1630) {
		} else {
			z.DecFallback(yyv1630, false)
		}
	}
	yyj1627++
	if yyhl1627 {
		yyb1627 = yyj1627 > l
	} else {
		yyb1627 = r.CheckBreak()
	}
	if yyb1627 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1632 := &x.Items
		yym1633 := z.DecBinary()
		_ = yym1633
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1632), d)
		}
	}
	for {
		yyj1627++
		if yyhl1627 {
			yyb1627 = yyj1627 > l
		} else {
			yyb1627 = r.CheckBreak()
		}
		if yyb1627 {
			break
		}
		z.DecStructFieldNotFound(yyj1627-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [2]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[0] = true
			yyq1635[1] = true
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1635 int = 0
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[0] {
					yy1637 := &x.ObjectMeta
					yy1637.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1638 := &x.ObjectMeta
					yy1638.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				if yyq1635[1] {
					yy1640 := &x.Spec
					yy1640.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1641 := &x.Spec
					yy1641.CodecEncodeSelf(e)
				}
			}
			if yysep1635 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1642 := z.DecBinary()
	_ = yym1642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1643 := r.ReadMapStart()
			if yyl1643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1643, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1643 := r.ReadArrayStart()
			if yyl1643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1644Slc
	var yyhl1644 bool = l >= 0
	for yyj1644 := 0; ; yyj1644++ {
		if yyhl1644 {
			if yyj1644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1644Slc = r.DecodeBytes(yys1644Slc, true, true)
		yys1644 := string(yys1644Slc)
		switch yys1644 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1645 := &x.ObjectMeta
				yyv1645.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1646 := &x.Spec
				yyv1646.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1644)
		} // end switch yys1644
	} // end for yyj1644
	if !yyhl1644 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1647 int
	var yyb1647 bool
	var yyhl1647 bool = l >= 0
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1648 := &x.ObjectMeta
		yyv1648.CodecDecodeSelf(d)
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1649 := &x.Spec
		yyv1649.CodecDecodeSelf(d)
	}
	for {
		yyj1647++
		if yyhl1647 {
			yyb1647 = yyj1647 > l
		} else {
			yyb1647 = r.CheckBreak()
		}
		if yyb1647 {
			break
		}
		z.DecStructFieldNotFound(yyj1647-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1650 := z.EncBinary()
		_ = yym1650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1651 := !z.EncBinary()
			yy2arr1651 := z.EncBasicHandle().StructToArray
			var yyq1651 [4]bool
			_, _, _ = yysep1651, yyq1651, yy2arr1651
			const yyr1651 bool = false
			yyq1651[0] = x.Kind != ""
			yyq1651[1] = x.APIVersion != ""
			yyq1651[2] = true
			yyq1651[3] = true
			if yyr1651 || yy2arr1651 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1651 int = 0
				for _, b := range yyq1651 {
					if b {
						yynn1651++
					}
				}
				r.EncodeMapStart(yynn1651)
			}
			if yyr1651 || yy2arr1651 {
				if yyq1651[0] {
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1651[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1651 || yy2arr1651 {
				if yyq1651[1] {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1651[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1651 || yy2arr1651 {
				if yyq1651[2] {
					yy1659 := &x.ObjectMeta
					yy1659.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1651[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1660 := &x.ObjectMeta
					yy1660.CodecEncodeSelf(e)
				}
			}
			if yyr1651 || yy2arr1651 {
				if yyq1651[3] {
					yy1662 := &x.Template
					yy1662.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1651[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1663 := &x.Template
					yy1663.CodecEncodeSelf(e)
				}
			}
			if yysep1651 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1664 := z.DecBinary()
	_ = yym1664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1665 := r.ReadMapStart()
			if yyl1665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1665, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1665 := r.ReadArrayStart()
			if yyl1665 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1666Slc
	var yyhl1666 bool = l >= 0
	for yyj1666 := 0; ; yyj1666++ {
		if yyhl1666 {
			if yyj1666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1666Slc = r.DecodeBytes(yys1666Slc, true, true)
		yys1666 := string(yys1666Slc)
		switch yys1666 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1669 := &x.ObjectMeta
				yyv1669.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1670 := &x.Template
				yyv1670.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1666)
		} // end switch yys1666
	} // end for yyj1666
	if !yyhl1666 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1671 int
	var yyb1671 bool
	var yyhl1671 bool = l >= 0
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1674 := &x.ObjectMeta
		yyv1674.CodecDecodeSelf(d)
	}
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1675 := &x.Template
		yyv1675.CodecDecodeSelf(d)
	}
	for {
		yyj1671++
		if yyhl1671 {
			yyb1671 = yyj1671 > l
		} else {
			yyb1671 = r.CheckBreak()
		}
		if yyb1671 {
			break
		}
		z.DecStructFieldNotFound(yyj1671-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1676 := z.EncBinary()
		_ = yym1676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1677 := !z.EncBinary()
			yy2arr1677 := z.EncBasicHandle().StructToArray
			var yyq1677 [4]bool
			_, _, _ = yysep1677, yyq1677, yy2arr1677
			const yyr1677 bool = false
			yyq1677[0] = x.Kind != ""
			yyq1677[1] = x.APIVersion != ""
			yyq1677[2] = true
			if yyr1677 || yy2arr1677 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1677 int = 1
				for _, b := range yyq1677 {
					if b {
						yynn1677++
					}
				}
				r.EncodeMapStart(yynn1677)
			}
			if yyr1677 || yy2arr1677 {
				if yyq1677[0] {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				if yyq1677[1] {
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				if yyq1677[2] {
					yy1685 := &x.ListMeta
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1685) {
					} else {
						z.EncFallback(yy1685)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1677[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1687 := &x.ListMeta
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1687) {
					} else {
						z.EncFallback(yy1687)
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1677 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1692 := z.DecBinary()
	_ = yym1692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1693 := r.ReadMapStart()
			if yyl1693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1693, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1693 := r.ReadArrayStart()
			if yyl1693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1694Slc
	var yyhl1694 bool = l >= 0
	for yyj1694 := 0; ; yyj1694++ {
		if yyhl1694 {
			if yyj1694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1694Slc = r.DecodeBytes(yys1694Slc, true, true)
		yys1694 := string(yys1694Slc)
		switch yys1694 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1697 := &x.ListMeta
				yym1698 := z.DecBinary()
				_ = yym1698
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1697) {
				} else {
					z.DecFallback(yyv1697, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1699 := &x.Items
				yym1700 := z.DecBinary()
				_ = yym1700
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1699), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1694)
		} // end switch yys1694
	} // end for yyj1694
	if !yyhl1694 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1701 int
	var yyb1701 bool
	var yyhl1701 bool = l >= 0
	yyj1701++
	if yyhl1701 {
		yyb1701 = yyj1701 > l
	} else {
		yyb1701 = r.CheckBreak()
	}
	if yyb1701 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1701++
	if yyhl1701 {
		yyb1701 = yyj1701 > l
	} else {
		yyb1701 = r.CheckBreak()
	}
	if yyb1701 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1701++
	if yyhl1701 {
		yyb1701 = yyj1701 > l
	} else {
		yyb1701 = r.CheckBreak()
	}
	if yyb1701 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1704 := &x.ListMeta
		yym1705 := z.DecBinary()
		_ = yym1705
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1704) {
		} else {
			z.DecFallback(yyv1704, false)
		}
	}
	yyj1701++
	if yyhl1701 {
		yyb1701 = yyj1701 > l
	} else {
		yyb1701 = r.CheckBreak()
	}
	if yyb1701 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1706 := &x.Items
		yym1707 := z.DecBinary()
		_ = yym1707
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1706), d)
		}
	}
	for {
		yyj1701++
		if yyhl1701 {
			yyb1701 = yyj1701 > l
		} else {
			yyb1701 = r.CheckBreak()
		}
		if yyb1701 {
			break
		}
		z.DecStructFieldNotFound(yyj1701-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1708 := z.EncBinary()
		_ = yym1708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1709 := !z.EncBinary()
			yy2arr1709 := z.EncBasicHandle().StructToArray
			var yyq1709 [3]bool
			_, _, _ = yysep1709, yyq1709, yy2arr1709
			const yyr1709 bool = false
			yyq1709[0] = x.Replicas != nil
			yyq1709[1] = len(x.Selector) != 0
			yyq1709[2] = x.Template != nil
			if yyr1709 || yy2arr1709 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1709 int = 0
				for _, b := range yyq1709 {
					if b {
						yynn1709++
					}
				}
				r.EncodeMapStart(yynn1709)
			}
			if yyr1709 || yy2arr1709 {
				if yyq1709[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1711 := *x.Replicas
						yym1712 := z.EncBinary()
						_ = yym1712
						if false {
						} else {
							r.EncodeInt(int64(yy1711))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1709[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1713 := *x.Replicas
						yym1714 := z.EncBinary()
						_ = yym1714
						if false {
						} else {
							r.EncodeInt(int64(yy1713))
						}
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				if yyq1709[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1716 := z.EncBinary()
						_ = yym1716
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1709[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1717 := z.EncBinary()
						_ = yym1717
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				if yyq1709[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1709[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1709 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1719 := z.DecBinary()
	_ = yym1719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1720 := r.ReadMapStart()
			if yyl1720 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1720, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1720 := r.ReadArrayStart()
			if yyl1720 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1721Slc
	var yyhl1721 bool = l >= 0
	for yyj1721 := 0; ; yyj1721++ {
		if yyhl1721 {
			if yyj1721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1721Slc = r.DecodeBytes(yys1721Slc, true, true)
		yys1721 := string(yys1721Slc)
		switch yys1721 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1723 := z.DecBinary()
				_ = yym1723
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1724 := &x.Selector
				yym1725 := z.DecBinary()
				_ = yym1725
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1724, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1721)
		} // end switch yys1721
	} // end for yyj1721
	if !yyhl1721 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1727 int
	var yyb1727 bool
	var yyhl1727 bool = l >= 0
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1729 := z.DecBinary()
		_ = yym1729
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1730 := &x.Selector
		yym1731 := z.DecBinary()
		_ = yym1731
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1730, false, d)
		}
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1727++
		if yyhl1727 {
			yyb1727 = yyj1727 > l
		} else {
			yyb1727 = r.CheckBreak()
		}
		if yyb1727 {
			break
		}
		z.DecStructFieldNotFound(yyj1727-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1733 := z.EncBinary()
		_ = yym1733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1734 := !z.EncBinary()
			yy2arr1734 := z.EncBasicHandle().StructToArray
			var yyq1734 [2]bool
			_, _, _ = yysep1734, yyq1734, yy2arr1734
			const yyr1734 bool = false
			yyq1734[1] = x.ObservedGeneration != 0
			if yyr1734 || yy2arr1734 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1734 int = 1
				for _, b := range yyq1734 {
					if b {
						yynn1734++
					}
				}
				r.EncodeMapStart(yynn1734)
			}
			if yyr1734 || yy2arr1734 {
				yym1736 := z.EncBinary()
				_ = yym1736
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1737 := z.EncBinary()
				_ = yym1737
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1734 || yy2arr1734 {
				if yyq1734[1] {
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1734[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1734 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1741 := z.DecBinary()
	_ = yym1741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1742 := r.ReadMapStart()
			if yyl1742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1742, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1742 := r.ReadArrayStart()
			if yyl1742 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1743Slc
	var yyhl1743 bool = l >= 0
	for yyj1743 := 0; ; yyj1743++ {
		if yyhl1743 {
			if yyj1743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1743Slc = r.DecodeBytes(yys1743Slc, true, true)
		yys1743 := string(yys1743Slc)
		switch yys1743 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1743)
		} // end switch yys1743
	} // end for yyj1743
	if !yyhl1743 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1746 int
	var yyb1746 bool
	var yyhl1746 bool = l >= 0
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1746++
		if yyhl1746 {
			yyb1746 = yyj1746 > l
		} else {
			yyb1746 = r.CheckBreak()
		}
		if yyb1746 {
			break
		}
		z.DecStructFieldNotFound(yyj1746-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1749 := z.EncBinary()
		_ = yym1749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1750 := !z.EncBinary()
			yy2arr1750 := z.EncBasicHandle().StructToArray
			var yyq1750 [5]bool
			_, _, _ = yysep1750, yyq1750, yy2arr1750
			const yyr1750 bool = false
			yyq1750[0] = x.Kind != ""
			yyq1750[1] = x.APIVersion != ""
			yyq1750[2] = true
			yyq1750[3] = true
			yyq1750[4] = true
			if yyr1750 || yy2arr1750 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1750 int = 0
				for _, b := range yyq1750 {
					if b {
						yynn1750++
					}
				}
				r.EncodeMapStart(yynn1750)
			}
			if yyr1750 || yy2arr1750 {
				if yyq1750[0] {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1750[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1750 || yy2arr1750 {
				if yyq1750[1] {
					yym1755 := z.EncBinary()
					_ = yym1755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1750[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1750 || yy2arr1750 {
				if yyq1750[2] {
					yy1758 := &x.ObjectMeta
					yy1758.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1750[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1759 := &x.ObjectMeta
					yy1759.CodecEncodeSelf(e)
				}
			}
			if yyr1750 || yy2arr1750 {
				if yyq1750[3] {
					yy1761 := &x.Spec
					yy1761.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1750[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1762 := &x.Spec
					yy1762.CodecEncodeSelf(e)
				}
			}
			if yyr1750 || yy2arr1750 {
				if yyq1750[4] {
					yy1764 := &x.Status
					yy1764.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1750[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1765 := &x.Status
					yy1765.CodecEncodeSelf(e)
				}
			}
			if yysep1750 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1766 := z.DecBinary()
	_ = yym1766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1767 := r.ReadMapStart()
			if yyl1767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1767, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1767 := r.ReadArrayStart()
			if yyl1767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1768Slc
	var yyhl1768 bool = l >= 0
	for yyj1768 := 0; ; yyj1768++ {
		if yyhl1768 {
			if yyj1768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1768Slc = r.DecodeBytes(yys1768Slc, true, true)
		yys1768 := string(yys1768Slc)
		switch yys1768 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1771 := &x.ObjectMeta
				yyv1771.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1772 := &x.Spec
				yyv1772.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1773 := &x.Status
				yyv1773.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1768)
		} // end switch yys1768
	} // end for yyj1768
	if !yyhl1768 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1774 int
	var yyb1774 bool
	var yyhl1774 bool = l >= 0
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1777 := &x.ObjectMeta
		yyv1777.CodecDecodeSelf(d)
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1778 := &x.Spec
		yyv1778.CodecDecodeSelf(d)
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1779 := &x.Status
		yyv1779.CodecDecodeSelf(d)
	}
	for {
		yyj1774++
		if yyhl1774 {
			yyb1774 = yyj1774 > l
		} else {
			yyb1774 = r.CheckBreak()
		}
		if yyb1774 {
			break
		}
		z.DecStructFieldNotFound(yyj1774-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1780 := z.EncBinary()
		_ = yym1780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1781 := !z.EncBinary()
			yy2arr1781 := z.EncBasicHandle().StructToArray
			var yyq1781 [4]bool
			_, _, _ = yysep1781, yyq1781, yy2arr1781
			const yyr1781 bool = false
			yyq1781[0] = x.Kind != ""
			yyq1781[1] = x.APIVersion != ""
			yyq1781[2] = true
			if yyr1781 || yy2arr1781 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1781 int = 1
				for _, b := range yyq1781 {
					if b {
						yynn1781++
					}
				}
				r.EncodeMapStart(yynn1781)
			}
			if yyr1781 || yy2arr1781 {
				if yyq1781[0] {
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1781[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1781 || yy2arr1781 {
				if yyq1781[1] {
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1781[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1781 || yy2arr1781 {
				if yyq1781[2] {
					yy1789 := &x.ListMeta
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1789) {
					} else {
						z.EncFallback(yy1789)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1781[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1791 := &x.ListMeta
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1791) {
					} else {
						z.EncFallback(yy1791)
					}
				}
			}
			if yyr1781 || yy2arr1781 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1795 := z.EncBinary()
					_ = yym1795
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1781 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1796 := z.DecBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1797 := r.ReadMapStart()
			if yyl1797 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1797, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1797 := r.ReadArrayStart()
			if yyl1797 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1798Slc
	var yyhl1798 bool = l >= 0
	for yyj1798 := 0; ; yyj1798++ {
		if yyhl1798 {
			if yyj1798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1798Slc = r.DecodeBytes(yys1798Slc, true, true)
		yys1798 := string(yys1798Slc)
		switch yys1798 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1801 := &x.ListMeta
				yym1802 := z.DecBinary()
				_ = yym1802
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1801) {
				} else {
					z.DecFallback(yyv1801, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1803 := &x.Items
				yym1804 := z.DecBinary()
				_ = yym1804
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1803), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1798)
		} // end switch yys1798
	} // end for yyj1798
	if !yyhl1798 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1805 int
	var yyb1805 bool
	var yyhl1805 bool = l >= 0
	yyj1805++
	if yyhl1805 {
		yyb1805 = yyj1805 > l
	} else {
		yyb1805 = r.CheckBreak()
	}
	if yyb1805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1805++
	if yyhl1805 {
		yyb1805 = yyj1805 > l
	} else {
		yyb1805 = r.CheckBreak()
	}
	if yyb1805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1805++
	if yyhl1805 {
		yyb1805 = yyj1805 > l
	} else {
		yyb1805 = r.CheckBreak()
	}
	if yyb1805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1808 := &x.ListMeta
		yym1809 := z.DecBinary()
		_ = yym1809
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1808) {
		} else {
			z.DecFallback(yyv1808, false)
		}
	}
	yyj1805++
	if yyhl1805 {
		yyb1805 = yyj1805 > l
	} else {
		yyb1805 = r.CheckBreak()
	}
	if yyb1805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1810 := &x.Items
		yym1811 := z.DecBinary()
		_ = yym1811
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1810), d)
		}
	}
	for {
		yyj1805++
		if yyhl1805 {
			yyb1805 = yyj1805 > l
		} else {
			yyb1805 = r.CheckBreak()
		}
		if yyb1805 {
			break
		}
		z.DecStructFieldNotFound(yyj1805-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1812 := z.EncBinary()
	_ = yym1812
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1813 := z.DecBinary()
	_ = yym1813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1814 := z.EncBinary()
	_ = yym1814
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1815 := z.DecBinary()
	_ = yym1815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1816 := z.EncBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1817 := !z.EncBinary()
			yy2arr1817 := z.EncBasicHandle().StructToArray
			var yyq1817 [1]bool
			_, _, _ = yysep1817, yyq1817, yy2arr1817
			const yyr1817 bool = false
			yyq1817[0] = true
			if yyr1817 || yy2arr1817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1817 int = 0
				for _, b := range yyq1817 {
					if b {
						yynn1817++
					}
				}
				r.EncodeMapStart(yynn1817)
			}
			if yyr1817 || yy2arr1817 {
				if yyq1817[0] {
					yy1819 := &x.LoadBalancer
					yy1819.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1820 := &x.LoadBalancer
					yy1820.CodecEncodeSelf(e)
				}
			}
			if yysep1817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1821 := z.DecBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1822 := r.ReadMapStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1822 := r.ReadArrayStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1823Slc
	var yyhl1823 bool = l >= 0
	for yyj1823 := 0; ; yyj1823++ {
		if yyhl1823 {
			if yyj1823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1823Slc = r.DecodeBytes(yys1823Slc, true, true)
		yys1823 := string(yys1823Slc)
		switch yys1823 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1824 := &x.LoadBalancer
				yyv1824.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1823)
		} // end switch yys1823
	} // end for yyj1823
	if !yyhl1823 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1825 int
	var yyb1825 bool
	var yyhl1825 bool = l >= 0
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1826 := &x.LoadBalancer
		yyv1826.CodecDecodeSelf(d)
	}
	for {
		yyj1825++
		if yyhl1825 {
			yyb1825 = yyj1825 > l
		} else {
			yyb1825 = r.CheckBreak()
		}
		if yyb1825 {
			break
		}
		z.DecStructFieldNotFound(yyj1825-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1827 := z.EncBinary()
		_ = yym1827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1828 := !z.EncBinary()
			yy2arr1828 := z.EncBasicHandle().StructToArray
			var yyq1828 [1]bool
			_, _, _ = yysep1828, yyq1828, yy2arr1828
			const yyr1828 bool = false
			yyq1828[0] = len(x.Ingress) != 0
			if yyr1828 || yy2arr1828 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1828 int = 0
				for _, b := range yyq1828 {
					if b {
						yynn1828++
					}
				}
				r.EncodeMapStart(yynn1828)
			}
			if yyr1828 || yy2arr1828 {
				if yyq1828[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1830 := z.EncBinary()
						_ = yym1830
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1828[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1831 := z.EncBinary()
						_ = yym1831
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1828 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1832 := z.DecBinary()
	_ = yym1832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1833 := r.ReadMapStart()
			if yyl1833 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1833, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1833 := r.ReadArrayStart()
			if yyl1833 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1834Slc
	var yyhl1834 bool = l >= 0
	for yyj1834 := 0; ; yyj1834++ {
		if yyhl1834 {
			if yyj1834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1834Slc = r.DecodeBytes(yys1834Slc, true, true)
		yys1834 := string(yys1834Slc)
		switch yys1834 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1835 := &x.Ingress
				yym1836 := z.DecBinary()
				_ = yym1836
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1835), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1834)
		} // end switch yys1834
	} // end for yyj1834
	if !yyhl1834 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1837 int
	var yyb1837 bool
	var yyhl1837 bool = l >= 0
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1838 := &x.Ingress
		yym1839 := z.DecBinary()
		_ = yym1839
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1838), d)
		}
	}
	for {
		yyj1837++
		if yyhl1837 {
			yyb1837 = yyj1837 > l
		} else {
			yyb1837 = r.CheckBreak()
		}
		if yyb1837 {
			break
		}
		z.DecStructFieldNotFound(yyj1837-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1840 := z.EncBinary()
		_ = yym1840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1841 := !z.EncBinary()
			yy2arr1841 := z.EncBasicHandle().StructToArray
			var yyq1841 [2]bool
			_, _, _ = yysep1841, yyq1841, yy2arr1841
			const yyr1841 bool = false
			yyq1841[0] = x.IP != ""
			yyq1841[1] = x.Hostname != ""
			if yyr1841 || yy2arr1841 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1841 int = 0
				for _, b := range yyq1841 {
					if b {
						yynn1841++
					}
				}
				r.EncodeMapStart(yynn1841)
			}
			if yyr1841 || yy2arr1841 {
				if yyq1841[0] {
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1841[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1844 := z.EncBinary()
					_ = yym1844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1841 || yy2arr1841 {
				if yyq1841[1] {
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1841[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1841 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1848 := z.DecBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1849 := r.ReadMapStart()
			if yyl1849 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1849, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1849 := r.ReadArrayStart()
			if yyl1849 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1850Slc
	var yyhl1850 bool = l >= 0
	for yyj1850 := 0; ; yyj1850++ {
		if yyhl1850 {
			if yyj1850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1850Slc = r.DecodeBytes(yys1850Slc, true, true)
		yys1850 := string(yys1850Slc)
		switch yys1850 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1850)
		} // end switch yys1850
	} // end for yyj1850
	if !yyhl1850 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1853 int
	var yyb1853 bool
	var yyhl1853 bool = l >= 0
	yyj1853++
	if yyhl1853 {
		yyb1853 = yyj1853 > l
	} else {
		yyb1853 = r.CheckBreak()
	}
	if yyb1853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1853++
	if yyhl1853 {
		yyb1853 = yyj1853 > l
	} else {
		yyb1853 = r.CheckBreak()
	}
	if yyb1853 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1853++
		if yyhl1853 {
			yyb1853 = yyj1853 > l
		} else {
			yyb1853 = r.CheckBreak()
		}
		if yyb1853 {
			break
		}
		z.DecStructFieldNotFound(yyj1853-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [8]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			yyq1857[1] = len(x.Selector) != 0
			yyq1857[2] = x.ClusterIP != ""
			yyq1857[3] = x.Type != ""
			yyq1857[4] = len(x.ExternalIPs) != 0
			yyq1857[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1857[6] = x.SessionAffinity != ""
			yyq1857[7] = x.LoadBalancerIP != ""
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1857 int = 1
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
			}
			if yyr1857 || yy2arr1857 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1860 := z.EncBinary()
					_ = yym1860
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1863 := z.EncBinary()
						_ = yym1863
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[2] {
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1857[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1857[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1869 := z.EncBinary()
						_ = yym1869
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1870 := z.EncBinary()
						_ = yym1870
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1873 := z.EncBinary()
						_ = yym1873
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1857[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1857 || yy2arr1857 {
				if yyq1857[7] {
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1857[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1857 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1878 := z.DecBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1879 := r.ReadMapStart()
			if yyl1879 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1879, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1879 := r.ReadArrayStart()
			if yyl1879 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1880Slc
	var yyhl1880 bool = l >= 0
	for yyj1880 := 0; ; yyj1880++ {
		if yyhl1880 {
			if yyj1880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1880Slc = r.DecodeBytes(yys1880Slc, true, true)
		yys1880 := string(yys1880Slc)
		switch yys1880 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1881 := &x.Ports
				yym1882 := z.DecBinary()
				_ = yym1882
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1881), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1883 := &x.Selector
				yym1884 := z.DecBinary()
				_ = yym1884
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1883, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1887 := &x.ExternalIPs
				yym1888 := z.DecBinary()
				_ = yym1888
				if false {
				} else {
					z.F.DecSliceStringX(yyv1887, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1889 := &x.DeprecatedPublicIPs
				yym1890 := z.DecBinary()
				_ = yym1890
				if false {
				} else {
					z.F.DecSliceStringX(yyv1889, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1880)
		} // end switch yys1880
	} // end for yyj1880
	if !yyhl1880 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1893 int
	var yyb1893 bool
	var yyhl1893 bool = l >= 0
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1894 := &x.Ports
		yym1895 := z.DecBinary()
		_ = yym1895
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1894), d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1896 := &x.Selector
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1896, false, d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1900 := &x.ExternalIPs
		yym1901 := z.DecBinary()
		_ = yym1901
		if false {
		} else {
			z.F.DecSliceStringX(yyv1900, false, d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1902 := &x.DeprecatedPublicIPs
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else {
			z.F.DecSliceStringX(yyv1902, false, d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1893++
		if yyhl1893 {
			yyb1893 = yyj1893 > l
		} else {
			yyb1893 = r.CheckBreak()
		}
		if yyb1893 {
			break
		}
		z.DecStructFieldNotFound(yyj1893-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1906 := z.EncBinary()
		_ = yym1906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1907 := !z.EncBinary()
			yy2arr1907 := z.EncBasicHandle().StructToArray
			var yyq1907 [5]bool
			_, _, _ = yysep1907, yyq1907, yy2arr1907
			const yyr1907 bool = false
			yyq1907[0] = x.Name != ""
			yyq1907[1] = x.Protocol != ""
			yyq1907[3] = true
			yyq1907[4] = x.NodePort != 0
			if yyr1907 || yy2arr1907 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1907 int = 1
				for _, b := range yyq1907 {
					if b {
						yynn1907++
					}
				}
				r.EncodeMapStart(yynn1907)
			}
			if yyr1907 || yy2arr1907 {
				if yyq1907[0] {
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1907[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1907 || yy2arr1907 {
				if yyq1907[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1907[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1907 || yy2arr1907 {
				yym1913 := z.EncBinary()
				_ = yym1913
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1914 := z.EncBinary()
				_ = yym1914
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1907 || yy2arr1907 {
				if yyq1907[3] {
					yy1916 := &x.TargetPort
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1916) {
					} else if !yym1917 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1916)
					} else {
						z.EncFallback(yy1916)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1907[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1918 := &x.TargetPort
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1918) {
					} else if !yym1919 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1918)
					} else {
						z.EncFallback(yy1918)
					}
				}
			}
			if yyr1907 || yy2arr1907 {
				if yyq1907[4] {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1907[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1907 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1923 := z.DecBinary()
	_ = yym1923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1924 := r.ReadMapStart()
			if yyl1924 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1924, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1924 := r.ReadArrayStart()
			if yyl1924 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1925Slc
	var yyhl1925 bool = l >= 0
	for yyj1925 := 0; ; yyj1925++ {
		if yyhl1925 {
			if yyj1925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1925Slc = r.DecodeBytes(yys1925Slc, true, true)
		yys1925 := string(yys1925Slc)
		switch yys1925 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1929 := &x.TargetPort
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1929) {
				} else if !yym1930 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1929)
				} else {
					z.DecFallback(yyv1929, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1925)
		} // end switch yys1925
	} // end for yyj1925
	if !yyhl1925 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1932 int
	var yyb1932 bool
	var yyhl1932 bool = l >= 0
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1936 := &x.TargetPort
		yym1937 := z.DecBinary()
		_ = yym1937
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1936) {
		} else if !yym1937 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1936)
		} else {
			z.DecFallback(yyv1936, false)
		}
	}
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1932++
		if yyhl1932 {
			yyb1932 = yyj1932 > l
		} else {
			yyb1932 = r.CheckBreak()
		}
		if yyb1932 {
			break
		}
		z.DecStructFieldNotFound(yyj1932-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1939 := z.EncBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1940 := !z.EncBinary()
			yy2arr1940 := z.EncBasicHandle().StructToArray
			var yyq1940 [5]bool
			_, _, _ = yysep1940, yyq1940, yy2arr1940
			const yyr1940 bool = false
			yyq1940[0] = x.Kind != ""
			yyq1940[1] = x.APIVersion != ""
			yyq1940[2] = true
			yyq1940[3] = true
			yyq1940[4] = true
			if yyr1940 || yy2arr1940 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1940 int = 0
				for _, b := range yyq1940 {
					if b {
						yynn1940++
					}
				}
				r.EncodeMapStart(yynn1940)
			}
			if yyr1940 || yy2arr1940 {
				if yyq1940[0] {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1940[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				if yyq1940[1] {
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1940[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				if yyq1940[2] {
					yy1948 := &x.ObjectMeta
					yy1948.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1949 := &x.ObjectMeta
					yy1949.CodecEncodeSelf(e)
				}
			}
			if yyr1940 || yy2arr1940 {
				if yyq1940[3] {
					yy1951 := &x.Spec
					yy1951.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1952 := &x.Spec
					yy1952.CodecEncodeSelf(e)
				}
			}
			if yyr1940 || yy2arr1940 {
				if yyq1940[4] {
					yy1954 := &x.Status
					yy1954.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1955 := &x.Status
					yy1955.CodecEncodeSelf(e)
				}
			}
			if yysep1940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1956 := z.DecBinary()
	_ = yym1956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1957 := r.ReadMapStart()
			if yyl1957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1957, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1957 := r.ReadArrayStart()
			if yyl1957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1958Slc
	var yyhl1958 bool = l >= 0
	for yyj1958 := 0; ; yyj1958++ {
		if yyhl1958 {
			if yyj1958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1958Slc = r.DecodeBytes(yys1958Slc, true, true)
		yys1958 := string(yys1958Slc)
		switch yys1958 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1961 := &x.ObjectMeta
				yyv1961.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1962 := &x.Spec
				yyv1962.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1963 := &x.Status
				yyv1963.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1958)
		} // end switch yys1958
	} // end for yyj1958
	if !yyhl1958 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1964 int
	var yyb1964 bool
	var yyhl1964 bool = l >= 0
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1967 := &x.ObjectMeta
		yyv1967.CodecDecodeSelf(d)
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1968 := &x.Spec
		yyv1968.CodecDecodeSelf(d)
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1969 := &x.Status
		yyv1969.CodecDecodeSelf(d)
	}
	for {
		yyj1964++
		if yyhl1964 {
			yyb1964 = yyj1964 > l
		} else {
			yyb1964 = r.CheckBreak()
		}
		if yyb1964 {
			break
		}
		z.DecStructFieldNotFound(yyj1964-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1970 := z.EncBinary()
		_ = yym1970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1971 := !z.EncBinary()
			yy2arr1971 := z.EncBasicHandle().StructToArray
			var yyq1971 [4]bool
			_, _, _ = yysep1971, yyq1971, yy2arr1971
			const yyr1971 bool = false
			yyq1971[0] = x.Kind != ""
			yyq1971[1] = x.APIVersion != ""
			yyq1971[2] = true
			if yyr1971 || yy2arr1971 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1971 int = 1
				for _, b := range yyq1971 {
					if b {
						yynn1971++
					}
				}
				r.EncodeMapStart(yynn1971)
			}
			if yyr1971 || yy2arr1971 {
				if yyq1971[0] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				if yyq1971[1] {
					yym1976 := z.EncBinary()
					_ = yym1976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				if yyq1971[2] {
					yy1979 := &x.ListMeta
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1979) {
					} else {
						z.EncFallback(yy1979)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1971[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1981 := &x.ListMeta
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1981) {
					} else {
						z.EncFallback(yy1981)
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1985 := z.EncBinary()
					_ = yym1985
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1971 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1986 := z.DecBinary()
	_ = yym1986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1987 := r.ReadMapStart()
			if yyl1987 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1987, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1987 := r.ReadArrayStart()
			if yyl1987 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1988Slc
	var yyhl1988 bool = l >= 0
	for yyj1988 := 0; ; yyj1988++ {
		if yyhl1988 {
			if yyj1988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1988Slc = r.DecodeBytes(yys1988Slc, true, true)
		yys1988 := string(yys1988Slc)
		switch yys1988 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1991 := &x.ListMeta
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1991) {
				} else {
					z.DecFallback(yyv1991, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1993 := &x.Items
				yym1994 := z.DecBinary()
				_ = yym1994
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1993), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1988)
		} // end switch yys1988
	} // end for yyj1988
	if !yyhl1988 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1995 int
	var yyb1995 bool
	var yyhl1995 bool = l >= 0
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1998 := &x.ListMeta
		yym1999 := z.DecBinary()
		_ = yym1999
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1998) {
		} else {
			z.DecFallback(yyv1998, false)
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2000 := &x.Items
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2000), d)
		}
	}
	for {
		yyj1995++
		if yyhl1995 {
			yyb1995 = yyj1995 > l
		} else {
			yyb1995 = r.CheckBreak()
		}
		if yyb1995 {
			break
		}
		z.DecStructFieldNotFound(yyj1995-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2002 := z.EncBinary()
		_ = yym2002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2003 := !z.EncBinary()
			yy2arr2003 := z.EncBasicHandle().StructToArray
			var yyq2003 [5]bool
			_, _, _ = yysep2003, yyq2003, yy2arr2003
			const yyr2003 bool = false
			yyq2003[0] = x.Kind != ""
			yyq2003[1] = x.APIVersion != ""
			yyq2003[2] = true
			yyq2003[3] = len(x.Secrets) != 0
			yyq2003[4] = len(x.ImagePullSecrets) != 0
			if yyr2003 || yy2arr2003 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2003 int = 0
				for _, b := range yyq2003 {
					if b {
						yynn2003++
					}
				}
				r.EncodeMapStart(yynn2003)
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[0] {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[1] {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[2] {
					yy2011 := &x.ObjectMeta
					yy2011.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2003[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2012 := &x.ObjectMeta
					yy2012.CodecEncodeSelf(e)
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2014 := z.EncBinary()
						_ = yym2014
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2003[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2015 := z.EncBinary()
						_ = yym2015
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2017 := z.EncBinary()
						_ = yym2017
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2003[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2003 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2019 := z.DecBinary()
	_ = yym2019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2020 := r.ReadMapStart()
			if yyl2020 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2020, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2020 := r.ReadArrayStart()
			if yyl2020 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2021Slc
	var yyhl2021 bool = l >= 0
	for yyj2021 := 0; ; yyj2021++ {
		if yyhl2021 {
			if yyj2021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2021Slc = r.DecodeBytes(yys2021Slc, true, true)
		yys2021 := string(yys2021Slc)
		switch yys2021 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2024 := &x.ObjectMeta
				yyv2024.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2025 := &x.Secrets
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2025), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2027 := &x.ImagePullSecrets
				yym2028 := z.DecBinary()
				_ = yym2028
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2027), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2021)
		} // end switch yys2021
	} // end for yyj2021
	if !yyhl2021 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2029 int
	var yyb2029 bool
	var yyhl2029 bool = l >= 0
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2032 := &x.ObjectMeta
		yyv2032.CodecDecodeSelf(d)
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2033 := &x.Secrets
		yym2034 := z.DecBinary()
		_ = yym2034
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2033), d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2035 := &x.ImagePullSecrets
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2035), d)
		}
	}
	for {
		yyj2029++
		if yyhl2029 {
			yyb2029 = yyj2029 > l
		} else {
			yyb2029 = r.CheckBreak()
		}
		if yyb2029 {
			break
		}
		z.DecStructFieldNotFound(yyj2029-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2037 := z.EncBinary()
		_ = yym2037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2038 := !z.EncBinary()
			yy2arr2038 := z.EncBasicHandle().StructToArray
			var yyq2038 [4]bool
			_, _, _ = yysep2038, yyq2038, yy2arr2038
			const yyr2038 bool = false
			yyq2038[0] = x.Kind != ""
			yyq2038[1] = x.APIVersion != ""
			yyq2038[2] = true
			if yyr2038 || yy2arr2038 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2038 int = 1
				for _, b := range yyq2038 {
					if b {
						yynn2038++
					}
				}
				r.EncodeMapStart(yynn2038)
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[0] {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2038[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2041 := z.EncBinary()
					_ = yym2041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[1] {
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2038[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[2] {
					yy2046 := &x.ListMeta
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2046) {
					} else {
						z.EncFallback(yy2046)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2038[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2048 := &x.ListMeta
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2048) {
					} else {
						z.EncFallback(yy2048)
					}
				}
			}
			if yyr2038 || yy2arr2038 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2038 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2053 := z.DecBinary()
	_ = yym2053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2054 := r.ReadMapStart()
			if yyl2054 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2054, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2054 := r.ReadArrayStart()
			if yyl2054 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2055Slc
	var yyhl2055 bool = l >= 0
	for yyj2055 := 0; ; yyj2055++ {
		if yyhl2055 {
			if yyj2055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2055Slc = r.DecodeBytes(yys2055Slc, true, true)
		yys2055 := string(yys2055Slc)
		switch yys2055 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2058 := &x.ListMeta
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2058) {
				} else {
					z.DecFallback(yyv2058, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2060 := &x.Items
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2060), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2055)
		} // end switch yys2055
	} // end for yyj2055
	if !yyhl2055 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2062 int
	var yyb2062 bool
	var yyhl2062 bool = l >= 0
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2065 := &x.ListMeta
		yym2066 := z.DecBinary()
		_ = yym2066
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2065) {
		} else {
			z.DecFallback(yyv2065, false)
		}
	}
	yyj2062++
	if yyhl2062 {
		yyb2062 = yyj2062 > l
	} else {
		yyb2062 = r.CheckBreak()
	}
	if yyb2062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2067 := &x.Items
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2067), d)
		}
	}
	for {
		yyj2062++
		if yyhl2062 {
			yyb2062 = yyj2062 > l
		} else {
			yyb2062 = r.CheckBreak()
		}
		if yyb2062 {
			break
		}
		z.DecStructFieldNotFound(yyj2062-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2069 := z.EncBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2070 := !z.EncBinary()
			yy2arr2070 := z.EncBasicHandle().StructToArray
			var yyq2070 [4]bool
			_, _, _ = yysep2070, yyq2070, yy2arr2070
			const yyr2070 bool = false
			yyq2070[0] = x.Kind != ""
			yyq2070[1] = x.APIVersion != ""
			yyq2070[2] = true
			if yyr2070 || yy2arr2070 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2070 int = 1
				for _, b := range yyq2070 {
					if b {
						yynn2070++
					}
				}
				r.EncodeMapStart(yynn2070)
			}
			if yyr2070 || yy2arr2070 {
				if yyq2070[0] {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2070[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2070 || yy2arr2070 {
				if yyq2070[1] {
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2070[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2070 || yy2arr2070 {
				if yyq2070[2] {
					yy2078 := &x.ObjectMeta
					yy2078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2070[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2079 := &x.ObjectMeta
					yy2079.CodecEncodeSelf(e)
				}
			}
			if yyr2070 || yy2arr2070 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2081 := z.EncBinary()
					_ = yym2081
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2070 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2083 := z.DecBinary()
	_ = yym2083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2084 := r.ReadMapStart()
			if yyl2084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2084, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2084 := r.ReadArrayStart()
			if yyl2084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2085Slc
	var yyhl2085 bool = l >= 0
	for yyj2085 := 0; ; yyj2085++ {
		if yyhl2085 {
			if yyj2085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2085Slc = r.DecodeBytes(yys2085Slc, true, true)
		yys2085 := string(yys2085Slc)
		switch yys2085 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2088 := &x.ObjectMeta
				yyv2088.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2089 := &x.Subsets
				yym2090 := z.DecBinary()
				_ = yym2090
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2089), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2085)
		} // end switch yys2085
	} // end for yyj2085
	if !yyhl2085 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2091 int
	var yyb2091 bool
	var yyhl2091 bool = l >= 0
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2094 := &x.ObjectMeta
		yyv2094.CodecDecodeSelf(d)
	}
	yyj2091++
	if yyhl2091 {
		yyb2091 = yyj2091 > l
	} else {
		yyb2091 = r.CheckBreak()
	}
	if yyb2091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2095 := &x.Subsets
		yym2096 := z.DecBinary()
		_ = yym2096
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2095), d)
		}
	}
	for {
		yyj2091++
		if yyhl2091 {
			yyb2091 = yyj2091 > l
		} else {
			yyb2091 = r.CheckBreak()
		}
		if yyb2091 {
			break
		}
		z.DecStructFieldNotFound(yyj2091-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [3]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			yyq2098[0] = len(x.Addresses) != 0
			yyq2098[1] = len(x.NotReadyAddresses) != 0
			yyq2098[2] = len(x.Ports) != 0
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2098 int = 0
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2100 := z.EncBinary()
						_ = yym2100
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2101 := z.EncBinary()
						_ = yym2101
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2104 := z.EncBinary()
						_ = yym2104
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2106 := z.EncBinary()
						_ = yym2106
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2098 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2108 := z.DecBinary()
	_ = yym2108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2109 := r.ReadMapStart()
			if yyl2109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2109, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2109 := r.ReadArrayStart()
			if yyl2109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2110Slc
	var yyhl2110 bool = l >= 0
	for yyj2110 := 0; ; yyj2110++ {
		if yyhl2110 {
			if yyj2110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2110Slc = r.DecodeBytes(yys2110Slc, true, true)
		yys2110 := string(yys2110Slc)
		switch yys2110 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2111 := &x.Addresses
				yym2112 := z.DecBinary()
				_ = yym2112
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2111), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2113 := &x.NotReadyAddresses
				yym2114 := z.DecBinary()
				_ = yym2114
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2113), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2115 := &x.Ports
				yym2116 := z.DecBinary()
				_ = yym2116
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2115), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2110)
		} // end switch yys2110
	} // end for yyj2110
	if !yyhl2110 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2117 int
	var yyb2117 bool
	var yyhl2117 bool = l >= 0
	yyj2117++
	if yyhl2117 {
		yyb2117 = yyj2117 > l
	} else {
		yyb2117 = r.CheckBreak()
	}
	if yyb2117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2118 := &x.Addresses
		yym2119 := z.DecBinary()
		_ = yym2119
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2118), d)
		}
	}
	yyj2117++
	if yyhl2117 {
		yyb2117 = yyj2117 > l
	} else {
		yyb2117 = r.CheckBreak()
	}
	if yyb2117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2120 := &x.NotReadyAddresses
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2120), d)
		}
	}
	yyj2117++
	if yyhl2117 {
		yyb2117 = yyj2117 > l
	} else {
		yyb2117 = r.CheckBreak()
	}
	if yyb2117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2122 := &x.Ports
		yym2123 := z.DecBinary()
		_ = yym2123
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2122), d)
		}
	}
	for {
		yyj2117++
		if yyhl2117 {
			yyb2117 = yyj2117 > l
		} else {
			yyb2117 = r.CheckBreak()
		}
		if yyb2117 {
			break
		}
		z.DecStructFieldNotFound(yyj2117-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2124 := z.EncBinary()
		_ = yym2124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2125 := !z.EncBinary()
			yy2arr2125 := z.EncBasicHandle().StructToArray
			var yyq2125 [2]bool
			_, _, _ = yysep2125, yyq2125, yy2arr2125
			const yyr2125 bool = false
			yyq2125[1] = x.TargetRef != nil
			if yyr2125 || yy2arr2125 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2125 int = 1
				for _, b := range yyq2125 {
					if b {
						yynn2125++
					}
				}
				r.EncodeMapStart(yynn2125)
			}
			if yyr2125 || yy2arr2125 {
				yym2127 := z.EncBinary()
				_ = yym2127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2128 := z.EncBinary()
				_ = yym2128
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2125 || yy2arr2125 {
				if yyq2125[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2125[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2125 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2130 := z.DecBinary()
	_ = yym2130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2131 := r.ReadMapStart()
			if yyl2131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2131 := r.ReadArrayStart()
			if yyl2131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2132Slc
	var yyhl2132 bool = l >= 0
	for yyj2132 := 0; ; yyj2132++ {
		if yyhl2132 {
			if yyj2132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2132Slc = r.DecodeBytes(yys2132Slc, true, true)
		yys2132 := string(yys2132Slc)
		switch yys2132 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2132)
		} // end switch yys2132
	} // end for yyj2132
	if !yyhl2132 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2135 int
	var yyb2135 bool
	var yyhl2135 bool = l >= 0
	yyj2135++
	if yyhl2135 {
		yyb2135 = yyj2135 > l
	} else {
		yyb2135 = r.CheckBreak()
	}
	if yyb2135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2135++
	if yyhl2135 {
		yyb2135 = yyj2135 > l
	} else {
		yyb2135 = r.CheckBreak()
	}
	if yyb2135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2135++
		if yyhl2135 {
			yyb2135 = yyj2135 > l
		} else {
			yyb2135 = r.CheckBreak()
		}
		if yyb2135 {
			break
		}
		z.DecStructFieldNotFound(yyj2135-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [3]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			yyq2139[0] = x.Name != ""
			yyq2139[2] = x.Protocol != ""
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2139 int = 1
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
			}
			if yyr2139 || yy2arr2139 {
				if yyq2139[0] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				yym2144 := z.EncBinary()
				_ = yym2144
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2145 := z.EncBinary()
				_ = yym2145
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2139 || yy2arr2139 {
				if yyq2139[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2139 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2147 := z.DecBinary()
	_ = yym2147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2148 := r.ReadMapStart()
			if yyl2148 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2148, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2148 := r.ReadArrayStart()
			if yyl2148 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2149Slc
	var yyhl2149 bool = l >= 0
	for yyj2149 := 0; ; yyj2149++ {
		if yyhl2149 {
			if yyj2149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2149Slc = r.DecodeBytes(yys2149Slc, true, true)
		yys2149 := string(yys2149Slc)
		switch yys2149 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2149)
		} // end switch yys2149
	} // end for yyj2149
	if !yyhl2149 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2153 int
	var yyb2153 bool
	var yyhl2153 bool = l >= 0
	yyj2153++
	if yyhl2153 {
		yyb2153 = yyj2153 > l
	} else {
		yyb2153 = r.CheckBreak()
	}
	if yyb2153 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2153++
	if yyhl2153 {
		yyb2153 = yyj2153 > l
	} else {
		yyb2153 = r.CheckBreak()
	}
	if yyb2153 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2153++
	if yyhl2153 {
		yyb2153 = yyj2153 > l
	} else {
		yyb2153 = r.CheckBreak()
	}
	if yyb2153 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2153++
		if yyhl2153 {
			yyb2153 = yyj2153 > l
		} else {
			yyb2153 = r.CheckBreak()
		}
		if yyb2153 {
			break
		}
		z.DecStructFieldNotFound(yyj2153-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2157 := z.EncBinary()
		_ = yym2157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2158 := !z.EncBinary()
			yy2arr2158 := z.EncBasicHandle().StructToArray
			var yyq2158 [4]bool
			_, _, _ = yysep2158, yyq2158, yy2arr2158
			const yyr2158 bool = false
			yyq2158[0] = x.Kind != ""
			yyq2158[1] = x.APIVersion != ""
			yyq2158[2] = true
			if yyr2158 || yy2arr2158 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2158 int = 1
				for _, b := range yyq2158 {
					if b {
						yynn2158++
					}
				}
				r.EncodeMapStart(yynn2158)
			}
			if yyr2158 || yy2arr2158 {
				if yyq2158[0] {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2158[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2158 || yy2arr2158 {
				if yyq2158[1] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2158[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2158 || yy2arr2158 {
				if yyq2158[2] {
					yy2166 := &x.ListMeta
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2166) {
					} else {
						z.EncFallback(yy2166)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2158[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2168 := &x.ListMeta
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2168) {
					} else {
						z.EncFallback(yy2168)
					}
				}
			}
			if yyr2158 || yy2arr2158 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2158 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2173 := z.DecBinary()
	_ = yym2173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2174 := r.ReadMapStart()
			if yyl2174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2174, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2174 := r.ReadArrayStart()
			if yyl2174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2175Slc
	var yyhl2175 bool = l >= 0
	for yyj2175 := 0; ; yyj2175++ {
		if yyhl2175 {
			if yyj2175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2175Slc = r.DecodeBytes(yys2175Slc, true, true)
		yys2175 := string(yys2175Slc)
		switch yys2175 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2178 := &x.ListMeta
				yym2179 := z.DecBinary()
				_ = yym2179
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2178) {
				} else {
					z.DecFallback(yyv2178, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2180 := &x.Items
				yym2181 := z.DecBinary()
				_ = yym2181
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2180), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2175)
		} // end switch yys2175
	} // end for yyj2175
	if !yyhl2175 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2182 int
	var yyb2182 bool
	var yyhl2182 bool = l >= 0
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2185 := &x.ListMeta
		yym2186 := z.DecBinary()
		_ = yym2186
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2185) {
		} else {
			z.DecFallback(yyv2185, false)
		}
	}
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2187 := &x.Items
		yym2188 := z.DecBinary()
		_ = yym2188
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2187), d)
		}
	}
	for {
		yyj2182++
		if yyhl2182 {
			yyb2182 = yyj2182 > l
		} else {
			yyb2182 = r.CheckBreak()
		}
		if yyb2182 {
			break
		}
		z.DecStructFieldNotFound(yyj2182-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2189 := z.EncBinary()
		_ = yym2189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2190 := !z.EncBinary()
			yy2arr2190 := z.EncBasicHandle().StructToArray
			var yyq2190 [4]bool
			_, _, _ = yysep2190, yyq2190, yy2arr2190
			const yyr2190 bool = false
			yyq2190[0] = x.PodCIDR != ""
			yyq2190[1] = x.ExternalID != ""
			yyq2190[2] = x.ProviderID != ""
			yyq2190[3] = x.Unschedulable != false
			if yyr2190 || yy2arr2190 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2190 int = 0
				for _, b := range yyq2190 {
					if b {
						yynn2190++
					}
				}
				r.EncodeMapStart(yynn2190)
			}
			if yyr2190 || yy2arr2190 {
				if yyq2190[0] {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2190[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2190 || yy2arr2190 {
				if yyq2190[1] {
					yym2195 := z.EncBinary()
					_ = yym2195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2190[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2190 || yy2arr2190 {
				if yyq2190[2] {
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2190[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2190 || yy2arr2190 {
				if yyq2190[3] {
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2190[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2190 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2203 := z.DecBinary()
	_ = yym2203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2204 := r.ReadMapStart()
			if yyl2204 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2204, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2204 := r.ReadArrayStart()
			if yyl2204 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2205Slc
	var yyhl2205 bool = l >= 0
	for yyj2205 := 0; ; yyj2205++ {
		if yyhl2205 {
			if yyj2205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2205Slc = r.DecodeBytes(yys2205Slc, true, true)
		yys2205 := string(yys2205Slc)
		switch yys2205 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2205)
		} // end switch yys2205
	} // end for yyj2205
	if !yyhl2205 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2210 int
	var yyb2210 bool
	var yyhl2210 bool = l >= 0
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2210++
		if yyhl2210 {
			yyb2210 = yyj2210 > l
		} else {
			yyb2210 = r.CheckBreak()
		}
		if yyb2210 {
			break
		}
		z.DecStructFieldNotFound(yyj2210-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2215 := z.EncBinary()
		_ = yym2215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2216 := !z.EncBinary()
			yy2arr2216 := z.EncBasicHandle().StructToArray
			var yyq2216 [1]bool
			_, _, _ = yysep2216, yyq2216, yy2arr2216
			const yyr2216 bool = false
			if yyr2216 || yy2arr2216 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2216 int = 1
				for _, b := range yyq2216 {
					if b {
						yynn2216++
					}
				}
				r.EncodeMapStart(yynn2216)
			}
			if yyr2216 || yy2arr2216 {
				yym2218 := z.EncBinary()
				_ = yym2218
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2219 := z.EncBinary()
				_ = yym2219
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2216 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2220 := z.DecBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2221 := r.ReadMapStart()
			if yyl2221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2221, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2221 := r.ReadArrayStart()
			if yyl2221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2222Slc
	var yyhl2222 bool = l >= 0
	for yyj2222 := 0; ; yyj2222++ {
		if yyhl2222 {
			if yyj2222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2222Slc = r.DecodeBytes(yys2222Slc, true, true)
		yys2222 := string(yys2222Slc)
		switch yys2222 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2222)
		} // end switch yys2222
	} // end for yyj2222
	if !yyhl2222 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2224 int
	var yyb2224 bool
	var yyhl2224 bool = l >= 0
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2224++
		if yyhl2224 {
			yyb2224 = yyj2224 > l
		} else {
			yyb2224 = r.CheckBreak()
		}
		if yyb2224 {
			break
		}
		z.DecStructFieldNotFound(yyj2224-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2226 := z.EncBinary()
		_ = yym2226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2227 := !z.EncBinary()
			yy2arr2227 := z.EncBasicHandle().StructToArray
			var yyq2227 [1]bool
			_, _, _ = yysep2227, yyq2227, yy2arr2227
			const yyr2227 bool = false
			yyq2227[0] = true
			if yyr2227 || yy2arr2227 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2227 int = 0
				for _, b := range yyq2227 {
					if b {
						yynn2227++
					}
				}
				r.EncodeMapStart(yynn2227)
			}
			if yyr2227 || yy2arr2227 {
				if yyq2227[0] {
					yy2229 := &x.KubeletEndpoint
					yy2229.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2227[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2230 := &x.KubeletEndpoint
					yy2230.CodecEncodeSelf(e)
				}
			}
			if yysep2227 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2231 := z.DecBinary()
	_ = yym2231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2232 := r.ReadMapStart()
			if yyl2232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2232, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2232 := r.ReadArrayStart()
			if yyl2232 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2233Slc
	var yyhl2233 bool = l >= 0
	for yyj2233 := 0; ; yyj2233++ {
		if yyhl2233 {
			if yyj2233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2233Slc = r.DecodeBytes(yys2233Slc, true, true)
		yys2233 := string(yys2233Slc)
		switch yys2233 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2234 := &x.KubeletEndpoint
				yyv2234.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2233)
		} // end switch yys2233
	} // end for yyj2233
	if !yyhl2233 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2235 int
	var yyb2235 bool
	var yyhl2235 bool = l >= 0
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2236 := &x.KubeletEndpoint
		yyv2236.CodecDecodeSelf(d)
	}
	for {
		yyj2235++
		if yyhl2235 {
			yyb2235 = yyj2235 > l
		} else {
			yyb2235 = r.CheckBreak()
		}
		if yyb2235 {
			break
		}
		z.DecStructFieldNotFound(yyj2235-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2237 := z.EncBinary()
		_ = yym2237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2238 := !z.EncBinary()
			yy2arr2238 := z.EncBasicHandle().StructToArray
			var yyq2238 [8]bool
			_, _, _ = yysep2238, yyq2238, yy2arr2238
			const yyr2238 bool = false
			if yyr2238 || yy2arr2238 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2238 int = 8
				for _, b := range yyq2238 {
					if b {
						yynn2238++
					}
				}
				r.EncodeMapStart(yynn2238)
			}
			if yyr2238 || yy2arr2238 {
				yym2240 := z.EncBinary()
				_ = yym2240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2241 := z.EncBinary()
				_ = yym2241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2243 := z.EncBinary()
				_ = yym2243
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2244 := z.EncBinary()
				_ = yym2244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2246 := z.EncBinary()
				_ = yym2246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2249 := z.EncBinary()
				_ = yym2249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2252 := z.EncBinary()
				_ = yym2252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2255 := z.EncBinary()
				_ = yym2255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2258 := z.EncBinary()
				_ = yym2258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2259 := z.EncBinary()
				_ = yym2259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2238 || yy2arr2238 {
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2262 := z.EncBinary()
				_ = yym2262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2238 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2263 := z.DecBinary()
	_ = yym2263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2264 := r.ReadMapStart()
			if yyl2264 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2264, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2264 := r.ReadArrayStart()
			if yyl2264 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2265Slc
	var yyhl2265 bool = l >= 0
	for yyj2265 := 0; ; yyj2265++ {
		if yyhl2265 {
			if yyj2265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2265Slc = r.DecodeBytes(yys2265Slc, true, true)
		yys2265 := string(yys2265Slc)
		switch yys2265 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2265)
		} // end switch yys2265
	} // end for yyj2265
	if !yyhl2265 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2274 int
	var yyb2274 bool
	var yyhl2274 bool = l >= 0
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2274++
		if yyhl2274 {
			yyb2274 = yyj2274 > l
		} else {
			yyb2274 = r.CheckBreak()
		}
		if yyb2274 {
			break
		}
		z.DecStructFieldNotFound(yyj2274-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2283 := z.EncBinary()
		_ = yym2283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2284 := !z.EncBinary()
			yy2arr2284 := z.EncBasicHandle().StructToArray
			var yyq2284 [6]bool
			_, _, _ = yysep2284, yyq2284, yy2arr2284
			const yyr2284 bool = false
			yyq2284[0] = len(x.Capacity) != 0
			yyq2284[1] = x.Phase != ""
			yyq2284[2] = len(x.Conditions) != 0
			yyq2284[3] = len(x.Addresses) != 0
			yyq2284[4] = true
			yyq2284[5] = true
			if yyr2284 || yy2arr2284 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2284 int = 0
				for _, b := range yyq2284 {
					if b {
						yynn2284++
					}
				}
				r.EncodeMapStart(yynn2284)
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2284[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2288 := z.EncBinary()
						_ = yym2288
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2289 := z.EncBinary()
						_ = yym2289
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2291 := z.EncBinary()
						_ = yym2291
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2292 := z.EncBinary()
						_ = yym2292
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[4] {
					yy2294 := &x.DaemonEndpoints
					yy2294.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2295 := &x.DaemonEndpoints
					yy2295.CodecEncodeSelf(e)
				}
			}
			if yyr2284 || yy2arr2284 {
				if yyq2284[5] {
					yy2297 := &x.NodeInfo
					yy2297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2298 := &x.NodeInfo
					yy2298.CodecEncodeSelf(e)
				}
			}
			if yysep2284 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2299 := z.DecBinary()
	_ = yym2299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2300 := r.ReadMapStart()
			if yyl2300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2300 := r.ReadArrayStart()
			if yyl2300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2301Slc
	var yyhl2301 bool = l >= 0
	for yyj2301 := 0; ; yyj2301++ {
		if yyhl2301 {
			if yyj2301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2301Slc = r.DecodeBytes(yys2301Slc, true, true)
		yys2301 := string(yys2301Slc)
		switch yys2301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2302 := &x.Capacity
				yyv2302.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2304 := &x.Conditions
				yym2305 := z.DecBinary()
				_ = yym2305
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2304), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2306 := &x.Addresses
				yym2307 := z.DecBinary()
				_ = yym2307
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2306), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2308 := &x.DaemonEndpoints
				yyv2308.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2309 := &x.NodeInfo
				yyv2309.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2301)
		} // end switch yys2301
	} // end for yyj2301
	if !yyhl2301 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2310 int
	var yyb2310 bool
	var yyhl2310 bool = l >= 0
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2311 := &x.Capacity
		yyv2311.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2313 := &x.Conditions
		yym2314 := z.DecBinary()
		_ = yym2314
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2313), d)
		}
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2315 := &x.Addresses
		yym2316 := z.DecBinary()
		_ = yym2316
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2315), d)
		}
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2317 := &x.DaemonEndpoints
		yyv2317.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2318 := &x.NodeInfo
		yyv2318.CodecDecodeSelf(d)
	}
	for {
		yyj2310++
		if yyhl2310 {
			yyb2310 = yyj2310 > l
		} else {
			yyb2310 = r.CheckBreak()
		}
		if yyb2310 {
			break
		}
		z.DecStructFieldNotFound(yyj2310-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2319 := z.EncBinary()
	_ = yym2319
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2320 := z.DecBinary()
	_ = yym2320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2321 := z.EncBinary()
	_ = yym2321
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2322 := z.DecBinary()
	_ = yym2322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2323 := z.EncBinary()
		_ = yym2323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2324 := !z.EncBinary()
			yy2arr2324 := z.EncBasicHandle().StructToArray
			var yyq2324 [6]bool
			_, _, _ = yysep2324, yyq2324, yy2arr2324
			const yyr2324 bool = false
			yyq2324[2] = true
			yyq2324[3] = true
			yyq2324[4] = x.Reason != ""
			yyq2324[5] = x.Message != ""
			if yyr2324 || yy2arr2324 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2324 int = 2
				for _, b := range yyq2324 {
					if b {
						yynn2324++
					}
				}
				r.EncodeMapStart(yynn2324)
			}
			if yyr2324 || yy2arr2324 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2324 || yy2arr2324 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[2] {
					yy2328 := &x.LastHeartbeatTime
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2328) {
					} else if yym2329 {
						z.EncBinaryMarshal(yy2328)
					} else if !yym2329 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2328)
					} else {
						z.EncFallback(yy2328)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2324[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2330 := &x.LastHeartbeatTime
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else if yym2331 {
						z.EncBinaryMarshal(yy2330)
					} else if !yym2331 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2330)
					} else {
						z.EncFallback(yy2330)
					}
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[3] {
					yy2333 := &x.LastTransitionTime
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2333) {
					} else if yym2334 {
						z.EncBinaryMarshal(yy2333)
					} else if !yym2334 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2333)
					} else {
						z.EncFallback(yy2333)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2324[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2335 := &x.LastTransitionTime
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2335) {
					} else if yym2336 {
						z.EncBinaryMarshal(yy2335)
					} else if !yym2336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2335)
					} else {
						z.EncFallback(yy2335)
					}
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[4] {
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2324[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2339 := z.EncBinary()
					_ = yym2339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[5] {
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2324[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2324 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2343 := z.DecBinary()
	_ = yym2343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2344 := r.ReadMapStart()
			if yyl2344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2344, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2344 := r.ReadArrayStart()
			if yyl2344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2345Slc
	var yyhl2345 bool = l >= 0
	for yyj2345 := 0; ; yyj2345++ {
		if yyhl2345 {
			if yyj2345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2345Slc = r.DecodeBytes(yys2345Slc, true, true)
		yys2345 := string(yys2345Slc)
		switch yys2345 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2348 := &x.LastHeartbeatTime
				yym2349 := z.DecBinary()
				_ = yym2349
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2348) {
				} else if yym2349 {
					z.DecBinaryUnmarshal(yyv2348)
				} else if !yym2349 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2348)
				} else {
					z.DecFallback(yyv2348, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2350 := &x.LastTransitionTime
				yym2351 := z.DecBinary()
				_ = yym2351
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2350) {
				} else if yym2351 {
					z.DecBinaryUnmarshal(yyv2350)
				} else if !yym2351 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2350)
				} else {
					z.DecFallback(yyv2350, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2345)
		} // end switch yys2345
	} // end for yyj2345
	if !yyhl2345 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2354 int
	var yyb2354 bool
	var yyhl2354 bool = l >= 0
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2357 := &x.LastHeartbeatTime
		yym2358 := z.DecBinary()
		_ = yym2358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2357) {
		} else if yym2358 {
			z.DecBinaryUnmarshal(yyv2357)
		} else if !yym2358 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2357)
		} else {
			z.DecFallback(yyv2357, false)
		}
	}
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2359 := &x.LastTransitionTime
		yym2360 := z.DecBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2359) {
		} else if yym2360 {
			z.DecBinaryUnmarshal(yyv2359)
		} else if !yym2360 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2359)
		} else {
			z.DecFallback(yyv2359, false)
		}
	}
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2354++
		if yyhl2354 {
			yyb2354 = yyj2354 > l
		} else {
			yyb2354 = r.CheckBreak()
		}
		if yyb2354 {
			break
		}
		z.DecStructFieldNotFound(yyj2354-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2363 := z.EncBinary()
	_ = yym2363
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2365 := z.EncBinary()
		_ = yym2365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2366 := !z.EncBinary()
			yy2arr2366 := z.EncBasicHandle().StructToArray
			var yyq2366 [2]bool
			_, _, _ = yysep2366, yyq2366, yy2arr2366
			const yyr2366 bool = false
			if yyr2366 || yy2arr2366 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2366 int = 2
				for _, b := range yyq2366 {
					if b {
						yynn2366++
					}
				}
				r.EncodeMapStart(yynn2366)
			}
			if yyr2366 || yy2arr2366 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2366 || yy2arr2366 {
				yym2369 := z.EncBinary()
				_ = yym2369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2370 := z.EncBinary()
				_ = yym2370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2366 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		switch yys2373 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	if !yyhl2373 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2376 int
	var yyb2376 bool
	var yyhl2376 bool = l >= 0
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2376++
		if yyhl2376 {
			yyb2376 = yyj2376 > l
		} else {
			yyb2376 = r.CheckBreak()
		}
		if yyb2376 {
			break
		}
		z.DecStructFieldNotFound(yyj2376-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2379 := z.EncBinary()
	_ = yym2379
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2380 := z.DecBinary()
	_ = yym2380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2381 := z.EncBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2382 := z.DecBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2383 := z.EncBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2384 := !z.EncBinary()
			yy2arr2384 := z.EncBasicHandle().StructToArray
			var yyq2384 [5]bool
			_, _, _ = yysep2384, yyq2384, yy2arr2384
			const yyr2384 bool = false
			yyq2384[0] = x.Kind != ""
			yyq2384[1] = x.APIVersion != ""
			yyq2384[2] = true
			yyq2384[3] = true
			yyq2384[4] = true
			if yyr2384 || yy2arr2384 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2384 int = 0
				for _, b := range yyq2384 {
					if b {
						yynn2384++
					}
				}
				r.EncodeMapStart(yynn2384)
			}
			if yyr2384 || yy2arr2384 {
				if yyq2384[0] {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				if yyq2384[1] {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				if yyq2384[2] {
					yy2392 := &x.ObjectMeta
					yy2392.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2393 := &x.ObjectMeta
					yy2393.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				if yyq2384[3] {
					yy2395 := &x.Spec
					yy2395.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2396 := &x.Spec
					yy2396.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				if yyq2384[4] {
					yy2398 := &x.Status
					yy2398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2399 := &x.Status
					yy2399.CodecEncodeSelf(e)
				}
			}
			if yysep2384 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		switch yys2402 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2405 := &x.ObjectMeta
				yyv2405.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2406 := &x.Spec
				yyv2406.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2407 := &x.Status
				yyv2407.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	if !yyhl2402 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2408 int
	var yyb2408 bool
	var yyhl2408 bool = l >= 0
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2411 := &x.ObjectMeta
		yyv2411.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2412 := &x.Spec
		yyv2412.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2413 := &x.Status
		yyv2413.CodecDecodeSelf(d)
	}
	for {
		yyj2408++
		if yyhl2408 {
			yyb2408 = yyj2408 > l
		} else {
			yyb2408 = r.CheckBreak()
		}
		if yyb2408 {
			break
		}
		z.DecStructFieldNotFound(yyj2408-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2414 := z.EncBinary()
		_ = yym2414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2415 := !z.EncBinary()
			yy2arr2415 := z.EncBasicHandle().StructToArray
			var yyq2415 [4]bool
			_, _, _ = yysep2415, yyq2415, yy2arr2415
			const yyr2415 bool = false
			yyq2415[0] = x.Kind != ""
			yyq2415[1] = x.APIVersion != ""
			yyq2415[2] = true
			if yyr2415 || yy2arr2415 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2415 int = 1
				for _, b := range yyq2415 {
					if b {
						yynn2415++
					}
				}
				r.EncodeMapStart(yynn2415)
			}
			if yyr2415 || yy2arr2415 {
				if yyq2415[0] {
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2415[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				if yyq2415[1] {
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2415[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				if yyq2415[2] {
					yy2423 := &x.ListMeta
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2423) {
					} else {
						z.EncFallback(yy2423)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2415[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2425 := &x.ListMeta
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2425) {
					} else {
						z.EncFallback(yy2425)
					}
				}
			}
			if yyr2415 || yy2arr2415 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2415 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2430 := z.DecBinary()
	_ = yym2430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2431 := r.ReadMapStart()
			if yyl2431 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2431, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2431 := r.ReadArrayStart()
			if yyl2431 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2432Slc
	var yyhl2432 bool = l >= 0
	for yyj2432 := 0; ; yyj2432++ {
		if yyhl2432 {
			if yyj2432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2432Slc = r.DecodeBytes(yys2432Slc, true, true)
		yys2432 := string(yys2432Slc)
		switch yys2432 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2435 := &x.ListMeta
				yym2436 := z.DecBinary()
				_ = yym2436
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2435) {
				} else {
					z.DecFallback(yyv2435, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2437 := &x.Items
				yym2438 := z.DecBinary()
				_ = yym2438
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2437), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2432)
		} // end switch yys2432
	} // end for yyj2432
	if !yyhl2432 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2439 int
	var yyb2439 bool
	var yyhl2439 bool = l >= 0
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2442 := &x.ListMeta
		yym2443 := z.DecBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2442) {
		} else {
			z.DecFallback(yyv2442, false)
		}
	}
	yyj2439++
	if yyhl2439 {
		yyb2439 = yyj2439 > l
	} else {
		yyb2439 = r.CheckBreak()
	}
	if yyb2439 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2444 := &x.Items
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2444), d)
		}
	}
	for {
		yyj2439++
		if yyhl2439 {
			yyb2439 = yyj2439 > l
		} else {
			yyb2439 = r.CheckBreak()
		}
		if yyb2439 {
			break
		}
		z.DecStructFieldNotFound(yyj2439-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2446 := z.EncBinary()
	_ = yym2446
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2447 := z.DecBinary()
	_ = yym2447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2448 := z.EncBinary()
		_ = yym2448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2449 := !z.EncBinary()
			yy2arr2449 := z.EncBasicHandle().StructToArray
			var yyq2449 [1]bool
			_, _, _ = yysep2449, yyq2449, yy2arr2449
			const yyr2449 bool = false
			yyq2449[0] = len(x.Finalizers) != 0
			if yyr2449 || yy2arr2449 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2449 int = 0
				for _, b := range yyq2449 {
					if b {
						yynn2449++
					}
				}
				r.EncodeMapStart(yynn2449)
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2451 := z.EncBinary()
						_ = yym2451
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2452 := z.EncBinary()
						_ = yym2452
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2449 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2453 := z.DecBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2454 := r.ReadMapStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2454, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2454 := r.ReadArrayStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2455Slc
	var yyhl2455 bool = l >= 0
	for yyj2455 := 0; ; yyj2455++ {
		if yyhl2455 {
			if yyj2455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2455Slc = r.DecodeBytes(yys2455Slc, true, true)
		yys2455 := string(yys2455Slc)
		switch yys2455 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2456 := &x.Finalizers
				yym2457 := z.DecBinary()
				_ = yym2457
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2456), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2455)
		} // end switch yys2455
	} // end for yyj2455
	if !yyhl2455 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2458 int
	var yyb2458 bool
	var yyhl2458 bool = l >= 0
	yyj2458++
	if yyhl2458 {
		yyb2458 = yyj2458 > l
	} else {
		yyb2458 = r.CheckBreak()
	}
	if yyb2458 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2459 := &x.Finalizers
		yym2460 := z.DecBinary()
		_ = yym2460
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2459), d)
		}
	}
	for {
		yyj2458++
		if yyhl2458 {
			yyb2458 = yyj2458 > l
		} else {
			yyb2458 = r.CheckBreak()
		}
		if yyb2458 {
			break
		}
		z.DecStructFieldNotFound(yyj2458-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2461 := z.EncBinary()
		_ = yym2461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2462 := !z.EncBinary()
			yy2arr2462 := z.EncBasicHandle().StructToArray
			var yyq2462 [1]bool
			_, _, _ = yysep2462, yyq2462, yy2arr2462
			const yyr2462 bool = false
			yyq2462[0] = x.Phase != ""
			if yyr2462 || yy2arr2462 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2462 int = 0
				for _, b := range yyq2462 {
					if b {
						yynn2462++
					}
				}
				r.EncodeMapStart(yynn2462)
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2462[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2462 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2465 := r.ReadMapStart()
			if yyl2465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2465, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2465 := r.ReadArrayStart()
			if yyl2465 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2466Slc
	var yyhl2466 bool = l >= 0
	for yyj2466 := 0; ; yyj2466++ {
		if yyhl2466 {
			if yyj2466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2466Slc = r.DecodeBytes(yys2466Slc, true, true)
		yys2466 := string(yys2466Slc)
		switch yys2466 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2466)
		} // end switch yys2466
	} // end for yyj2466
	if !yyhl2466 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2470 := z.EncBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2471 := z.DecBinary()
	_ = yym2471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2472 := z.EncBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2473 := !z.EncBinary()
			yy2arr2473 := z.EncBasicHandle().StructToArray
			var yyq2473 [5]bool
			_, _, _ = yysep2473, yyq2473, yy2arr2473
			const yyr2473 bool = false
			yyq2473[0] = x.Kind != ""
			yyq2473[1] = x.APIVersion != ""
			yyq2473[2] = true
			yyq2473[3] = true
			yyq2473[4] = true
			if yyr2473 || yy2arr2473 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2473 int = 0
				for _, b := range yyq2473 {
					if b {
						yynn2473++
					}
				}
				r.EncodeMapStart(yynn2473)
			}
			if yyr2473 || yy2arr2473 {
				if yyq2473[0] {
					yym2475 := z.EncBinary()
					_ = yym2475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2473[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2473 || yy2arr2473 {
				if yyq2473[1] {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2473[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2473 || yy2arr2473 {
				if yyq2473[2] {
					yy2481 := &x.ObjectMeta
					yy2481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2473[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2482 := &x.ObjectMeta
					yy2482.CodecEncodeSelf(e)
				}
			}
			if yyr2473 || yy2arr2473 {
				if yyq2473[3] {
					yy2484 := &x.Spec
					yy2484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2473[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2485 := &x.Spec
					yy2485.CodecEncodeSelf(e)
				}
			}
			if yyr2473 || yy2arr2473 {
				if yyq2473[4] {
					yy2487 := &x.Status
					yy2487.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2473[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2488 := &x.Status
					yy2488.CodecEncodeSelf(e)
				}
			}
			if yysep2473 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2489 := z.DecBinary()
	_ = yym2489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2490 := r.ReadMapStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2490, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2490 := r.ReadArrayStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2491Slc
	var yyhl2491 bool = l >= 0
	for yyj2491 := 0; ; yyj2491++ {
		if yyhl2491 {
			if yyj2491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2491Slc = r.DecodeBytes(yys2491Slc, true, true)
		yys2491 := string(yys2491Slc)
		switch yys2491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2494 := &x.ObjectMeta
				yyv2494.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2495 := &x.Spec
				yyv2495.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2496 := &x.Status
				yyv2496.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2491)
		} // end switch yys2491
	} // end for yyj2491
	if !yyhl2491 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2497 int
	var yyb2497 bool
	var yyhl2497 bool = l >= 0
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2500 := &x.ObjectMeta
		yyv2500.CodecDecodeSelf(d)
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2501 := &x.Spec
		yyv2501.CodecDecodeSelf(d)
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2502 := &x.Status
		yyv2502.CodecDecodeSelf(d)
	}
	for {
		yyj2497++
		if yyhl2497 {
			yyb2497 = yyj2497 > l
		} else {
			yyb2497 = r.CheckBreak()
		}
		if yyb2497 {
			break
		}
		z.DecStructFieldNotFound(yyj2497-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2503 := z.EncBinary()
		_ = yym2503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2504 := !z.EncBinary()
			yy2arr2504 := z.EncBasicHandle().StructToArray
			var yyq2504 [4]bool
			_, _, _ = yysep2504, yyq2504, yy2arr2504
			const yyr2504 bool = false
			yyq2504[0] = x.Kind != ""
			yyq2504[1] = x.APIVersion != ""
			yyq2504[2] = true
			if yyr2504 || yy2arr2504 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2504 int = 1
				for _, b := range yyq2504 {
					if b {
						yynn2504++
					}
				}
				r.EncodeMapStart(yynn2504)
			}
			if yyr2504 || yy2arr2504 {
				if yyq2504[0] {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2504[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2504 || yy2arr2504 {
				if yyq2504[1] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2504[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2504 || yy2arr2504 {
				if yyq2504[2] {
					yy2512 := &x.ListMeta
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2512) {
					} else {
						z.EncFallback(yy2512)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2504[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2514 := &x.ListMeta
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2514) {
					} else {
						z.EncFallback(yy2514)
					}
				}
			}
			if yyr2504 || yy2arr2504 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2504 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2519 := z.DecBinary()
	_ = yym2519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2520 := r.ReadMapStart()
			if yyl2520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2520, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2520 := r.ReadArrayStart()
			if yyl2520 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2521Slc
	var yyhl2521 bool = l >= 0
	for yyj2521 := 0; ; yyj2521++ {
		if yyhl2521 {
			if yyj2521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2521Slc = r.DecodeBytes(yys2521Slc, true, true)
		yys2521 := string(yys2521Slc)
		switch yys2521 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2524 := &x.ListMeta
				yym2525 := z.DecBinary()
				_ = yym2525
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2524) {
				} else {
					z.DecFallback(yyv2524, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2526 := &x.Items
				yym2527 := z.DecBinary()
				_ = yym2527
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2526), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2521)
		} // end switch yys2521
	} // end for yyj2521
	if !yyhl2521 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2528 int
	var yyb2528 bool
	var yyhl2528 bool = l >= 0
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2531 := &x.ListMeta
		yym2532 := z.DecBinary()
		_ = yym2532
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2531) {
		} else {
			z.DecFallback(yyv2531, false)
		}
	}
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2533 := &x.Items
		yym2534 := z.DecBinary()
		_ = yym2534
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2533), d)
		}
	}
	for {
		yyj2528++
		if yyhl2528 {
			yyb2528 = yyj2528 > l
		} else {
			yyb2528 = r.CheckBreak()
		}
		if yyb2528 {
			break
		}
		z.DecStructFieldNotFound(yyj2528-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2535 := z.EncBinary()
		_ = yym2535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2536 := !z.EncBinary()
			yy2arr2536 := z.EncBasicHandle().StructToArray
			var yyq2536 [4]bool
			_, _, _ = yysep2536, yyq2536, yy2arr2536
			const yyr2536 bool = false
			yyq2536[0] = x.Kind != ""
			yyq2536[1] = x.APIVersion != ""
			yyq2536[2] = true
			if yyr2536 || yy2arr2536 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2536 int = 1
				for _, b := range yyq2536 {
					if b {
						yynn2536++
					}
				}
				r.EncodeMapStart(yynn2536)
			}
			if yyr2536 || yy2arr2536 {
				if yyq2536[0] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				if yyq2536[1] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2536[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2536 || yy2arr2536 {
				if yyq2536[2] {
					yy2544 := &x.ObjectMeta
					yy2544.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2536[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2545 := &x.ObjectMeta
					yy2545.CodecEncodeSelf(e)
				}
			}
			if yyr2536 || yy2arr2536 {
				yy2547 := &x.Target
				yy2547.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2548 := &x.Target
				yy2548.CodecEncodeSelf(e)
			}
			if yysep2536 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2549 := z.DecBinary()
	_ = yym2549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2550 := r.ReadMapStart()
			if yyl2550 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2550, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2550 := r.ReadArrayStart()
			if yyl2550 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2551Slc
	var yyhl2551 bool = l >= 0
	for yyj2551 := 0; ; yyj2551++ {
		if yyhl2551 {
			if yyj2551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2551Slc = r.DecodeBytes(yys2551Slc, true, true)
		yys2551 := string(yys2551Slc)
		switch yys2551 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2554 := &x.ObjectMeta
				yyv2554.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2555 := &x.Target
				yyv2555.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2551)
		} // end switch yys2551
	} // end for yyj2551
	if !yyhl2551 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2556 int
	var yyb2556 bool
	var yyhl2556 bool = l >= 0
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2559 := &x.ObjectMeta
		yyv2559.CodecDecodeSelf(d)
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2560 := &x.Target
		yyv2560.CodecDecodeSelf(d)
	}
	for {
		yyj2556++
		if yyhl2556 {
			yyb2556 = yyj2556 > l
		} else {
			yyb2556 = r.CheckBreak()
		}
		if yyb2556 {
			break
		}
		z.DecStructFieldNotFound(yyj2556-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2561 := z.EncBinary()
		_ = yym2561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2562 := !z.EncBinary()
			yy2arr2562 := z.EncBasicHandle().StructToArray
			var yyq2562 [3]bool
			_, _, _ = yysep2562, yyq2562, yy2arr2562
			const yyr2562 bool = false
			yyq2562[0] = x.Kind != ""
			yyq2562[1] = x.APIVersion != ""
			if yyr2562 || yy2arr2562 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2562 int = 1
				for _, b := range yyq2562 {
					if b {
						yynn2562++
					}
				}
				r.EncodeMapStart(yynn2562)
			}
			if yyr2562 || yy2arr2562 {
				if yyq2562[0] {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2562[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				if yyq2562[1] {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2562[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2570 := *x.GracePeriodSeconds
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeInt(int64(yy2570))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2572 := *x.GracePeriodSeconds
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeInt(int64(yy2572))
					}
				}
			}
			if yysep2562 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2574 := z.DecBinary()
	_ = yym2574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2575 := r.ReadMapStart()
			if yyl2575 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2575, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2575 := r.ReadArrayStart()
			if yyl2575 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2576Slc
	var yyhl2576 bool = l >= 0
	for yyj2576 := 0; ; yyj2576++ {
		if yyhl2576 {
			if yyj2576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2576Slc = r.DecodeBytes(yys2576Slc, true, true)
		yys2576 := string(yys2576Slc)
		switch yys2576 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2580 := z.DecBinary()
				_ = yym2580
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2576)
		} // end switch yys2576
	} // end for yyj2576
	if !yyhl2576 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2581 int
	var yyb2581 bool
	var yyhl2581 bool = l >= 0
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2585 := z.DecBinary()
		_ = yym2585
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2581++
		if yyhl2581 {
			yyb2581 = yyj2581 > l
		} else {
			yyb2581 = r.CheckBreak()
		}
		if yyb2581 {
			break
		}
		z.DecStructFieldNotFound(yyj2581-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2586 := z.EncBinary()
		_ = yym2586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2587 := !z.EncBinary()
			yy2arr2587 := z.EncBasicHandle().StructToArray
			var yyq2587 [7]bool
			_, _, _ = yysep2587, yyq2587, yy2arr2587
			const yyr2587 bool = false
			yyq2587[0] = x.Kind != ""
			yyq2587[1] = x.APIVersion != ""
			yyq2587[2] = x.LabelSelector != ""
			yyq2587[3] = x.FieldSelector != ""
			yyq2587[4] = x.Watch != false
			yyq2587[5] = x.ResourceVersion != ""
			yyq2587[6] = x.TimeoutSeconds != nil
			if yyr2587 || yy2arr2587 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2587 int = 0
				for _, b := range yyq2587 {
					if b {
						yynn2587++
					}
				}
				r.EncodeMapStart(yynn2587)
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[0] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2587[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[1] {
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2587[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[2] {
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2587[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[3] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2587[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[4] {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2587[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[5] {
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2587[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2587 || yy2arr2587 {
				if yyq2587[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2607 := *x.TimeoutSeconds
						yym2608 := z.EncBinary()
						_ = yym2608
						if false {
						} else {
							r.EncodeInt(int64(yy2607))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2587[6] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2609 := *x.TimeoutSeconds
						yym2610 := z.EncBinary()
						_ = yym2610
						if false {
						} else {
							r.EncodeInt(int64(yy2609))
						}
					}
				}
			}
			if yysep2587 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2611 := z.DecBinary()
	_ = yym2611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2612 := r.ReadMapStart()
			if yyl2612 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2612, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2612 := r.ReadArrayStart()
			if yyl2612 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2613Slc
	var yyhl2613 bool = l >= 0
	for yyj2613 := 0; ; yyj2613++ {
		if yyhl2613 {
			if yyj2613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2613Slc = r.DecodeBytes(yys2613Slc, true, true)
		yys2613 := string(yys2613Slc)
		switch yys2613 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2621 := z.DecBinary()
				_ = yym2621
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2613)
		} // end switch yys2613
	} // end for yyj2613
	if !yyhl2613 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2630 := z.DecBinary()
		_ = yym2630
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2631 := z.EncBinary()
		_ = yym2631
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2632 := !z.EncBinary()
			yy2arr2632 := z.EncBasicHandle().StructToArray
			var yyq2632 [10]bool
			_, _, _ = yysep2632, yyq2632, yy2arr2632
			const yyr2632 bool = false
			yyq2632[0] = x.Kind != ""
			yyq2632[1] = x.APIVersion != ""
			yyq2632[2] = x.Container != ""
			yyq2632[3] = x.Follow != false
			yyq2632[4] = x.Previous != false
			yyq2632[5] = x.SinceSeconds != nil
			yyq2632[6] = x.SinceTime != nil
			yyq2632[7] = x.Timestamps != false
			yyq2632[8] = x.TailLines != nil
			yyq2632[9] = x.LimitBytes != nil
			if yyr2632 || yy2arr2632 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2632 int = 0
				for _, b := range yyq2632 {
					if b {
						yynn2632++
					}
				}
				r.EncodeMapStart(yynn2632)
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[0] {
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2632[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[1] {
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2632[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[2] {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2632[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[3] {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2632[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[4] {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2632[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2649 := *x.SinceSeconds
						yym2650 := z.EncBinary()
						_ = yym2650
						if false {
						} else {
							r.EncodeInt(int64(yy2649))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2632[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2651 := *x.SinceSeconds
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							r.EncodeInt(int64(yy2651))
						}
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2654 := z.EncBinary()
						_ = yym2654
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2654 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2654 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2632[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2655 := z.EncBinary()
						_ = yym2655
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2655 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2655 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[7] {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2632[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2660 := *x.TailLines
						yym2661 := z.EncBinary()
						_ = yym2661
						if false {
						} else {
							r.EncodeInt(int64(yy2660))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2632[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2662 := *x.TailLines
						yym2663 := z.EncBinary()
						_ = yym2663
						if false {
						} else {
							r.EncodeInt(int64(yy2662))
						}
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				if yyq2632[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2665 := *x.LimitBytes
						yym2666 := z.EncBinary()
						_ = yym2666
						if false {
						} else {
							r.EncodeInt(int64(yy2665))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2632[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2667 := *x.LimitBytes
						yym2668 := z.EncBinary()
						_ = yym2668
						if false {
						} else {
							r.EncodeInt(int64(yy2667))
						}
					}
				}
			}
			if yysep2632 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2669 := z.DecBinary()
	_ = yym2669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2670 := r.ReadMapStart()
			if yyl2670 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2670, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2670 := r.ReadArrayStart()
			if yyl2670 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2671Slc
	var yyhl2671 bool = l >= 0
	for yyj2671 := 0; ; yyj2671++ {
		if yyhl2671 {
			if yyj2671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2671Slc = r.DecodeBytes(yys2671Slc, true, true)
		yys2671 := string(yys2671Slc)
		switch yys2671 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2678 := z.DecBinary()
				_ = yym2678
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2680 := z.DecBinary()
				_ = yym2680
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2680 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2680 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2683 := z.DecBinary()
				_ = yym2683
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2685 := z.DecBinary()
				_ = yym2685
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2671)
		} // end switch yys2671
	} // end for yyj2671
	if !yyhl2671 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2686 int
	var yyb2686 bool
	var yyhl2686 bool = l >= 0
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2693 := z.DecBinary()
		_ = yym2693
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2695 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2695 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2698 := z.DecBinary()
		_ = yym2698
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2700 := z.DecBinary()
		_ = yym2700
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2686++
		if yyhl2686 {
			yyb2686 = yyj2686 > l
		} else {
			yyb2686 = r.CheckBreak()
		}
		if yyb2686 {
			break
		}
		z.DecStructFieldNotFound(yyj2686-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2701 := z.EncBinary()
		_ = yym2701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2702 := !z.EncBinary()
			yy2arr2702 := z.EncBasicHandle().StructToArray
			var yyq2702 [7]bool
			_, _, _ = yysep2702, yyq2702, yy2arr2702
			const yyr2702 bool = false
			yyq2702[0] = x.Kind != ""
			yyq2702[1] = x.APIVersion != ""
			yyq2702[2] = x.Stdin != false
			yyq2702[3] = x.Stdout != false
			yyq2702[4] = x.Stderr != false
			yyq2702[5] = x.TTY != false
			yyq2702[6] = x.Container != ""
			if yyr2702 || yy2arr2702 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2702 int = 0
				for _, b := range yyq2702 {
					if b {
						yynn2702++
					}
				}
				r.EncodeMapStart(yynn2702)
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[0] {
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[1] {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[2] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2702[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[3] {
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2702[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[4] {
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2702[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[5] {
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2702[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[6] {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2702 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2724 := z.DecBinary()
	_ = yym2724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2725 := r.ReadMapStart()
			if yyl2725 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2725, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2725 := r.ReadArrayStart()
			if yyl2725 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2726Slc
	var yyhl2726 bool = l >= 0
	for yyj2726 := 0; ; yyj2726++ {
		if yyhl2726 {
			if yyj2726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2726Slc = r.DecodeBytes(yys2726Slc, true, true)
		yys2726 := string(yys2726Slc)
		switch yys2726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2726)
		} // end switch yys2726
	} // end for yyj2726
	if !yyhl2726 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2734 int
	var yyb2734 bool
	var yyhl2734 bool = l >= 0
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2734++
	if yyhl2734 {
		yyb2734 = yyj2734 > l
	} else {
		yyb2734 = r.CheckBreak()
	}
	if yyb2734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2734++
		if yyhl2734 {
			yyb2734 = yyj2734 > l
		} else {
			yyb2734 = r.CheckBreak()
		}
		if yyb2734 {
			break
		}
		z.DecStructFieldNotFound(yyj2734-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2742 := z.EncBinary()
		_ = yym2742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2743 := !z.EncBinary()
			yy2arr2743 := z.EncBasicHandle().StructToArray
			var yyq2743 [8]bool
			_, _, _ = yysep2743, yyq2743, yy2arr2743
			const yyr2743 bool = false
			yyq2743[0] = x.Kind != ""
			yyq2743[1] = x.APIVersion != ""
			yyq2743[2] = x.Stdin != false
			yyq2743[3] = x.Stdout != false
			yyq2743[4] = x.Stderr != false
			yyq2743[5] = x.TTY != false
			yyq2743[6] = x.Container != ""
			if yyr2743 || yy2arr2743 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2743 int = 1
				for _, b := range yyq2743 {
					if b {
						yynn2743++
					}
				}
				r.EncodeMapStart(yynn2743)
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[0] {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[1] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[2] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2743[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[3] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2743[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[4] {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2743[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[5] {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2743[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[6] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2743 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2768 := z.DecBinary()
	_ = yym2768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2769 := r.ReadMapStart()
			if yyl2769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2769 := r.ReadArrayStart()
			if yyl2769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2770Slc
	var yyhl2770 bool = l >= 0
	for yyj2770 := 0; ; yyj2770++ {
		if yyhl2770 {
			if yyj2770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2770Slc = r.DecodeBytes(yys2770Slc, true, true)
		yys2770 := string(yys2770Slc)
		switch yys2770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2778 := &x.Command
				yym2779 := z.DecBinary()
				_ = yym2779
				if false {
				} else {
					z.F.DecSliceStringX(yyv2778, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2770)
		} // end switch yys2770
	} // end for yyj2770
	if !yyhl2770 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2780 int
	var yyb2780 bool
	var yyhl2780 bool = l >= 0
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2788 := &x.Command
		yym2789 := z.DecBinary()
		_ = yym2789
		if false {
		} else {
			z.F.DecSliceStringX(yyv2788, false, d)
		}
	}
	for {
		yyj2780++
		if yyhl2780 {
			yyb2780 = yyj2780 > l
		} else {
			yyb2780 = r.CheckBreak()
		}
		if yyb2780 {
			break
		}
		z.DecStructFieldNotFound(yyj2780-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2790 := z.EncBinary()
		_ = yym2790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2791 := !z.EncBinary()
			yy2arr2791 := z.EncBasicHandle().StructToArray
			var yyq2791 [3]bool
			_, _, _ = yysep2791, yyq2791, yy2arr2791
			const yyr2791 bool = false
			yyq2791[0] = x.Kind != ""
			yyq2791[1] = x.APIVersion != ""
			yyq2791[2] = x.Path != ""
			if yyr2791 || yy2arr2791 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2791 int = 0
				for _, b := range yyq2791 {
					if b {
						yynn2791++
					}
				}
				r.EncodeMapStart(yynn2791)
			}
			if yyr2791 || yy2arr2791 {
				if yyq2791[0] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				if yyq2791[1] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				if yyq2791[2] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2791 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2801 := z.DecBinary()
	_ = yym2801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2802 := r.ReadMapStart()
			if yyl2802 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2802, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2802 := r.ReadArrayStart()
			if yyl2802 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2803Slc
	var yyhl2803 bool = l >= 0
	for yyj2803 := 0; ; yyj2803++ {
		if yyhl2803 {
			if yyj2803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2803Slc = r.DecodeBytes(yys2803Slc, true, true)
		yys2803 := string(yys2803Slc)
		switch yys2803 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2803)
		} // end switch yys2803
	} // end for yyj2803
	if !yyhl2803 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2807 int
	var yyb2807 bool
	var yyhl2807 bool = l >= 0
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2807++
		if yyhl2807 {
			yyb2807 = yyj2807 > l
		} else {
			yyb2807 = r.CheckBreak()
		}
		if yyb2807 {
			break
		}
		z.DecStructFieldNotFound(yyj2807-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2811 := z.EncBinary()
		_ = yym2811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2812 := !z.EncBinary()
			yy2arr2812 := z.EncBasicHandle().StructToArray
			var yyq2812 [7]bool
			_, _, _ = yysep2812, yyq2812, yy2arr2812
			const yyr2812 bool = false
			yyq2812[0] = x.Kind != ""
			yyq2812[1] = x.Namespace != ""
			yyq2812[2] = x.Name != ""
			yyq2812[3] = x.UID != ""
			yyq2812[4] = x.APIVersion != ""
			yyq2812[5] = x.ResourceVersion != ""
			yyq2812[6] = x.FieldPath != ""
			if yyr2812 || yy2arr2812 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2812 int = 0
				for _, b := range yyq2812 {
					if b {
						yynn2812++
					}
				}
				r.EncodeMapStart(yynn2812)
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[0] {
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[1] {
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[2] {
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[3] {
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[4] {
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[5] {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				if yyq2812[6] {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2812 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2834 := z.DecBinary()
	_ = yym2834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2835 := r.ReadMapStart()
			if yyl2835 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2835, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2835 := r.ReadArrayStart()
			if yyl2835 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2836Slc
	var yyhl2836 bool = l >= 0
	for yyj2836 := 0; ; yyj2836++ {
		if yyhl2836 {
			if yyj2836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2836Slc = r.DecodeBytes(yys2836Slc, true, true)
		yys2836 := string(yys2836Slc)
		switch yys2836 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2836)
		} // end switch yys2836
	} // end for yyj2836
	if !yyhl2836 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2844 int
	var yyb2844 bool
	var yyhl2844 bool = l >= 0
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2844++
		if yyhl2844 {
			yyb2844 = yyj2844 > l
		} else {
			yyb2844 = r.CheckBreak()
		}
		if yyb2844 {
			break
		}
		z.DecStructFieldNotFound(yyj2844-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2852 := z.EncBinary()
		_ = yym2852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2853 := !z.EncBinary()
			yy2arr2853 := z.EncBasicHandle().StructToArray
			var yyq2853 [1]bool
			_, _, _ = yysep2853, yyq2853, yy2arr2853
			const yyr2853 bool = false
			yyq2853[0] = x.Name != ""
			if yyr2853 || yy2arr2853 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2853 int = 0
				for _, b := range yyq2853 {
					if b {
						yynn2853++
					}
				}
				r.EncodeMapStart(yynn2853)
			}
			if yyr2853 || yy2arr2853 {
				if yyq2853[0] {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2853[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2853 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2857 := z.DecBinary()
	_ = yym2857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2858 := r.ReadMapStart()
			if yyl2858 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2858, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2858 := r.ReadArrayStart()
			if yyl2858 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2859Slc
	var yyhl2859 bool = l >= 0
	for yyj2859 := 0; ; yyj2859++ {
		if yyhl2859 {
			if yyj2859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2859Slc = r.DecodeBytes(yys2859Slc, true, true)
		yys2859 := string(yys2859Slc)
		switch yys2859 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2859)
		} // end switch yys2859
	} // end for yyj2859
	if !yyhl2859 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2861 int
	var yyb2861 bool
	var yyhl2861 bool = l >= 0
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2861++
		if yyhl2861 {
			yyb2861 = yyj2861 > l
		} else {
			yyb2861 = r.CheckBreak()
		}
		if yyb2861 {
			break
		}
		z.DecStructFieldNotFound(yyj2861-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2863 := z.EncBinary()
		_ = yym2863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2864 := !z.EncBinary()
			yy2arr2864 := z.EncBasicHandle().StructToArray
			var yyq2864 [3]bool
			_, _, _ = yysep2864, yyq2864, yy2arr2864
			const yyr2864 bool = false
			yyq2864[0] = x.Kind != ""
			yyq2864[1] = x.APIVersion != ""
			yyq2864[2] = true
			if yyr2864 || yy2arr2864 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2864 int = 0
				for _, b := range yyq2864 {
					if b {
						yynn2864++
					}
				}
				r.EncodeMapStart(yynn2864)
			}
			if yyr2864 || yy2arr2864 {
				if yyq2864[0] {
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2864[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2864 || yy2arr2864 {
				if yyq2864[1] {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2864[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2864 || yy2arr2864 {
				if yyq2864[2] {
					yy2872 := &x.Reference
					yy2872.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2864[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2873 := &x.Reference
					yy2873.CodecEncodeSelf(e)
				}
			}
			if yysep2864 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2874 := z.DecBinary()
	_ = yym2874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2875 := r.ReadMapStart()
			if yyl2875 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2875, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2875 := r.ReadArrayStart()
			if yyl2875 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2876Slc
	var yyhl2876 bool = l >= 0
	for yyj2876 := 0; ; yyj2876++ {
		if yyhl2876 {
			if yyj2876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2876Slc = r.DecodeBytes(yys2876Slc, true, true)
		yys2876 := string(yys2876Slc)
		switch yys2876 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2879 := &x.Reference
				yyv2879.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2876)
		} // end switch yys2876
	} // end for yyj2876
	if !yyhl2876 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2880 int
	var yyb2880 bool
	var yyhl2880 bool = l >= 0
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2883 := &x.Reference
		yyv2883.CodecDecodeSelf(d)
	}
	for {
		yyj2880++
		if yyhl2880 {
			yyb2880 = yyj2880 > l
		} else {
			yyb2880 = r.CheckBreak()
		}
		if yyb2880 {
			break
		}
		z.DecStructFieldNotFound(yyj2880-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2884 := z.EncBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2885 := !z.EncBinary()
			yy2arr2885 := z.EncBasicHandle().StructToArray
			var yyq2885 [2]bool
			_, _, _ = yysep2885, yyq2885, yy2arr2885
			const yyr2885 bool = false
			yyq2885[0] = x.Component != ""
			yyq2885[1] = x.Host != ""
			if yyr2885 || yy2arr2885 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2885 int = 0
				for _, b := range yyq2885 {
					if b {
						yynn2885++
					}
				}
				r.EncodeMapStart(yynn2885)
			}
			if yyr2885 || yy2arr2885 {
				if yyq2885[0] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				if yyq2885[1] {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2885 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2892 := z.DecBinary()
	_ = yym2892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2893 := r.ReadMapStart()
			if yyl2893 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2893, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2893 := r.ReadArrayStart()
			if yyl2893 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2894Slc
	var yyhl2894 bool = l >= 0
	for yyj2894 := 0; ; yyj2894++ {
		if yyhl2894 {
			if yyj2894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2894Slc = r.DecodeBytes(yys2894Slc, true, true)
		yys2894 := string(yys2894Slc)
		switch yys2894 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2894)
		} // end switch yys2894
	} // end for yyj2894
	if !yyhl2894 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2897 int
	var yyb2897 bool
	var yyhl2897 bool = l >= 0
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2897++
		if yyhl2897 {
			yyb2897 = yyj2897 > l
		} else {
			yyb2897 = r.CheckBreak()
		}
		if yyb2897 {
			break
		}
		z.DecStructFieldNotFound(yyj2897-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2900 := z.EncBinary()
		_ = yym2900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2901 := !z.EncBinary()
			yy2arr2901 := z.EncBasicHandle().StructToArray
			var yyq2901 [10]bool
			_, _, _ = yysep2901, yyq2901, yy2arr2901
			const yyr2901 bool = false
			yyq2901[0] = x.Kind != ""
			yyq2901[1] = x.APIVersion != ""
			yyq2901[4] = x.Reason != ""
			yyq2901[5] = x.Message != ""
			yyq2901[6] = true
			yyq2901[7] = true
			yyq2901[8] = true
			yyq2901[9] = x.Count != 0
			if yyr2901 || yy2arr2901 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2901 int = 2
				for _, b := range yyq2901 {
					if b {
						yynn2901++
					}
				}
				r.EncodeMapStart(yynn2901)
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[0] {
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[1] {
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				yy2909 := &x.ObjectMeta
				yy2909.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2910 := &x.ObjectMeta
				yy2910.CodecEncodeSelf(e)
			}
			if yyr2901 || yy2arr2901 {
				yy2912 := &x.InvolvedObject
				yy2912.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2913 := &x.InvolvedObject
				yy2913.CodecEncodeSelf(e)
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[4] {
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[5] {
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2901[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[6] {
					yy2921 := &x.Source
					yy2921.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2901[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2922 := &x.Source
					yy2922.CodecEncodeSelf(e)
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[7] {
					yy2924 := &x.FirstTimestamp
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2924) {
					} else if yym2925 {
						z.EncBinaryMarshal(yy2924)
					} else if !yym2925 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2924)
					} else {
						z.EncFallback(yy2924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2901[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2926 := &x.FirstTimestamp
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2926) {
					} else if yym2927 {
						z.EncBinaryMarshal(yy2926)
					} else if !yym2927 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2926)
					} else {
						z.EncFallback(yy2926)
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[8] {
					yy2929 := &x.LastTimestamp
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2929) {
					} else if yym2930 {
						z.EncBinaryMarshal(yy2929)
					} else if !yym2930 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2929)
					} else {
						z.EncFallback(yy2929)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2901[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2931 := &x.LastTimestamp
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2931) {
					} else if yym2932 {
						z.EncBinaryMarshal(yy2931)
					} else if !yym2932 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2931)
					} else {
						z.EncFallback(yy2931)
					}
				}
			}
			if yyr2901 || yy2arr2901 {
				if yyq2901[9] {
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2901[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2901 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2936 := z.DecBinary()
	_ = yym2936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2937 := r.ReadMapStart()
			if yyl2937 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2937, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2937 := r.ReadArrayStart()
			if yyl2937 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2938Slc
	var yyhl2938 bool = l >= 0
	for yyj2938 := 0; ; yyj2938++ {
		if yyhl2938 {
			if yyj2938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2938Slc = r.DecodeBytes(yys2938Slc, true, true)
		yys2938 := string(yys2938Slc)
		switch yys2938 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2941 := &x.ObjectMeta
				yyv2941.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2942 := &x.InvolvedObject
				yyv2942.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2945 := &x.Source
				yyv2945.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2946 := &x.FirstTimestamp
				yym2947 := z.DecBinary()
				_ = yym2947
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2946) {
				} else if yym2947 {
					z.DecBinaryUnmarshal(yyv2946)
				} else if !yym2947 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2946)
				} else {
					z.DecFallback(yyv2946, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2948 := &x.LastTimestamp
				yym2949 := z.DecBinary()
				_ = yym2949
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2948) {
				} else if yym2949 {
					z.DecBinaryUnmarshal(yyv2948)
				} else if !yym2949 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2948)
				} else {
					z.DecFallback(yyv2948, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2938)
		} // end switch yys2938
	} // end for yyj2938
	if !yyhl2938 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2951 int
	var yyb2951 bool
	var yyhl2951 bool = l >= 0
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2954 := &x.ObjectMeta
		yyv2954.CodecDecodeSelf(d)
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2955 := &x.InvolvedObject
		yyv2955.CodecDecodeSelf(d)
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2958 := &x.Source
		yyv2958.CodecDecodeSelf(d)
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2959 := &x.FirstTimestamp
		yym2960 := z.DecBinary()
		_ = yym2960
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2959) {
		} else if yym2960 {
			z.DecBinaryUnmarshal(yyv2959)
		} else if !yym2960 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2959)
		} else {
			z.DecFallback(yyv2959, false)
		}
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2961 := &x.LastTimestamp
		yym2962 := z.DecBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2961) {
		} else if yym2962 {
			z.DecBinaryUnmarshal(yyv2961)
		} else if !yym2962 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2961)
		} else {
			z.DecFallback(yyv2961, false)
		}
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2951++
		if yyhl2951 {
			yyb2951 = yyj2951 > l
		} else {
			yyb2951 = r.CheckBreak()
		}
		if yyb2951 {
			break
		}
		z.DecStructFieldNotFound(yyj2951-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2964 := z.EncBinary()
		_ = yym2964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2965 := !z.EncBinary()
			yy2arr2965 := z.EncBasicHandle().StructToArray
			var yyq2965 [4]bool
			_, _, _ = yysep2965, yyq2965, yy2arr2965
			const yyr2965 bool = false
			yyq2965[0] = x.Kind != ""
			yyq2965[1] = x.APIVersion != ""
			yyq2965[2] = true
			if yyr2965 || yy2arr2965 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2965 int = 1
				for _, b := range yyq2965 {
					if b {
						yynn2965++
					}
				}
				r.EncodeMapStart(yynn2965)
			}
			if yyr2965 || yy2arr2965 {
				if yyq2965[0] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2965[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2965 || yy2arr2965 {
				if yyq2965[1] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2965[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2965 || yy2arr2965 {
				if yyq2965[2] {
					yy2973 := &x.ListMeta
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2973) {
					} else {
						z.EncFallback(yy2973)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2965[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2975 := &x.ListMeta
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2975) {
					} else {
						z.EncFallback(yy2975)
					}
				}
			}
			if yyr2965 || yy2arr2965 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2965 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2980 := z.DecBinary()
	_ = yym2980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2981 := r.ReadMapStart()
			if yyl2981 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2981, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2981 := r.ReadArrayStart()
			if yyl2981 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2982Slc
	var yyhl2982 bool = l >= 0
	for yyj2982 := 0; ; yyj2982++ {
		if yyhl2982 {
			if yyj2982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2982Slc = r.DecodeBytes(yys2982Slc, true, true)
		yys2982 := string(yys2982Slc)
		switch yys2982 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2985 := &x.ListMeta
				yym2986 := z.DecBinary()
				_ = yym2986
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2985) {
				} else {
					z.DecFallback(yyv2985, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2987 := &x.Items
				yym2988 := z.DecBinary()
				_ = yym2988
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2987), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2982)
		} // end switch yys2982
	} // end for yyj2982
	if !yyhl2982 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2989 int
	var yyb2989 bool
	var yyhl2989 bool = l >= 0
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2992 := &x.ListMeta
		yym2993 := z.DecBinary()
		_ = yym2993
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2992) {
		} else {
			z.DecFallback(yyv2992, false)
		}
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2994 := &x.Items
		yym2995 := z.DecBinary()
		_ = yym2995
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2994), d)
		}
	}
	for {
		yyj2989++
		if yyhl2989 {
			yyb2989 = yyj2989 > l
		} else {
			yyb2989 = r.CheckBreak()
		}
		if yyb2989 {
			break
		}
		z.DecStructFieldNotFound(yyj2989-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2996 := z.EncBinary()
		_ = yym2996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2997 := !z.EncBinary()
			yy2arr2997 := z.EncBasicHandle().StructToArray
			var yyq2997 [4]bool
			_, _, _ = yysep2997, yyq2997, yy2arr2997
			const yyr2997 bool = false
			yyq2997[0] = x.Kind != ""
			yyq2997[1] = x.APIVersion != ""
			yyq2997[2] = true
			if yyr2997 || yy2arr2997 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2997 int = 1
				for _, b := range yyq2997 {
					if b {
						yynn2997++
					}
				}
				r.EncodeMapStart(yynn2997)
			}
			if yyr2997 || yy2arr2997 {
				if yyq2997[0] {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2997[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				if yyq2997[1] {
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2997[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3003 := z.EncBinary()
					_ = yym3003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				if yyq2997[2] {
					yy3005 := &x.ListMeta
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3005) {
					} else {
						z.EncFallback(yy3005)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2997[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3007 := &x.ListMeta
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3007) {
					} else {
						z.EncFallback(yy3007)
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2997 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3012 := z.DecBinary()
	_ = yym3012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3013 := r.ReadMapStart()
			if yyl3013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3013, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3013 := r.ReadArrayStart()
			if yyl3013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3014Slc
	var yyhl3014 bool = l >= 0
	for yyj3014 := 0; ; yyj3014++ {
		if yyhl3014 {
			if yyj3014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3014Slc = r.DecodeBytes(yys3014Slc, true, true)
		yys3014 := string(yys3014Slc)
		switch yys3014 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3017 := &x.ListMeta
				yym3018 := z.DecBinary()
				_ = yym3018
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3017) {
				} else {
					z.DecFallback(yyv3017, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3019 := &x.Items
				yym3020 := z.DecBinary()
				_ = yym3020
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3019), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3014)
		} // end switch yys3014
	} // end for yyj3014
	if !yyhl3014 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3021 int
	var yyb3021 bool
	var yyhl3021 bool = l >= 0
	yyj3021++
	if yyhl3021 {
		yyb3021 = yyj3021 > l
	} else {
		yyb3021 = r.CheckBreak()
	}
	if yyb3021 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3021++
	if yyhl3021 {
		yyb3021 = yyj3021 > l
	} else {
		yyb3021 = r.CheckBreak()
	}
	if yyb3021 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3021++
	if yyhl3021 {
		yyb3021 = yyj3021 > l
	} else {
		yyb3021 = r.CheckBreak()
	}
	if yyb3021 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3024 := &x.ListMeta
		yym3025 := z.DecBinary()
		_ = yym3025
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3024) {
		} else {
			z.DecFallback(yyv3024, false)
		}
	}
	yyj3021++
	if yyhl3021 {
		yyb3021 = yyj3021 > l
	} else {
		yyb3021 = r.CheckBreak()
	}
	if yyb3021 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3026 := &x.Items
		yym3027 := z.DecBinary()
		_ = yym3027
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3026), d)
		}
	}
	for {
		yyj3021++
		if yyhl3021 {
			yyb3021 = yyj3021 > l
		} else {
			yyb3021 = r.CheckBreak()
		}
		if yyb3021 {
			break
		}
		z.DecStructFieldNotFound(yyj3021-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3028 := z.EncBinary()
	_ = yym3028
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3029 := z.DecBinary()
	_ = yym3029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3030 := z.EncBinary()
		_ = yym3030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3031 := !z.EncBinary()
			yy2arr3031 := z.EncBasicHandle().StructToArray
			var yyq3031 [6]bool
			_, _, _ = yysep3031, yyq3031, yy2arr3031
			const yyr3031 bool = false
			yyq3031[0] = x.Type != ""
			yyq3031[1] = len(x.Max) != 0
			yyq3031[2] = len(x.Min) != 0
			yyq3031[3] = len(x.Default) != 0
			yyq3031[4] = len(x.DefaultRequest) != 0
			yyq3031[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3031 || yy2arr3031 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3031 int = 0
				for _, b := range yyq3031 {
					if b {
						yynn3031++
					}
				}
				r.EncodeMapStart(yynn3031)
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3031[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3031[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3031[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3031[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3031[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3031 || yy2arr3031 {
				if yyq3031[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3031[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3031 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3038 := z.DecBinary()
	_ = yym3038
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3039 := r.ReadMapStart()
			if yyl3039 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3039, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3039 := r.ReadArrayStart()
			if yyl3039 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3039, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3040Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3040Slc
	var yyhl3040 bool = l >= 0
	for yyj3040 := 0; ; yyj3040++ {
		if yyhl3040 {
			if yyj3040 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3040Slc = r.DecodeBytes(yys3040Slc, true, true)
		yys3040 := string(yys3040Slc)
		switch yys3040 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3042 := &x.Max
				yyv3042.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3043 := &x.Min
				yyv3043.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3044 := &x.Default
				yyv3044.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3045 := &x.DefaultRequest
				yyv3045.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3046 := &x.MaxLimitRequestRatio
				yyv3046.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3040)
		} // end switch yys3040
	} // end for yyj3040
	if !yyhl3040 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3047 int
	var yyb3047 bool
	var yyhl3047 bool = l >= 0
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3049 := &x.Max
		yyv3049.CodecDecodeSelf(d)
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3050 := &x.Min
		yyv3050.CodecDecodeSelf(d)
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3051 := &x.Default
		yyv3051.CodecDecodeSelf(d)
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3052 := &x.DefaultRequest
		yyv3052.CodecDecodeSelf(d)
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3053 := &x.MaxLimitRequestRatio
		yyv3053.CodecDecodeSelf(d)
	}
	for {
		yyj3047++
		if yyhl3047 {
			yyb3047 = yyj3047 > l
		} else {
			yyb3047 = r.CheckBreak()
		}
		if yyb3047 {
			break
		}
		z.DecStructFieldNotFound(yyj3047-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3054 := z.EncBinary()
		_ = yym3054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3055 := !z.EncBinary()
			yy2arr3055 := z.EncBasicHandle().StructToArray
			var yyq3055 [1]bool
			_, _, _ = yysep3055, yyq3055, yy2arr3055
			const yyr3055 bool = false
			if yyr3055 || yy2arr3055 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3055 int = 1
				for _, b := range yyq3055 {
					if b {
						yynn3055++
					}
				}
				r.EncodeMapStart(yynn3055)
			}
			if yyr3055 || yy2arr3055 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3055 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3059 := z.DecBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3060 := r.ReadMapStart()
			if yyl3060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3060, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3060 := r.ReadArrayStart()
			if yyl3060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3061Slc
	var yyhl3061 bool = l >= 0
	for yyj3061 := 0; ; yyj3061++ {
		if yyhl3061 {
			if yyj3061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3061Slc = r.DecodeBytes(yys3061Slc, true, true)
		yys3061 := string(yys3061Slc)
		switch yys3061 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3062 := &x.Limits
				yym3063 := z.DecBinary()
				_ = yym3063
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3062), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3061)
		} // end switch yys3061
	} // end for yyj3061
	if !yyhl3061 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3064 int
	var yyb3064 bool
	var yyhl3064 bool = l >= 0
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3065 := &x.Limits
		yym3066 := z.DecBinary()
		_ = yym3066
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3065), d)
		}
	}
	for {
		yyj3064++
		if yyhl3064 {
			yyb3064 = yyj3064 > l
		} else {
			yyb3064 = r.CheckBreak()
		}
		if yyb3064 {
			break
		}
		z.DecStructFieldNotFound(yyj3064-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3067 := z.EncBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3068 := !z.EncBinary()
			yy2arr3068 := z.EncBasicHandle().StructToArray
			var yyq3068 [4]bool
			_, _, _ = yysep3068, yyq3068, yy2arr3068
			const yyr3068 bool = false
			yyq3068[0] = x.Kind != ""
			yyq3068[1] = x.APIVersion != ""
			yyq3068[2] = true
			yyq3068[3] = true
			if yyr3068 || yy2arr3068 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3068 int = 0
				for _, b := range yyq3068 {
					if b {
						yynn3068++
					}
				}
				r.EncodeMapStart(yynn3068)
			}
			if yyr3068 || yy2arr3068 {
				if yyq3068[0] {
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3068[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3068 || yy2arr3068 {
				if yyq3068[1] {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3068[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3068 || yy2arr3068 {
				if yyq3068[2] {
					yy3076 := &x.ObjectMeta
					yy3076.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3077 := &x.ObjectMeta
					yy3077.CodecEncodeSelf(e)
				}
			}
			if yyr3068 || yy2arr3068 {
				if yyq3068[3] {
					yy3079 := &x.Spec
					yy3079.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3080 := &x.Spec
					yy3080.CodecEncodeSelf(e)
				}
			}
			if yysep3068 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3081 := z.DecBinary()
	_ = yym3081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3082 := r.ReadMapStart()
			if yyl3082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3082, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3082 := r.ReadArrayStart()
			if yyl3082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3083Slc
	var yyhl3083 bool = l >= 0
	for yyj3083 := 0; ; yyj3083++ {
		if yyhl3083 {
			if yyj3083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3083Slc = r.DecodeBytes(yys3083Slc, true, true)
		yys3083 := string(yys3083Slc)
		switch yys3083 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3086 := &x.ObjectMeta
				yyv3086.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3087 := &x.Spec
				yyv3087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3083)
		} // end switch yys3083
	} // end for yyj3083
	if !yyhl3083 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3091 := &x.ObjectMeta
		yyv3091.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3092 := &x.Spec
		yyv3092.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3093 := z.EncBinary()
		_ = yym3093
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3094 := !z.EncBinary()
			yy2arr3094 := z.EncBasicHandle().StructToArray
			var yyq3094 [4]bool
			_, _, _ = yysep3094, yyq3094, yy2arr3094
			const yyr3094 bool = false
			yyq3094[0] = x.Kind != ""
			yyq3094[1] = x.APIVersion != ""
			yyq3094[2] = true
			if yyr3094 || yy2arr3094 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3094 int = 1
				for _, b := range yyq3094 {
					if b {
						yynn3094++
					}
				}
				r.EncodeMapStart(yynn3094)
			}
			if yyr3094 || yy2arr3094 {
				if yyq3094[0] {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3094[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				if yyq3094[1] {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3094[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				if yyq3094[2] {
					yy3102 := &x.ListMeta
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3102) {
					} else {
						z.EncFallback(yy3102)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3094[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3104 := &x.ListMeta
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3104) {
					} else {
						z.EncFallback(yy3104)
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3094 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3110 := r.ReadMapStart()
			if yyl3110 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3110, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3110 := r.ReadArrayStart()
			if yyl3110 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3111Slc
	var yyhl3111 bool = l >= 0
	for yyj3111 := 0; ; yyj3111++ {
		if yyhl3111 {
			if yyj3111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3111Slc = r.DecodeBytes(yys3111Slc, true, true)
		yys3111 := string(yys3111Slc)
		switch yys3111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3114 := &x.ListMeta
				yym3115 := z.DecBinary()
				_ = yym3115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3114) {
				} else {
					z.DecFallback(yyv3114, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3116 := &x.Items
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3116), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3111)
		} // end switch yys3111
	} // end for yyj3111
	if !yyhl3111 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3118 int
	var yyb3118 bool
	var yyhl3118 bool = l >= 0
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3121 := &x.ListMeta
		yym3122 := z.DecBinary()
		_ = yym3122
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3121) {
		} else {
			z.DecFallback(yyv3121, false)
		}
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3123 := &x.Items
		yym3124 := z.DecBinary()
		_ = yym3124
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3123), d)
		}
	}
	for {
		yyj3118++
		if yyhl3118 {
			yyb3118 = yyj3118 > l
		} else {
			yyb3118 = r.CheckBreak()
		}
		if yyb3118 {
			break
		}
		z.DecStructFieldNotFound(yyj3118-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3125 := z.EncBinary()
		_ = yym3125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3126 := !z.EncBinary()
			yy2arr3126 := z.EncBasicHandle().StructToArray
			var yyq3126 [1]bool
			_, _, _ = yysep3126, yyq3126, yy2arr3126
			const yyr3126 bool = false
			yyq3126[0] = len(x.Hard) != 0
			if yyr3126 || yy2arr3126 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3126 int = 0
				for _, b := range yyq3126 {
					if b {
						yynn3126++
					}
				}
				r.EncodeMapStart(yynn3126)
			}
			if yyr3126 || yy2arr3126 {
				if yyq3126[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3126[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3126 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3128 := z.DecBinary()
	_ = yym3128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3129 := r.ReadMapStart()
			if yyl3129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3129, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3129 := r.ReadArrayStart()
			if yyl3129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3130Slc
	var yyhl3130 bool = l >= 0
	for yyj3130 := 0; ; yyj3130++ {
		if yyhl3130 {
			if yyj3130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3130Slc = r.DecodeBytes(yys3130Slc, true, true)
		yys3130 := string(yys3130Slc)
		switch yys3130 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3131 := &x.Hard
				yyv3131.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3130)
		} // end switch yys3130
	} // end for yyj3130
	if !yyhl3130 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3132 int
	var yyb3132 bool
	var yyhl3132 bool = l >= 0
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3133 := &x.Hard
		yyv3133.CodecDecodeSelf(d)
	}
	for {
		yyj3132++
		if yyhl3132 {
			yyb3132 = yyj3132 > l
		} else {
			yyb3132 = r.CheckBreak()
		}
		if yyb3132 {
			break
		}
		z.DecStructFieldNotFound(yyj3132-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3134 := z.EncBinary()
		_ = yym3134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3135 := !z.EncBinary()
			yy2arr3135 := z.EncBasicHandle().StructToArray
			var yyq3135 [2]bool
			_, _, _ = yysep3135, yyq3135, yy2arr3135
			const yyr3135 bool = false
			yyq3135[0] = len(x.Hard) != 0
			yyq3135[1] = len(x.Used) != 0
			if yyr3135 || yy2arr3135 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3135 int = 0
				for _, b := range yyq3135 {
					if b {
						yynn3135++
					}
				}
				r.EncodeMapStart(yynn3135)
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3135 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3138 := z.DecBinary()
	_ = yym3138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3139 := r.ReadMapStart()
			if yyl3139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3139, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3139 := r.ReadArrayStart()
			if yyl3139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3140Slc
	var yyhl3140 bool = l >= 0
	for yyj3140 := 0; ; yyj3140++ {
		if yyhl3140 {
			if yyj3140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3140Slc = r.DecodeBytes(yys3140Slc, true, true)
		yys3140 := string(yys3140Slc)
		switch yys3140 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3141 := &x.Hard
				yyv3141.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3142 := &x.Used
				yyv3142.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3140)
		} // end switch yys3140
	} // end for yyj3140
	if !yyhl3140 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3143 int
	var yyb3143 bool
	var yyhl3143 bool = l >= 0
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3144 := &x.Hard
		yyv3144.CodecDecodeSelf(d)
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3145 := &x.Used
		yyv3145.CodecDecodeSelf(d)
	}
	for {
		yyj3143++
		if yyhl3143 {
			yyb3143 = yyj3143 > l
		} else {
			yyb3143 = r.CheckBreak()
		}
		if yyb3143 {
			break
		}
		z.DecStructFieldNotFound(yyj3143-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3146 := z.EncBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3147 := !z.EncBinary()
			yy2arr3147 := z.EncBasicHandle().StructToArray
			var yyq3147 [5]bool
			_, _, _ = yysep3147, yyq3147, yy2arr3147
			const yyr3147 bool = false
			yyq3147[0] = x.Kind != ""
			yyq3147[1] = x.APIVersion != ""
			yyq3147[2] = true
			yyq3147[3] = true
			yyq3147[4] = true
			if yyr3147 || yy2arr3147 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3147 int = 0
				for _, b := range yyq3147 {
					if b {
						yynn3147++
					}
				}
				r.EncodeMapStart(yynn3147)
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[0] {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[1] {
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[2] {
					yy3155 := &x.ObjectMeta
					yy3155.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3156 := &x.ObjectMeta
					yy3156.CodecEncodeSelf(e)
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[3] {
					yy3158 := &x.Spec
					yy3158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3159 := &x.Spec
					yy3159.CodecEncodeSelf(e)
				}
			}
			if yyr3147 || yy2arr3147 {
				if yyq3147[4] {
					yy3161 := &x.Status
					yy3161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3162 := &x.Status
					yy3162.CodecEncodeSelf(e)
				}
			}
			if yysep3147 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3163 := z.DecBinary()
	_ = yym3163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3164 := r.ReadMapStart()
			if yyl3164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3164, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3164 := r.ReadArrayStart()
			if yyl3164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3165Slc
	var yyhl3165 bool = l >= 0
	for yyj3165 := 0; ; yyj3165++ {
		if yyhl3165 {
			if yyj3165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3165Slc = r.DecodeBytes(yys3165Slc, true, true)
		yys3165 := string(yys3165Slc)
		switch yys3165 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3168 := &x.ObjectMeta
				yyv3168.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3169 := &x.Spec
				yyv3169.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3170 := &x.Status
				yyv3170.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3165)
		} // end switch yys3165
	} // end for yyj3165
	if !yyhl3165 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3171 int
	var yyb3171 bool
	var yyhl3171 bool = l >= 0
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3174 := &x.ObjectMeta
		yyv3174.CodecDecodeSelf(d)
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3175 := &x.Spec
		yyv3175.CodecDecodeSelf(d)
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3176 := &x.Status
		yyv3176.CodecDecodeSelf(d)
	}
	for {
		yyj3171++
		if yyhl3171 {
			yyb3171 = yyj3171 > l
		} else {
			yyb3171 = r.CheckBreak()
		}
		if yyb3171 {
			break
		}
		z.DecStructFieldNotFound(yyj3171-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3177 := z.EncBinary()
		_ = yym3177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3178 := !z.EncBinary()
			yy2arr3178 := z.EncBasicHandle().StructToArray
			var yyq3178 [4]bool
			_, _, _ = yysep3178, yyq3178, yy2arr3178
			const yyr3178 bool = false
			yyq3178[0] = x.Kind != ""
			yyq3178[1] = x.APIVersion != ""
			yyq3178[2] = true
			if yyr3178 || yy2arr3178 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3178 int = 1
				for _, b := range yyq3178 {
					if b {
						yynn3178++
					}
				}
				r.EncodeMapStart(yynn3178)
			}
			if yyr3178 || yy2arr3178 {
				if yyq3178[0] {
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3178[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				if yyq3178[1] {
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3178[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				if yyq3178[2] {
					yy3186 := &x.ListMeta
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3186) {
					} else {
						z.EncFallback(yy3186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3178[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3188 := &x.ListMeta
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3188) {
					} else {
						z.EncFallback(yy3188)
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3192 := z.EncBinary()
					_ = yym3192
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3178 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3193 := z.DecBinary()
	_ = yym3193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3194 := r.ReadMapStart()
			if yyl3194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3194, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3194 := r.ReadArrayStart()
			if yyl3194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3195Slc
	var yyhl3195 bool = l >= 0
	for yyj3195 := 0; ; yyj3195++ {
		if yyhl3195 {
			if yyj3195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3195Slc = r.DecodeBytes(yys3195Slc, true, true)
		yys3195 := string(yys3195Slc)
		switch yys3195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3198 := &x.ListMeta
				yym3199 := z.DecBinary()
				_ = yym3199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3198) {
				} else {
					z.DecFallback(yyv3198, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3200 := &x.Items
				yym3201 := z.DecBinary()
				_ = yym3201
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3200), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3195)
		} // end switch yys3195
	} // end for yyj3195
	if !yyhl3195 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3202 int
	var yyb3202 bool
	var yyhl3202 bool = l >= 0
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3205 := &x.ListMeta
		yym3206 := z.DecBinary()
		_ = yym3206
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3205) {
		} else {
			z.DecFallback(yyv3205, false)
		}
	}
	yyj3202++
	if yyhl3202 {
		yyb3202 = yyj3202 > l
	} else {
		yyb3202 = r.CheckBreak()
	}
	if yyb3202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3207 := &x.Items
		yym3208 := z.DecBinary()
		_ = yym3208
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3207), d)
		}
	}
	for {
		yyj3202++
		if yyhl3202 {
			yyb3202 = yyj3202 > l
		} else {
			yyb3202 = r.CheckBreak()
		}
		if yyb3202 {
			break
		}
		z.DecStructFieldNotFound(yyj3202-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3209 := z.EncBinary()
		_ = yym3209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3210 := !z.EncBinary()
			yy2arr3210 := z.EncBasicHandle().StructToArray
			var yyq3210 [5]bool
			_, _, _ = yysep3210, yyq3210, yy2arr3210
			const yyr3210 bool = false
			yyq3210[0] = x.Kind != ""
			yyq3210[1] = x.APIVersion != ""
			yyq3210[2] = true
			yyq3210[3] = len(x.Data) != 0
			yyq3210[4] = x.Type != ""
			if yyr3210 || yy2arr3210 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3210 int = 0
				for _, b := range yyq3210 {
					if b {
						yynn3210++
					}
				}
				r.EncodeMapStart(yynn3210)
			}
			if yyr3210 || yy2arr3210 {
				if yyq3210[0] {
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3210[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3210 || yy2arr3210 {
				if yyq3210[1] {
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3210[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3210 || yy2arr3210 {
				if yyq3210[2] {
					yy3218 := &x.ObjectMeta
					yy3218.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3210[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3219 := &x.ObjectMeta
					yy3219.CodecEncodeSelf(e)
				}
			}
			if yyr3210 || yy2arr3210 {
				if yyq3210[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3221 := z.EncBinary()
						_ = yym3221
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3210[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3222 := z.EncBinary()
						_ = yym3222
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3210 || yy2arr3210 {
				if yyq3210[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3210[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3210 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3224 := z.DecBinary()
	_ = yym3224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3225 := r.ReadMapStart()
			if yyl3225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3225, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3225 := r.ReadArrayStart()
			if yyl3225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3226Slc
	var yyhl3226 bool = l >= 0
	for yyj3226 := 0; ; yyj3226++ {
		if yyhl3226 {
			if yyj3226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3226Slc = r.DecodeBytes(yys3226Slc, true, true)
		yys3226 := string(yys3226Slc)
		switch yys3226 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3229 := &x.ObjectMeta
				yyv3229.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3230 := &x.Data
				yym3231 := z.DecBinary()
				_ = yym3231
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3230), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3226)
		} // end switch yys3226
	} // end for yyj3226
	if !yyhl3226 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3233 int
	var yyb3233 bool
	var yyhl3233 bool = l >= 0
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3236 := &x.ObjectMeta
		yyv3236.CodecDecodeSelf(d)
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3237 := &x.Data
		yym3238 := z.DecBinary()
		_ = yym3238
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3237), d)
		}
	}
	yyj3233++
	if yyhl3233 {
		yyb3233 = yyj3233 > l
	} else {
		yyb3233 = r.CheckBreak()
	}
	if yyb3233 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3233++
		if yyhl3233 {
			yyb3233 = yyj3233 > l
		} else {
			yyb3233 = r.CheckBreak()
		}
		if yyb3233 {
			break
		}
		z.DecStructFieldNotFound(yyj3233-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3240 := z.EncBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3241 := z.DecBinary()
	_ = yym3241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3242 := z.EncBinary()
		_ = yym3242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3243 := !z.EncBinary()
			yy2arr3243 := z.EncBasicHandle().StructToArray
			var yyq3243 [4]bool
			_, _, _ = yysep3243, yyq3243, yy2arr3243
			const yyr3243 bool = false
			yyq3243[0] = x.Kind != ""
			yyq3243[1] = x.APIVersion != ""
			yyq3243[2] = true
			if yyr3243 || yy2arr3243 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3243 int = 1
				for _, b := range yyq3243 {
					if b {
						yynn3243++
					}
				}
				r.EncodeMapStart(yynn3243)
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[0] {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3243[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[1] {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3243[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if yyq3243[2] {
					yy3251 := &x.ListMeta
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3251) {
					} else {
						z.EncFallback(yy3251)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3253 := &x.ListMeta
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3253) {
					} else {
						z.EncFallback(yy3253)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3243 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3258 := z.DecBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3259 := r.ReadMapStart()
			if yyl3259 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3259, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3259 := r.ReadArrayStart()
			if yyl3259 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3260Slc
	var yyhl3260 bool = l >= 0
	for yyj3260 := 0; ; yyj3260++ {
		if yyhl3260 {
			if yyj3260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3260Slc = r.DecodeBytes(yys3260Slc, true, true)
		yys3260 := string(yys3260Slc)
		switch yys3260 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3263 := &x.ListMeta
				yym3264 := z.DecBinary()
				_ = yym3264
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3263) {
				} else {
					z.DecFallback(yyv3263, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3265 := &x.Items
				yym3266 := z.DecBinary()
				_ = yym3266
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3265), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3260)
		} // end switch yys3260
	} // end for yyj3260
	if !yyhl3260 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3267 int
	var yyb3267 bool
	var yyhl3267 bool = l >= 0
	yyj3267++
	if yyhl3267 {
		yyb3267 = yyj3267 > l
	} else {
		yyb3267 = r.CheckBreak()
	}
	if yyb3267 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3267++
	if yyhl3267 {
		yyb3267 = yyj3267 > l
	} else {
		yyb3267 = r.CheckBreak()
	}
	if yyb3267 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3267++
	if yyhl3267 {
		yyb3267 = yyj3267 > l
	} else {
		yyb3267 = r.CheckBreak()
	}
	if yyb3267 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3270 := &x.ListMeta
		yym3271 := z.DecBinary()
		_ = yym3271
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3270) {
		} else {
			z.DecFallback(yyv3270, false)
		}
	}
	yyj3267++
	if yyhl3267 {
		yyb3267 = yyj3267 > l
	} else {
		yyb3267 = r.CheckBreak()
	}
	if yyb3267 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3272 := &x.Items
		yym3273 := z.DecBinary()
		_ = yym3273
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3272), d)
		}
	}
	for {
		yyj3267++
		if yyhl3267 {
			yyb3267 = yyj3267 > l
		} else {
			yyb3267 = r.CheckBreak()
		}
		if yyb3267 {
			break
		}
		z.DecStructFieldNotFound(yyj3267-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3274 := z.EncBinary()
	_ = yym3274
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3275 := z.DecBinary()
	_ = yym3275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [4]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			yyq3277[2] = x.Message != ""
			yyq3277[3] = x.Error != ""
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3277 int = 2
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
			}
			if yyr3277 || yy2arr3277 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3277 || yy2arr3277 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3277 || yy2arr3277 {
				if yyq3277[2] {
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				if yyq3277[3] {
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3277 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3286 := z.DecBinary()
	_ = yym3286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3287 := r.ReadMapStart()
			if yyl3287 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3287, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3287 := r.ReadArrayStart()
			if yyl3287 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3288Slc
	var yyhl3288 bool = l >= 0
	for yyj3288 := 0; ; yyj3288++ {
		if yyhl3288 {
			if yyj3288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3288Slc = r.DecodeBytes(yys3288Slc, true, true)
		yys3288 := string(yys3288Slc)
		switch yys3288 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3288)
		} // end switch yys3288
	} // end for yyj3288
	if !yyhl3288 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3293 int
	var yyb3293 bool
	var yyhl3293 bool = l >= 0
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3293++
		if yyhl3293 {
			yyb3293 = yyj3293 > l
		} else {
			yyb3293 = r.CheckBreak()
		}
		if yyb3293 {
			break
		}
		z.DecStructFieldNotFound(yyj3293-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3298 := z.EncBinary()
		_ = yym3298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3299 := !z.EncBinary()
			yy2arr3299 := z.EncBasicHandle().StructToArray
			var yyq3299 [4]bool
			_, _, _ = yysep3299, yyq3299, yy2arr3299
			const yyr3299 bool = false
			yyq3299[0] = x.Kind != ""
			yyq3299[1] = x.APIVersion != ""
			yyq3299[2] = true
			yyq3299[3] = len(x.Conditions) != 0
			if yyr3299 || yy2arr3299 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3299 int = 0
				for _, b := range yyq3299 {
					if b {
						yynn3299++
					}
				}
				r.EncodeMapStart(yynn3299)
			}
			if yyr3299 || yy2arr3299 {
				if yyq3299[0] {
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				if yyq3299[1] {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				if yyq3299[2] {
					yy3307 := &x.ObjectMeta
					yy3307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3299[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3308 := &x.ObjectMeta
					yy3308.CodecEncodeSelf(e)
				}
			}
			if yyr3299 || yy2arr3299 {
				if yyq3299[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3310 := z.EncBinary()
						_ = yym3310
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3299[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3311 := z.EncBinary()
						_ = yym3311
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3299 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3312 := z.DecBinary()
	_ = yym3312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3313 := r.ReadMapStart()
			if yyl3313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3313, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3313 := r.ReadArrayStart()
			if yyl3313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3314Slc
	var yyhl3314 bool = l >= 0
	for yyj3314 := 0; ; yyj3314++ {
		if yyhl3314 {
			if yyj3314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3314Slc = r.DecodeBytes(yys3314Slc, true, true)
		yys3314 := string(yys3314Slc)
		switch yys3314 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3317 := &x.ObjectMeta
				yyv3317.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3318 := &x.Conditions
				yym3319 := z.DecBinary()
				_ = yym3319
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3318), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3314)
		} // end switch yys3314
	} // end for yyj3314
	if !yyhl3314 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3320 int
	var yyb3320 bool
	var yyhl3320 bool = l >= 0
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3323 := &x.ObjectMeta
		yyv3323.CodecDecodeSelf(d)
	}
	yyj3320++
	if yyhl3320 {
		yyb3320 = yyj3320 > l
	} else {
		yyb3320 = r.CheckBreak()
	}
	if yyb3320 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3324 := &x.Conditions
		yym3325 := z.DecBinary()
		_ = yym3325
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3324), d)
		}
	}
	for {
		yyj3320++
		if yyhl3320 {
			yyb3320 = yyj3320 > l
		} else {
			yyb3320 = r.CheckBreak()
		}
		if yyb3320 {
			break
		}
		z.DecStructFieldNotFound(yyj3320-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3326 := z.EncBinary()
		_ = yym3326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3327 := !z.EncBinary()
			yy2arr3327 := z.EncBasicHandle().StructToArray
			var yyq3327 [4]bool
			_, _, _ = yysep3327, yyq3327, yy2arr3327
			const yyr3327 bool = false
			yyq3327[0] = x.Kind != ""
			yyq3327[1] = x.APIVersion != ""
			yyq3327[2] = true
			if yyr3327 || yy2arr3327 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3327 int = 1
				for _, b := range yyq3327 {
					if b {
						yynn3327++
					}
				}
				r.EncodeMapStart(yynn3327)
			}
			if yyr3327 || yy2arr3327 {
				if yyq3327[0] {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3327[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3327 || yy2arr3327 {
				if yyq3327[1] {
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3327[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3327 || yy2arr3327 {
				if yyq3327[2] {
					yy3335 := &x.ListMeta
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3335) {
					} else {
						z.EncFallback(yy3335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3327[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3337 := &x.ListMeta
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3337) {
					} else {
						z.EncFallback(yy3337)
					}
				}
			}
			if yyr3327 || yy2arr3327 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3341 := z.EncBinary()
					_ = yym3341
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3327 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3342 := z.DecBinary()
	_ = yym3342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3343 := r.ReadMapStart()
			if yyl3343 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3343, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3343 := r.ReadArrayStart()
			if yyl3343 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3344Slc
	var yyhl3344 bool = l >= 0
	for yyj3344 := 0; ; yyj3344++ {
		if yyhl3344 {
			if yyj3344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3344Slc = r.DecodeBytes(yys3344Slc, true, true)
		yys3344 := string(yys3344Slc)
		switch yys3344 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3347 := &x.ListMeta
				yym3348 := z.DecBinary()
				_ = yym3348
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3347) {
				} else {
					z.DecFallback(yyv3347, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3349 := &x.Items
				yym3350 := z.DecBinary()
				_ = yym3350
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3349), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3344)
		} // end switch yys3344
	} // end for yyj3344
	if !yyhl3344 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3351 int
	var yyb3351 bool
	var yyhl3351 bool = l >= 0
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3354 := &x.ListMeta
		yym3355 := z.DecBinary()
		_ = yym3355
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3354) {
		} else {
			z.DecFallback(yyv3354, false)
		}
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3356 := &x.Items
		yym3357 := z.DecBinary()
		_ = yym3357
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3356), d)
		}
	}
	for {
		yyj3351++
		if yyhl3351 {
			yyb3351 = yyj3351 > l
		} else {
			yyb3351 = r.CheckBreak()
		}
		if yyb3351 {
			break
		}
		z.DecStructFieldNotFound(yyj3351-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3358 := z.EncBinary()
		_ = yym3358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3359 := !z.EncBinary()
			yy2arr3359 := z.EncBasicHandle().StructToArray
			var yyq3359 [1]bool
			_, _, _ = yysep3359, yyq3359, yy2arr3359
			const yyr3359 bool = false
			yyq3359[0] = len(x.Items) != 0
			if yyr3359 || yy2arr3359 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3359 int = 0
				for _, b := range yyq3359 {
					if b {
						yynn3359++
					}
				}
				r.EncodeMapStart(yynn3359)
			}
			if yyr3359 || yy2arr3359 {
				if yyq3359[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3361 := z.EncBinary()
						_ = yym3361
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3359[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3362 := z.EncBinary()
						_ = yym3362
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3359 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3363 := z.DecBinary()
	_ = yym3363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3364 := r.ReadMapStart()
			if yyl3364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3364, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3364 := r.ReadArrayStart()
			if yyl3364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3365Slc
	var yyhl3365 bool = l >= 0
	for yyj3365 := 0; ; yyj3365++ {
		if yyhl3365 {
			if yyj3365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3365Slc = r.DecodeBytes(yys3365Slc, true, true)
		yys3365 := string(yys3365Slc)
		switch yys3365 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3366 := &x.Items
				yym3367 := z.DecBinary()
				_ = yym3367
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3366), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3365)
		} // end switch yys3365
	} // end for yyj3365
	if !yyhl3365 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3368 int
	var yyb3368 bool
	var yyhl3368 bool = l >= 0
	yyj3368++
	if yyhl3368 {
		yyb3368 = yyj3368 > l
	} else {
		yyb3368 = r.CheckBreak()
	}
	if yyb3368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3369 := &x.Items
		yym3370 := z.DecBinary()
		_ = yym3370
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3369), d)
		}
	}
	for {
		yyj3368++
		if yyhl3368 {
			yyb3368 = yyj3368 > l
		} else {
			yyb3368 = r.CheckBreak()
		}
		if yyb3368 {
			break
		}
		z.DecStructFieldNotFound(yyj3368-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3371 := z.EncBinary()
		_ = yym3371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3372 := !z.EncBinary()
			yy2arr3372 := z.EncBasicHandle().StructToArray
			var yyq3372 [2]bool
			_, _, _ = yysep3372, yyq3372, yy2arr3372
			const yyr3372 bool = false
			if yyr3372 || yy2arr3372 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3372 int = 2
				for _, b := range yyq3372 {
					if b {
						yynn3372++
					}
				}
				r.EncodeMapStart(yynn3372)
			}
			if yyr3372 || yy2arr3372 {
				yym3374 := z.EncBinary()
				_ = yym3374
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3375 := z.EncBinary()
				_ = yym3375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3372 || yy2arr3372 {
				yy3377 := &x.FieldRef
				yy3377.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3378 := &x.FieldRef
				yy3378.CodecEncodeSelf(e)
			}
			if yysep3372 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3379 := z.DecBinary()
	_ = yym3379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3380 := r.ReadMapStart()
			if yyl3380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3380, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3380 := r.ReadArrayStart()
			if yyl3380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3381Slc
	var yyhl3381 bool = l >= 0
	for yyj3381 := 0; ; yyj3381++ {
		if yyhl3381 {
			if yyj3381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3381Slc = r.DecodeBytes(yys3381Slc, true, true)
		yys3381 := string(yys3381Slc)
		switch yys3381 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3383 := &x.FieldRef
				yyv3383.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3381)
		} // end switch yys3381
	} // end for yyj3381
	if !yyhl3381 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3384 int
	var yyb3384 bool
	var yyhl3384 bool = l >= 0
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3386 := &x.FieldRef
		yyv3386.CodecDecodeSelf(d)
	}
	for {
		yyj3384++
		if yyhl3384 {
			yyb3384 = yyj3384 > l
		} else {
			yyb3384 = r.CheckBreak()
		}
		if yyb3384 {
			break
		}
		z.DecStructFieldNotFound(yyj3384-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3387 := z.EncBinary()
		_ = yym3387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3388 := !z.EncBinary()
			yy2arr3388 := z.EncBasicHandle().StructToArray
			var yyq3388 [5]bool
			_, _, _ = yysep3388, yyq3388, yy2arr3388
			const yyr3388 bool = false
			yyq3388[0] = x.Capabilities != nil
			yyq3388[1] = x.Privileged != nil
			yyq3388[2] = x.SELinuxOptions != nil
			yyq3388[3] = x.RunAsUser != nil
			yyq3388[4] = x.RunAsNonRoot != nil
			if yyr3388 || yy2arr3388 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3388 int = 0
				for _, b := range yyq3388 {
					if b {
						yynn3388++
					}
				}
				r.EncodeMapStart(yynn3388)
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3391 := *x.Privileged
						yym3392 := z.EncBinary()
						_ = yym3392
						if false {
						} else {
							r.EncodeBool(bool(yy3391))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3393 := *x.Privileged
						yym3394 := z.EncBinary()
						_ = yym3394
						if false {
						} else {
							r.EncodeBool(bool(yy3393))
						}
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3397 := *x.RunAsUser
						yym3398 := z.EncBinary()
						_ = yym3398
						if false {
						} else {
							r.EncodeInt(int64(yy3397))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3399 := *x.RunAsUser
						yym3400 := z.EncBinary()
						_ = yym3400
						if false {
						} else {
							r.EncodeInt(int64(yy3399))
						}
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3402 := *x.RunAsNonRoot
						yym3403 := z.EncBinary()
						_ = yym3403
						if false {
						} else {
							r.EncodeBool(bool(yy3402))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3404 := *x.RunAsNonRoot
						yym3405 := z.EncBinary()
						_ = yym3405
						if false {
						} else {
							r.EncodeBool(bool(yy3404))
						}
					}
				}
			}
			if yysep3388 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3406 := z.DecBinary()
	_ = yym3406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3407 := r.ReadMapStart()
			if yyl3407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3407, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3407 := r.ReadArrayStart()
			if yyl3407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3408Slc
	var yyhl3408 bool = l >= 0
	for yyj3408 := 0; ; yyj3408++ {
		if yyhl3408 {
			if yyj3408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3408Slc = r.DecodeBytes(yys3408Slc, true, true)
		yys3408 := string(yys3408Slc)
		switch yys3408 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3414 := z.DecBinary()
				_ = yym3414
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3408)
		} // end switch yys3408
	} // end for yyj3408
	if !yyhl3408 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3417 int
	var yyb3417 bool
	var yyhl3417 bool = l >= 0
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3420 := z.DecBinary()
		_ = yym3420
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3423 := z.DecBinary()
		_ = yym3423
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3425 := z.DecBinary()
		_ = yym3425
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3417++
		if yyhl3417 {
			yyb3417 = yyj3417 > l
		} else {
			yyb3417 = r.CheckBreak()
		}
		if yyb3417 {
			break
		}
		z.DecStructFieldNotFound(yyj3417-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3426 := z.EncBinary()
		_ = yym3426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3427 := !z.EncBinary()
			yy2arr3427 := z.EncBasicHandle().StructToArray
			var yyq3427 [4]bool
			_, _, _ = yysep3427, yyq3427, yy2arr3427
			const yyr3427 bool = false
			yyq3427[0] = x.User != ""
			yyq3427[1] = x.Role != ""
			yyq3427[2] = x.Type != ""
			yyq3427[3] = x.Level != ""
			if yyr3427 || yy2arr3427 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3427 int = 0
				for _, b := range yyq3427 {
					if b {
						yynn3427++
					}
				}
				r.EncodeMapStart(yynn3427)
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[0] {
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[1] {
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[2] {
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[3] {
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3427 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3440 := z.DecBinary()
	_ = yym3440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3441 := r.ReadMapStart()
			if yyl3441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3441, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3441 := r.ReadArrayStart()
			if yyl3441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3442Slc
	var yyhl3442 bool = l >= 0
	for yyj3442 := 0; ; yyj3442++ {
		if yyhl3442 {
			if yyj3442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3442Slc = r.DecodeBytes(yys3442Slc, true, true)
		yys3442 := string(yys3442Slc)
		switch yys3442 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3442)
		} // end switch yys3442
	} // end for yyj3442
	if !yyhl3442 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3447 int
	var yyb3447 bool
	var yyhl3447 bool = l >= 0
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3447++
		if yyhl3447 {
			yyb3447 = yyj3447 > l
		} else {
			yyb3447 = r.CheckBreak()
		}
		if yyb3447 {
			break
		}
		z.DecStructFieldNotFound(yyj3447-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3452 := z.EncBinary()
		_ = yym3452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3453 := !z.EncBinary()
			yy2arr3453 := z.EncBasicHandle().StructToArray
			var yyq3453 [5]bool
			_, _, _ = yysep3453, yyq3453, yy2arr3453
			const yyr3453 bool = false
			yyq3453[0] = x.Kind != ""
			yyq3453[1] = x.APIVersion != ""
			yyq3453[2] = true
			if yyr3453 || yy2arr3453 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3453 int = 2
				for _, b := range yyq3453 {
					if b {
						yynn3453++
					}
				}
				r.EncodeMapStart(yynn3453)
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[0] {
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3453[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[1] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3453[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[2] {
					yy3461 := &x.ObjectMeta
					yy3461.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3453[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3462 := &x.ObjectMeta
					yy3462.CodecEncodeSelf(e)
				}
			}
			if yyr3453 || yy2arr3453 {
				yym3464 := z.EncBinary()
				_ = yym3464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3465 := z.EncBinary()
				_ = yym3465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3453 || yy2arr3453 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3453 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3469 := z.DecBinary()
	_ = yym3469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3470 := r.ReadMapStart()
			if yyl3470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3470, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3470 := r.ReadArrayStart()
			if yyl3470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3471Slc
	var yyhl3471 bool = l >= 0
	for yyj3471 := 0; ; yyj3471++ {
		if yyhl3471 {
			if yyj3471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3471Slc = r.DecodeBytes(yys3471Slc, true, true)
		yys3471 := string(yys3471Slc)
		switch yys3471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3474 := &x.ObjectMeta
				yyv3474.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3476 := &x.Data
				yym3477 := z.DecBinary()
				_ = yym3477
				if false {
				} else {
					*yyv3476 = r.DecodeBytes(*(*[]byte)(yyv3476), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3471)
		} // end switch yys3471
	} // end for yyj3471
	if !yyhl3471 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3478 int
	var yyb3478 bool
	var yyhl3478 bool = l >= 0
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3481 := &x.ObjectMeta
		yyv3481.CodecDecodeSelf(d)
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3483 := &x.Data
		yym3484 := z.DecBinary()
		_ = yym3484
		if false {
		} else {
			*yyv3483 = r.DecodeBytes(*(*[]byte)(yyv3483), false, false)
		}
	}
	for {
		yyj3478++
		if yyhl3478 {
			yyb3478 = yyj3478 > l
		} else {
			yyb3478 = r.CheckBreak()
		}
		if yyb3478 {
			break
		}
		z.DecStructFieldNotFound(yyj3478-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3485 := range v {
		yyv3485.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3486 := *v
	yyh3486, yyl3486 := z.DecSliceHelperStart()

	var yyrr3486, yyrl3486 int
	var yyc3486, yyrt3486 bool
	_, _, _ = yyc3486, yyrt3486, yyrl3486
	yyrr3486 = yyl3486

	if yyv3486 == nil {
		if yyrl3486, yyrt3486 = z.DecInferLen(yyl3486, z.DecBasicHandle().MaxInitLen, 16); yyrt3486 {
			yyrr3486 = yyrl3486
		}
		yyv3486 = make([]PersistentVolumeAccessMode, yyrl3486)
		yyc3486 = true
	}

	if yyl3486 == 0 {
		if len(yyv3486) != 0 {
			yyv3486 = yyv3486[:0]
			yyc3486 = true
		}
	} else if yyl3486 > 0 {

		if yyl3486 > cap(yyv3486) {
			yyrl3486, yyrt3486 = z.DecInferLen(yyl3486, z.DecBasicHandle().MaxInitLen, 16)

			yyv23486 := yyv3486
			yyv3486 = make([]PersistentVolumeAccessMode, yyrl3486)
			if len(yyv3486) > 0 {
				copy(yyv3486, yyv23486[:cap(yyv23486)])
			}
			yyc3486 = true

			yyrr3486 = len(yyv3486)
		} else if yyl3486 != len(yyv3486) {
			yyv3486 = yyv3486[:yyl3486]
			yyc3486 = true
		}
		yyj3486 := 0
		for ; yyj3486 < yyrr3486; yyj3486++ {
			if r.TryDecodeAsNil() {
				yyv3486[yyj3486] = ""
			} else {
				yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3486 {
			for ; yyj3486 < yyl3486; yyj3486++ {
				yyv3486 = append(yyv3486, "")
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = ""
				} else {
					yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3486 := 0; !r.CheckBreak(); yyj3486++ {
			if yyj3486 >= len(yyv3486) {
				yyv3486 = append(yyv3486, "") // var yyz3486 PersistentVolumeAccessMode
				yyc3486 = true
			}

			if yyj3486 < len(yyv3486) {
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = ""
				} else {
					yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3486.End()
	}
	if yyc3486 {
		*v = yyv3486
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3490 := range v {
		yy3491 := &yyv3490
		yy3491.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3492 := *v
	yyh3492, yyl3492 := z.DecSliceHelperStart()

	var yyrr3492, yyrl3492 int
	var yyc3492, yyrt3492 bool
	_, _, _ = yyc3492, yyrt3492, yyrl3492
	yyrr3492 = yyl3492

	if yyv3492 == nil {
		if yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 384); yyrt3492 {
			yyrr3492 = yyrl3492
		}
		yyv3492 = make([]PersistentVolume, yyrl3492)
		yyc3492 = true
	}

	if yyl3492 == 0 {
		if len(yyv3492) != 0 {
			yyv3492 = yyv3492[:0]
			yyc3492 = true
		}
	} else if yyl3492 > 0 {

		if yyl3492 > cap(yyv3492) {
			yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 384)
			yyv3492 = make([]PersistentVolume, yyrl3492)
			yyc3492 = true

			yyrr3492 = len(yyv3492)
		} else if yyl3492 != len(yyv3492) {
			yyv3492 = yyv3492[:yyl3492]
			yyc3492 = true
		}
		yyj3492 := 0
		for ; yyj3492 < yyrr3492; yyj3492++ {
			if r.TryDecodeAsNil() {
				yyv3492[yyj3492] = PersistentVolume{}
			} else {
				yyv3493 := &yyv3492[yyj3492]
				yyv3493.CodecDecodeSelf(d)
			}

		}
		if yyrt3492 {
			for ; yyj3492 < yyl3492; yyj3492++ {
				yyv3492 = append(yyv3492, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = PersistentVolume{}
				} else {
					yyv3494 := &yyv3492[yyj3492]
					yyv3494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3492 := 0; !r.CheckBreak(); yyj3492++ {
			if yyj3492 >= len(yyv3492) {
				yyv3492 = append(yyv3492, PersistentVolume{}) // var yyz3492 PersistentVolume
				yyc3492 = true
			}

			if yyj3492 < len(yyv3492) {
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = PersistentVolume{}
				} else {
					yyv3495 := &yyv3492[yyj3492]
					yyv3495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3492.End()
	}
	if yyc3492 {
		*v = yyv3492
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3496 := range v {
		yy3497 := &yyv3496
		yy3497.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3498 := *v
	yyh3498, yyl3498 := z.DecSliceHelperStart()

	var yyrr3498, yyrl3498 int
	var yyc3498, yyrt3498 bool
	_, _, _ = yyc3498, yyrt3498, yyrl3498
	yyrr3498 = yyl3498

	if yyv3498 == nil {
		if yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 304); yyrt3498 {
			yyrr3498 = yyrl3498
		}
		yyv3498 = make([]PersistentVolumeClaim, yyrl3498)
		yyc3498 = true
	}

	if yyl3498 == 0 {
		if len(yyv3498) != 0 {
			yyv3498 = yyv3498[:0]
			yyc3498 = true
		}
	} else if yyl3498 > 0 {

		if yyl3498 > cap(yyv3498) {
			yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 304)
			yyv3498 = make([]PersistentVolumeClaim, yyrl3498)
			yyc3498 = true

			yyrr3498 = len(yyv3498)
		} else if yyl3498 != len(yyv3498) {
			yyv3498 = yyv3498[:yyl3498]
			yyc3498 = true
		}
		yyj3498 := 0
		for ; yyj3498 < yyrr3498; yyj3498++ {
			if r.TryDecodeAsNil() {
				yyv3498[yyj3498] = PersistentVolumeClaim{}
			} else {
				yyv3499 := &yyv3498[yyj3498]
				yyv3499.CodecDecodeSelf(d)
			}

		}
		if yyrt3498 {
			for ; yyj3498 < yyl3498; yyj3498++ {
				yyv3498 = append(yyv3498, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = PersistentVolumeClaim{}
				} else {
					yyv3500 := &yyv3498[yyj3498]
					yyv3500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3498 := 0; !r.CheckBreak(); yyj3498++ {
			if yyj3498 >= len(yyv3498) {
				yyv3498 = append(yyv3498, PersistentVolumeClaim{}) // var yyz3498 PersistentVolumeClaim
				yyc3498 = true
			}

			if yyj3498 < len(yyv3498) {
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = PersistentVolumeClaim{}
				} else {
					yyv3501 := &yyv3498[yyj3498]
					yyv3501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3498.End()
	}
	if yyc3498 {
		*v = yyv3498
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3502 := range v {
		yyv3502.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3503 := *v
	yyh3503, yyl3503 := z.DecSliceHelperStart()

	var yyrr3503, yyrl3503 int
	var yyc3503, yyrt3503 bool
	_, _, _ = yyc3503, yyrt3503, yyrl3503
	yyrr3503 = yyl3503

	if yyv3503 == nil {
		if yyrl3503, yyrt3503 = z.DecInferLen(yyl3503, z.DecBasicHandle().MaxInitLen, 16); yyrt3503 {
			yyrr3503 = yyrl3503
		}
		yyv3503 = make([]Capability, yyrl3503)
		yyc3503 = true
	}

	if yyl3503 == 0 {
		if len(yyv3503) != 0 {
			yyv3503 = yyv3503[:0]
			yyc3503 = true
		}
	} else if yyl3503 > 0 {

		if yyl3503 > cap(yyv3503) {
			yyrl3503, yyrt3503 = z.DecInferLen(yyl3503, z.DecBasicHandle().MaxInitLen, 16)

			yyv23503 := yyv3503
			yyv3503 = make([]Capability, yyrl3503)
			if len(yyv3503) > 0 {
				copy(yyv3503, yyv23503[:cap(yyv23503)])
			}
			yyc3503 = true

			yyrr3503 = len(yyv3503)
		} else if yyl3503 != len(yyv3503) {
			yyv3503 = yyv3503[:yyl3503]
			yyc3503 = true
		}
		yyj3503 := 0
		for ; yyj3503 < yyrr3503; yyj3503++ {
			if r.TryDecodeAsNil() {
				yyv3503[yyj3503] = ""
			} else {
				yyv3503[yyj3503] = Capability(r.DecodeString())
			}

		}
		if yyrt3503 {
			for ; yyj3503 < yyl3503; yyj3503++ {
				yyv3503 = append(yyv3503, "")
				if r.TryDecodeAsNil() {
					yyv3503[yyj3503] = ""
				} else {
					yyv3503[yyj3503] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3503 := 0; !r.CheckBreak(); yyj3503++ {
			if yyj3503 >= len(yyv3503) {
				yyv3503 = append(yyv3503, "") // var yyz3503 Capability
				yyc3503 = true
			}

			if yyj3503 < len(yyv3503) {
				if r.TryDecodeAsNil() {
					yyv3503[yyj3503] = ""
				} else {
					yyv3503[yyj3503] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3503.End()
	}
	if yyc3503 {
		*v = yyv3503
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3507 := range v {
		yy3508 := &yyv3507
		yy3508.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3509 := *v
	yyh3509, yyl3509 := z.DecSliceHelperStart()

	var yyrr3509, yyrl3509 int
	var yyc3509, yyrt3509 bool
	_, _, _ = yyc3509, yyrt3509, yyrl3509
	yyrr3509 = yyl3509

	if yyv3509 == nil {
		if yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 64); yyrt3509 {
			yyrr3509 = yyrl3509
		}
		yyv3509 = make([]ContainerPort, yyrl3509)
		yyc3509 = true
	}

	if yyl3509 == 0 {
		if len(yyv3509) != 0 {
			yyv3509 = yyv3509[:0]
			yyc3509 = true
		}
	} else if yyl3509 > 0 {

		if yyl3509 > cap(yyv3509) {
			yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 64)
			yyv3509 = make([]ContainerPort, yyrl3509)
			yyc3509 = true

			yyrr3509 = len(yyv3509)
		} else if yyl3509 != len(yyv3509) {
			yyv3509 = yyv3509[:yyl3509]
			yyc3509 = true
		}
		yyj3509 := 0
		for ; yyj3509 < yyrr3509; yyj3509++ {
			if r.TryDecodeAsNil() {
				yyv3509[yyj3509] = ContainerPort{}
			} else {
				yyv3510 := &yyv3509[yyj3509]
				yyv3510.CodecDecodeSelf(d)
			}

		}
		if yyrt3509 {
			for ; yyj3509 < yyl3509; yyj3509++ {
				yyv3509 = append(yyv3509, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = ContainerPort{}
				} else {
					yyv3511 := &yyv3509[yyj3509]
					yyv3511.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3509 := 0; !r.CheckBreak(); yyj3509++ {
			if yyj3509 >= len(yyv3509) {
				yyv3509 = append(yyv3509, ContainerPort{}) // var yyz3509 ContainerPort
				yyc3509 = true
			}

			if yyj3509 < len(yyv3509) {
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = ContainerPort{}
				} else {
					yyv3512 := &yyv3509[yyj3509]
					yyv3512.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3509.End()
	}
	if yyc3509 {
		*v = yyv3509
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3513 := range v {
		yy3514 := &yyv3513
		yy3514.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3515 := *v
	yyh3515, yyl3515 := z.DecSliceHelperStart()

	var yyrr3515, yyrl3515 int
	var yyc3515, yyrt3515 bool
	_, _, _ = yyc3515, yyrt3515, yyrl3515
	yyrr3515 = yyl3515

	if yyv3515 == nil {
		if yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 40); yyrt3515 {
			yyrr3515 = yyrl3515
		}
		yyv3515 = make([]EnvVar, yyrl3515)
		yyc3515 = true
	}

	if yyl3515 == 0 {
		if len(yyv3515) != 0 {
			yyv3515 = yyv3515[:0]
			yyc3515 = true
		}
	} else if yyl3515 > 0 {

		if yyl3515 > cap(yyv3515) {
			yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 40)
			yyv3515 = make([]EnvVar, yyrl3515)
			yyc3515 = true

			yyrr3515 = len(yyv3515)
		} else if yyl3515 != len(yyv3515) {
			yyv3515 = yyv3515[:yyl3515]
			yyc3515 = true
		}
		yyj3515 := 0
		for ; yyj3515 < yyrr3515; yyj3515++ {
			if r.TryDecodeAsNil() {
				yyv3515[yyj3515] = EnvVar{}
			} else {
				yyv3516 := &yyv3515[yyj3515]
				yyv3516.CodecDecodeSelf(d)
			}

		}
		if yyrt3515 {
			for ; yyj3515 < yyl3515; yyj3515++ {
				yyv3515 = append(yyv3515, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = EnvVar{}
				} else {
					yyv3517 := &yyv3515[yyj3515]
					yyv3517.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3515 := 0; !r.CheckBreak(); yyj3515++ {
			if yyj3515 >= len(yyv3515) {
				yyv3515 = append(yyv3515, EnvVar{}) // var yyz3515 EnvVar
				yyc3515 = true
			}

			if yyj3515 < len(yyv3515) {
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = EnvVar{}
				} else {
					yyv3518 := &yyv3515[yyj3515]
					yyv3518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3515.End()
	}
	if yyc3515 {
		*v = yyv3515
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3519 := range v {
		yy3520 := &yyv3519
		yy3520.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3521 := *v
	yyh3521, yyl3521 := z.DecSliceHelperStart()

	var yyrr3521, yyrl3521 int
	var yyc3521, yyrt3521 bool
	_, _, _ = yyc3521, yyrt3521, yyrl3521
	yyrr3521 = yyl3521

	if yyv3521 == nil {
		if yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 40); yyrt3521 {
			yyrr3521 = yyrl3521
		}
		yyv3521 = make([]VolumeMount, yyrl3521)
		yyc3521 = true
	}

	if yyl3521 == 0 {
		if len(yyv3521) != 0 {
			yyv3521 = yyv3521[:0]
			yyc3521 = true
		}
	} else if yyl3521 > 0 {

		if yyl3521 > cap(yyv3521) {
			yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 40)
			yyv3521 = make([]VolumeMount, yyrl3521)
			yyc3521 = true

			yyrr3521 = len(yyv3521)
		} else if yyl3521 != len(yyv3521) {
			yyv3521 = yyv3521[:yyl3521]
			yyc3521 = true
		}
		yyj3521 := 0
		for ; yyj3521 < yyrr3521; yyj3521++ {
			if r.TryDecodeAsNil() {
				yyv3521[yyj3521] = VolumeMount{}
			} else {
				yyv3522 := &yyv3521[yyj3521]
				yyv3522.CodecDecodeSelf(d)
			}

		}
		if yyrt3521 {
			for ; yyj3521 < yyl3521; yyj3521++ {
				yyv3521 = append(yyv3521, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = VolumeMount{}
				} else {
					yyv3523 := &yyv3521[yyj3521]
					yyv3523.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3521 := 0; !r.CheckBreak(); yyj3521++ {
			if yyj3521 >= len(yyv3521) {
				yyv3521 = append(yyv3521, VolumeMount{}) // var yyz3521 VolumeMount
				yyc3521 = true
			}

			if yyj3521 < len(yyv3521) {
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = VolumeMount{}
				} else {
					yyv3524 := &yyv3521[yyj3521]
					yyv3524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3521.End()
	}
	if yyc3521 {
		*v = yyv3521
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3525 := range v {
		yy3526 := &yyv3525
		yy3526.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3527 := *v
	yyh3527, yyl3527 := z.DecSliceHelperStart()

	var yyrr3527, yyrl3527 int
	var yyc3527, yyrt3527 bool
	_, _, _ = yyc3527, yyrt3527, yyrl3527
	yyrr3527 = yyl3527

	if yyv3527 == nil {
		if yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 144); yyrt3527 {
			yyrr3527 = yyrl3527
		}
		yyv3527 = make([]Volume, yyrl3527)
		yyc3527 = true
	}

	if yyl3527 == 0 {
		if len(yyv3527) != 0 {
			yyv3527 = yyv3527[:0]
			yyc3527 = true
		}
	} else if yyl3527 > 0 {

		if yyl3527 > cap(yyv3527) {
			yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 144)
			yyv3527 = make([]Volume, yyrl3527)
			yyc3527 = true

			yyrr3527 = len(yyv3527)
		} else if yyl3527 != len(yyv3527) {
			yyv3527 = yyv3527[:yyl3527]
			yyc3527 = true
		}
		yyj3527 := 0
		for ; yyj3527 < yyrr3527; yyj3527++ {
			if r.TryDecodeAsNil() {
				yyv3527[yyj3527] = Volume{}
			} else {
				yyv3528 := &yyv3527[yyj3527]
				yyv3528.CodecDecodeSelf(d)
			}

		}
		if yyrt3527 {
			for ; yyj3527 < yyl3527; yyj3527++ {
				yyv3527 = append(yyv3527, Volume{})
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = Volume{}
				} else {
					yyv3529 := &yyv3527[yyj3527]
					yyv3529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3527 := 0; !r.CheckBreak(); yyj3527++ {
			if yyj3527 >= len(yyv3527) {
				yyv3527 = append(yyv3527, Volume{}) // var yyz3527 Volume
				yyc3527 = true
			}

			if yyj3527 < len(yyv3527) {
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = Volume{}
				} else {
					yyv3530 := &yyv3527[yyj3527]
					yyv3530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3527.End()
	}
	if yyc3527 {
		*v = yyv3527
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3531 := range v {
		yy3532 := &yyv3531
		yy3532.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3533 := *v
	yyh3533, yyl3533 := z.DecSliceHelperStart()

	var yyrr3533, yyrl3533 int
	var yyc3533, yyrt3533 bool
	_, _, _ = yyc3533, yyrt3533, yyrl3533
	yyrr3533 = yyl3533

	if yyv3533 == nil {
		if yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 264); yyrt3533 {
			yyrr3533 = yyrl3533
		}
		yyv3533 = make([]Container, yyrl3533)
		yyc3533 = true
	}

	if yyl3533 == 0 {
		if len(yyv3533) != 0 {
			yyv3533 = yyv3533[:0]
			yyc3533 = true
		}
	} else if yyl3533 > 0 {

		if yyl3533 > cap(yyv3533) {
			yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 264)
			yyv3533 = make([]Container, yyrl3533)
			yyc3533 = true

			yyrr3533 = len(yyv3533)
		} else if yyl3533 != len(yyv3533) {
			yyv3533 = yyv3533[:yyl3533]
			yyc3533 = true
		}
		yyj3533 := 0
		for ; yyj3533 < yyrr3533; yyj3533++ {
			if r.TryDecodeAsNil() {
				yyv3533[yyj3533] = Container{}
			} else {
				yyv3534 := &yyv3533[yyj3533]
				yyv3534.CodecDecodeSelf(d)
			}

		}
		if yyrt3533 {
			for ; yyj3533 < yyl3533; yyj3533++ {
				yyv3533 = append(yyv3533, Container{})
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = Container{}
				} else {
					yyv3535 := &yyv3533[yyj3533]
					yyv3535.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3533 := 0; !r.CheckBreak(); yyj3533++ {
			if yyj3533 >= len(yyv3533) {
				yyv3533 = append(yyv3533, Container{}) // var yyz3533 Container
				yyc3533 = true
			}

			if yyj3533 < len(yyv3533) {
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = Container{}
				} else {
					yyv3536 := &yyv3533[yyj3533]
					yyv3536.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3533.End()
	}
	if yyc3533 {
		*v = yyv3533
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3537 := range v {
		yy3538 := &yyv3537
		yy3538.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3539 := *v
	yyh3539, yyl3539 := z.DecSliceHelperStart()

	var yyrr3539, yyrl3539 int
	var yyc3539, yyrt3539 bool
	_, _, _ = yyc3539, yyrt3539, yyrl3539
	yyrr3539 = yyl3539

	if yyv3539 == nil {
		if yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 16); yyrt3539 {
			yyrr3539 = yyrl3539
		}
		yyv3539 = make([]LocalObjectReference, yyrl3539)
		yyc3539 = true
	}

	if yyl3539 == 0 {
		if len(yyv3539) != 0 {
			yyv3539 = yyv3539[:0]
			yyc3539 = true
		}
	} else if yyl3539 > 0 {

		if yyl3539 > cap(yyv3539) {
			yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 16)
			yyv3539 = make([]LocalObjectReference, yyrl3539)
			yyc3539 = true

			yyrr3539 = len(yyv3539)
		} else if yyl3539 != len(yyv3539) {
			yyv3539 = yyv3539[:yyl3539]
			yyc3539 = true
		}
		yyj3539 := 0
		for ; yyj3539 < yyrr3539; yyj3539++ {
			if r.TryDecodeAsNil() {
				yyv3539[yyj3539] = LocalObjectReference{}
			} else {
				yyv3540 := &yyv3539[yyj3539]
				yyv3540.CodecDecodeSelf(d)
			}

		}
		if yyrt3539 {
			for ; yyj3539 < yyl3539; yyj3539++ {
				yyv3539 = append(yyv3539, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = LocalObjectReference{}
				} else {
					yyv3541 := &yyv3539[yyj3539]
					yyv3541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3539 := 0; !r.CheckBreak(); yyj3539++ {
			if yyj3539 >= len(yyv3539) {
				yyv3539 = append(yyv3539, LocalObjectReference{}) // var yyz3539 LocalObjectReference
				yyc3539 = true
			}

			if yyj3539 < len(yyv3539) {
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = LocalObjectReference{}
				} else {
					yyv3542 := &yyv3539[yyj3539]
					yyv3542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3539.End()
	}
	if yyc3539 {
		*v = yyv3539
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3543 := range v {
		yy3544 := &yyv3543
		yy3544.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3545 := *v
	yyh3545, yyl3545 := z.DecSliceHelperStart()

	var yyrr3545, yyrl3545 int
	var yyc3545, yyrt3545 bool
	_, _, _ = yyc3545, yyrt3545, yyrl3545
	yyrr3545 = yyl3545

	if yyv3545 == nil {
		if yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 112); yyrt3545 {
			yyrr3545 = yyrl3545
		}
		yyv3545 = make([]PodCondition, yyrl3545)
		yyc3545 = true
	}

	if yyl3545 == 0 {
		if len(yyv3545) != 0 {
			yyv3545 = yyv3545[:0]
			yyc3545 = true
		}
	} else if yyl3545 > 0 {

		if yyl3545 > cap(yyv3545) {
			yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 112)
			yyv3545 = make([]PodCondition, yyrl3545)
			yyc3545 = true

			yyrr3545 = len(yyv3545)
		} else if yyl3545 != len(yyv3545) {
			yyv3545 = yyv3545[:yyl3545]
			yyc3545 = true
		}
		yyj3545 := 0
		for ; yyj3545 < yyrr3545; yyj3545++ {
			if r.TryDecodeAsNil() {
				yyv3545[yyj3545] = PodCondition{}
			} else {
				yyv3546 := &yyv3545[yyj3545]
				yyv3546.CodecDecodeSelf(d)
			}

		}
		if yyrt3545 {
			for ; yyj3545 < yyl3545; yyj3545++ {
				yyv3545 = append(yyv3545, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = PodCondition{}
				} else {
					yyv3547 := &yyv3545[yyj3545]
					yyv3547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3545 := 0; !r.CheckBreak(); yyj3545++ {
			if yyj3545 >= len(yyv3545) {
				yyv3545 = append(yyv3545, PodCondition{}) // var yyz3545 PodCondition
				yyc3545 = true
			}

			if yyj3545 < len(yyv3545) {
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = PodCondition{}
				} else {
					yyv3548 := &yyv3545[yyj3545]
					yyv3548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3545.End()
	}
	if yyc3545 {
		*v = yyv3545
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3549 := range v {
		yy3550 := &yyv3549
		yy3550.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3551 := *v
	yyh3551, yyl3551 := z.DecSliceHelperStart()

	var yyrr3551, yyrl3551 int
	var yyc3551, yyrt3551 bool
	_, _, _ = yyc3551, yyrt3551, yyrl3551
	yyrr3551 = yyl3551

	if yyv3551 == nil {
		if yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 128); yyrt3551 {
			yyrr3551 = yyrl3551
		}
		yyv3551 = make([]ContainerStatus, yyrl3551)
		yyc3551 = true
	}

	if yyl3551 == 0 {
		if len(yyv3551) != 0 {
			yyv3551 = yyv3551[:0]
			yyc3551 = true
		}
	} else if yyl3551 > 0 {

		if yyl3551 > cap(yyv3551) {
			yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 128)
			yyv3551 = make([]ContainerStatus, yyrl3551)
			yyc3551 = true

			yyrr3551 = len(yyv3551)
		} else if yyl3551 != len(yyv3551) {
			yyv3551 = yyv3551[:yyl3551]
			yyc3551 = true
		}
		yyj3551 := 0
		for ; yyj3551 < yyrr3551; yyj3551++ {
			if r.TryDecodeAsNil() {
				yyv3551[yyj3551] = ContainerStatus{}
			} else {
				yyv3552 := &yyv3551[yyj3551]
				yyv3552.CodecDecodeSelf(d)
			}

		}
		if yyrt3551 {
			for ; yyj3551 < yyl3551; yyj3551++ {
				yyv3551 = append(yyv3551, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = ContainerStatus{}
				} else {
					yyv3553 := &yyv3551[yyj3551]
					yyv3553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3551 := 0; !r.CheckBreak(); yyj3551++ {
			if yyj3551 >= len(yyv3551) {
				yyv3551 = append(yyv3551, ContainerStatus{}) // var yyz3551 ContainerStatus
				yyc3551 = true
			}

			if yyj3551 < len(yyv3551) {
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = ContainerStatus{}
				} else {
					yyv3554 := &yyv3551[yyj3551]
					yyv3554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3551.End()
	}
	if yyc3551 {
		*v = yyv3551
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3555 := range v {
		yy3556 := &yyv3555
		yy3556.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3557 := *v
	yyh3557, yyl3557 := z.DecSliceHelperStart()

	var yyrr3557, yyrl3557 int
	var yyc3557, yyrt3557 bool
	_, _, _ = yyc3557, yyrt3557, yyrl3557
	yyrr3557 = yyl3557

	if yyv3557 == nil {
		if yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 520); yyrt3557 {
			yyrr3557 = yyrl3557
		}
		yyv3557 = make([]Pod, yyrl3557)
		yyc3557 = true
	}

	if yyl3557 == 0 {
		if len(yyv3557) != 0 {
			yyv3557 = yyv3557[:0]
			yyc3557 = true
		}
	} else if yyl3557 > 0 {

		if yyl3557 > cap(yyv3557) {
			yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 520)
			yyv3557 = make([]Pod, yyrl3557)
			yyc3557 = true

			yyrr3557 = len(yyv3557)
		} else if yyl3557 != len(yyv3557) {
			yyv3557 = yyv3557[:yyl3557]
			yyc3557 = true
		}
		yyj3557 := 0
		for ; yyj3557 < yyrr3557; yyj3557++ {
			if r.TryDecodeAsNil() {
				yyv3557[yyj3557] = Pod{}
			} else {
				yyv3558 := &yyv3557[yyj3557]
				yyv3558.CodecDecodeSelf(d)
			}

		}
		if yyrt3557 {
			for ; yyj3557 < yyl3557; yyj3557++ {
				yyv3557 = append(yyv3557, Pod{})
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = Pod{}
				} else {
					yyv3559 := &yyv3557[yyj3557]
					yyv3559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3557 := 0; !r.CheckBreak(); yyj3557++ {
			if yyj3557 >= len(yyv3557) {
				yyv3557 = append(yyv3557, Pod{}) // var yyz3557 Pod
				yyc3557 = true
			}

			if yyj3557 < len(yyv3557) {
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = Pod{}
				} else {
					yyv3560 := &yyv3557[yyj3557]
					yyv3560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3557.End()
	}
	if yyc3557 {
		*v = yyv3557
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3561 := range v {
		yy3562 := &yyv3561
		yy3562.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3563 := *v
	yyh3563, yyl3563 := z.DecSliceHelperStart()

	var yyrr3563, yyrl3563 int
	var yyc3563, yyrt3563 bool
	_, _, _ = yyc3563, yyrt3563, yyrl3563
	yyrr3563 = yyl3563

	if yyv3563 == nil {
		if yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 544); yyrt3563 {
			yyrr3563 = yyrl3563
		}
		yyv3563 = make([]PodTemplate, yyrl3563)
		yyc3563 = true
	}

	if yyl3563 == 0 {
		if len(yyv3563) != 0 {
			yyv3563 = yyv3563[:0]
			yyc3563 = true
		}
	} else if yyl3563 > 0 {

		if yyl3563 > cap(yyv3563) {
			yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 544)
			yyv3563 = make([]PodTemplate, yyrl3563)
			yyc3563 = true

			yyrr3563 = len(yyv3563)
		} else if yyl3563 != len(yyv3563) {
			yyv3563 = yyv3563[:yyl3563]
			yyc3563 = true
		}
		yyj3563 := 0
		for ; yyj3563 < yyrr3563; yyj3563++ {
			if r.TryDecodeAsNil() {
				yyv3563[yyj3563] = PodTemplate{}
			} else {
				yyv3564 := &yyv3563[yyj3563]
				yyv3564.CodecDecodeSelf(d)
			}

		}
		if yyrt3563 {
			for ; yyj3563 < yyl3563; yyj3563++ {
				yyv3563 = append(yyv3563, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = PodTemplate{}
				} else {
					yyv3565 := &yyv3563[yyj3563]
					yyv3565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3563 := 0; !r.CheckBreak(); yyj3563++ {
			if yyj3563 >= len(yyv3563) {
				yyv3563 = append(yyv3563, PodTemplate{}) // var yyz3563 PodTemplate
				yyc3563 = true
			}

			if yyj3563 < len(yyv3563) {
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = PodTemplate{}
				} else {
					yyv3566 := &yyv3563[yyj3563]
					yyv3566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3563.End()
	}
	if yyc3563 {
		*v = yyv3563
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3567 := range v {
		yy3568 := &yyv3567
		yy3568.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3569 := *v
	yyh3569, yyl3569 := z.DecSliceHelperStart()

	var yyrr3569, yyrl3569 int
	var yyc3569, yyrt3569 bool
	_, _, _ = yyc3569, yyrt3569, yyrl3569
	yyrr3569 = yyl3569

	if yyv3569 == nil {
		if yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 232); yyrt3569 {
			yyrr3569 = yyrl3569
		}
		yyv3569 = make([]ReplicationController, yyrl3569)
		yyc3569 = true
	}

	if yyl3569 == 0 {
		if len(yyv3569) != 0 {
			yyv3569 = yyv3569[:0]
			yyc3569 = true
		}
	} else if yyl3569 > 0 {

		if yyl3569 > cap(yyv3569) {
			yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 232)
			yyv3569 = make([]ReplicationController, yyrl3569)
			yyc3569 = true

			yyrr3569 = len(yyv3569)
		} else if yyl3569 != len(yyv3569) {
			yyv3569 = yyv3569[:yyl3569]
			yyc3569 = true
		}
		yyj3569 := 0
		for ; yyj3569 < yyrr3569; yyj3569++ {
			if r.TryDecodeAsNil() {
				yyv3569[yyj3569] = ReplicationController{}
			} else {
				yyv3570 := &yyv3569[yyj3569]
				yyv3570.CodecDecodeSelf(d)
			}

		}
		if yyrt3569 {
			for ; yyj3569 < yyl3569; yyj3569++ {
				yyv3569 = append(yyv3569, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = ReplicationController{}
				} else {
					yyv3571 := &yyv3569[yyj3569]
					yyv3571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3569 := 0; !r.CheckBreak(); yyj3569++ {
			if yyj3569 >= len(yyv3569) {
				yyv3569 = append(yyv3569, ReplicationController{}) // var yyz3569 ReplicationController
				yyc3569 = true
			}

			if yyj3569 < len(yyv3569) {
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = ReplicationController{}
				} else {
					yyv3572 := &yyv3569[yyj3569]
					yyv3572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3569.End()
	}
	if yyc3569 {
		*v = yyv3569
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3573 := range v {
		yy3574 := &yyv3573
		yy3574.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3575 := *v
	yyh3575, yyl3575 := z.DecSliceHelperStart()

	var yyrr3575, yyrl3575 int
	var yyc3575, yyrt3575 bool
	_, _, _ = yyc3575, yyrt3575, yyrl3575
	yyrr3575 = yyl3575

	if yyv3575 == nil {
		if yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 32); yyrt3575 {
			yyrr3575 = yyrl3575
		}
		yyv3575 = make([]LoadBalancerIngress, yyrl3575)
		yyc3575 = true
	}

	if yyl3575 == 0 {
		if len(yyv3575) != 0 {
			yyv3575 = yyv3575[:0]
			yyc3575 = true
		}
	} else if yyl3575 > 0 {

		if yyl3575 > cap(yyv3575) {
			yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 32)
			yyv3575 = make([]LoadBalancerIngress, yyrl3575)
			yyc3575 = true

			yyrr3575 = len(yyv3575)
		} else if yyl3575 != len(yyv3575) {
			yyv3575 = yyv3575[:yyl3575]
			yyc3575 = true
		}
		yyj3575 := 0
		for ; yyj3575 < yyrr3575; yyj3575++ {
			if r.TryDecodeAsNil() {
				yyv3575[yyj3575] = LoadBalancerIngress{}
			} else {
				yyv3576 := &yyv3575[yyj3575]
				yyv3576.CodecDecodeSelf(d)
			}

		}
		if yyrt3575 {
			for ; yyj3575 < yyl3575; yyj3575++ {
				yyv3575 = append(yyv3575, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = LoadBalancerIngress{}
				} else {
					yyv3577 := &yyv3575[yyj3575]
					yyv3577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3575 := 0; !r.CheckBreak(); yyj3575++ {
			if yyj3575 >= len(yyv3575) {
				yyv3575 = append(yyv3575, LoadBalancerIngress{}) // var yyz3575 LoadBalancerIngress
				yyc3575 = true
			}

			if yyj3575 < len(yyv3575) {
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = LoadBalancerIngress{}
				} else {
					yyv3578 := &yyv3575[yyj3575]
					yyv3578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3575.End()
	}
	if yyc3575 {
		*v = yyv3575
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3579 := range v {
		yy3580 := &yyv3579
		yy3580.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3581 := *v
	yyh3581, yyl3581 := z.DecSliceHelperStart()

	var yyrr3581, yyrl3581 int
	var yyc3581, yyrt3581 bool
	_, _, _ = yyc3581, yyrt3581, yyrl3581
	yyrr3581 = yyl3581

	if yyv3581 == nil {
		if yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 80); yyrt3581 {
			yyrr3581 = yyrl3581
		}
		yyv3581 = make([]ServicePort, yyrl3581)
		yyc3581 = true
	}

	if yyl3581 == 0 {
		if len(yyv3581) != 0 {
			yyv3581 = yyv3581[:0]
			yyc3581 = true
		}
	} else if yyl3581 > 0 {

		if yyl3581 > cap(yyv3581) {
			yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 80)
			yyv3581 = make([]ServicePort, yyrl3581)
			yyc3581 = true

			yyrr3581 = len(yyv3581)
		} else if yyl3581 != len(yyv3581) {
			yyv3581 = yyv3581[:yyl3581]
			yyc3581 = true
		}
		yyj3581 := 0
		for ; yyj3581 < yyrr3581; yyj3581++ {
			if r.TryDecodeAsNil() {
				yyv3581[yyj3581] = ServicePort{}
			} else {
				yyv3582 := &yyv3581[yyj3581]
				yyv3582.CodecDecodeSelf(d)
			}

		}
		if yyrt3581 {
			for ; yyj3581 < yyl3581; yyj3581++ {
				yyv3581 = append(yyv3581, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = ServicePort{}
				} else {
					yyv3583 := &yyv3581[yyj3581]
					yyv3583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3581 := 0; !r.CheckBreak(); yyj3581++ {
			if yyj3581 >= len(yyv3581) {
				yyv3581 = append(yyv3581, ServicePort{}) // var yyz3581 ServicePort
				yyc3581 = true
			}

			if yyj3581 < len(yyv3581) {
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = ServicePort{}
				} else {
					yyv3584 := &yyv3581[yyj3581]
					yyv3584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3581.End()
	}
	if yyc3581 {
		*v = yyv3581
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3585 := range v {
		yy3586 := &yyv3585
		yy3586.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3587 := *v
	yyh3587, yyl3587 := z.DecSliceHelperStart()

	var yyrr3587, yyrl3587 int
	var yyc3587, yyrt3587 bool
	_, _, _ = yyc3587, yyrt3587, yyrl3587
	yyrr3587 = yyl3587

	if yyv3587 == nil {
		if yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 360); yyrt3587 {
			yyrr3587 = yyrl3587
		}
		yyv3587 = make([]Service, yyrl3587)
		yyc3587 = true
	}

	if yyl3587 == 0 {
		if len(yyv3587) != 0 {
			yyv3587 = yyv3587[:0]
			yyc3587 = true
		}
	} else if yyl3587 > 0 {

		if yyl3587 > cap(yyv3587) {
			yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 360)
			yyv3587 = make([]Service, yyrl3587)
			yyc3587 = true

			yyrr3587 = len(yyv3587)
		} else if yyl3587 != len(yyv3587) {
			yyv3587 = yyv3587[:yyl3587]
			yyc3587 = true
		}
		yyj3587 := 0
		for ; yyj3587 < yyrr3587; yyj3587++ {
			if r.TryDecodeAsNil() {
				yyv3587[yyj3587] = Service{}
			} else {
				yyv3588 := &yyv3587[yyj3587]
				yyv3588.CodecDecodeSelf(d)
			}

		}
		if yyrt3587 {
			for ; yyj3587 < yyl3587; yyj3587++ {
				yyv3587 = append(yyv3587, Service{})
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = Service{}
				} else {
					yyv3589 := &yyv3587[yyj3587]
					yyv3589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3587 := 0; !r.CheckBreak(); yyj3587++ {
			if yyj3587 >= len(yyv3587) {
				yyv3587 = append(yyv3587, Service{}) // var yyz3587 Service
				yyc3587 = true
			}

			if yyj3587 < len(yyv3587) {
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = Service{}
				} else {
					yyv3590 := &yyv3587[yyj3587]
					yyv3590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3587.End()
	}
	if yyc3587 {
		*v = yyv3587
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3591 := range v {
		yy3592 := &yyv3591
		yy3592.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3593 := *v
	yyh3593, yyl3593 := z.DecSliceHelperStart()

	var yyrr3593, yyrl3593 int
	var yyc3593, yyrt3593 bool
	_, _, _ = yyc3593, yyrt3593, yyrl3593
	yyrr3593 = yyl3593

	if yyv3593 == nil {
		if yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 112); yyrt3593 {
			yyrr3593 = yyrl3593
		}
		yyv3593 = make([]ObjectReference, yyrl3593)
		yyc3593 = true
	}

	if yyl3593 == 0 {
		if len(yyv3593) != 0 {
			yyv3593 = yyv3593[:0]
			yyc3593 = true
		}
	} else if yyl3593 > 0 {

		if yyl3593 > cap(yyv3593) {
			yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 112)
			yyv3593 = make([]ObjectReference, yyrl3593)
			yyc3593 = true

			yyrr3593 = len(yyv3593)
		} else if yyl3593 != len(yyv3593) {
			yyv3593 = yyv3593[:yyl3593]
			yyc3593 = true
		}
		yyj3593 := 0
		for ; yyj3593 < yyrr3593; yyj3593++ {
			if r.TryDecodeAsNil() {
				yyv3593[yyj3593] = ObjectReference{}
			} else {
				yyv3594 := &yyv3593[yyj3593]
				yyv3594.CodecDecodeSelf(d)
			}

		}
		if yyrt3593 {
			for ; yyj3593 < yyl3593; yyj3593++ {
				yyv3593 = append(yyv3593, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = ObjectReference{}
				} else {
					yyv3595 := &yyv3593[yyj3593]
					yyv3595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3593 := 0; !r.CheckBreak(); yyj3593++ {
			if yyj3593 >= len(yyv3593) {
				yyv3593 = append(yyv3593, ObjectReference{}) // var yyz3593 ObjectReference
				yyc3593 = true
			}

			if yyj3593 < len(yyv3593) {
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = ObjectReference{}
				} else {
					yyv3596 := &yyv3593[yyj3593]
					yyv3596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3593.End()
	}
	if yyc3593 {
		*v = yyv3593
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3597 := range v {
		yy3598 := &yyv3597
		yy3598.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3599 := *v
	yyh3599, yyl3599 := z.DecSliceHelperStart()

	var yyrr3599, yyrl3599 int
	var yyc3599, yyrt3599 bool
	_, _, _ = yyc3599, yyrt3599, yyrl3599
	yyrr3599 = yyl3599

	if yyv3599 == nil {
		if yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 240); yyrt3599 {
			yyrr3599 = yyrl3599
		}
		yyv3599 = make([]ServiceAccount, yyrl3599)
		yyc3599 = true
	}

	if yyl3599 == 0 {
		if len(yyv3599) != 0 {
			yyv3599 = yyv3599[:0]
			yyc3599 = true
		}
	} else if yyl3599 > 0 {

		if yyl3599 > cap(yyv3599) {
			yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 240)
			yyv3599 = make([]ServiceAccount, yyrl3599)
			yyc3599 = true

			yyrr3599 = len(yyv3599)
		} else if yyl3599 != len(yyv3599) {
			yyv3599 = yyv3599[:yyl3599]
			yyc3599 = true
		}
		yyj3599 := 0
		for ; yyj3599 < yyrr3599; yyj3599++ {
			if r.TryDecodeAsNil() {
				yyv3599[yyj3599] = ServiceAccount{}
			} else {
				yyv3600 := &yyv3599[yyj3599]
				yyv3600.CodecDecodeSelf(d)
			}

		}
		if yyrt3599 {
			for ; yyj3599 < yyl3599; yyj3599++ {
				yyv3599 = append(yyv3599, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = ServiceAccount{}
				} else {
					yyv3601 := &yyv3599[yyj3599]
					yyv3601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3599 := 0; !r.CheckBreak(); yyj3599++ {
			if yyj3599 >= len(yyv3599) {
				yyv3599 = append(yyv3599, ServiceAccount{}) // var yyz3599 ServiceAccount
				yyc3599 = true
			}

			if yyj3599 < len(yyv3599) {
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = ServiceAccount{}
				} else {
					yyv3602 := &yyv3599[yyj3599]
					yyv3602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3599.End()
	}
	if yyc3599 {
		*v = yyv3599
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3603 := range v {
		yy3604 := &yyv3603
		yy3604.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3605 := *v
	yyh3605, yyl3605 := z.DecSliceHelperStart()

	var yyrr3605, yyrl3605 int
	var yyc3605, yyrt3605 bool
	_, _, _ = yyc3605, yyrt3605, yyrl3605
	yyrr3605 = yyl3605

	if yyv3605 == nil {
		if yyrl3605, yyrt3605 = z.DecInferLen(yyl3605, z.DecBasicHandle().MaxInitLen, 72); yyrt3605 {
			yyrr3605 = yyrl3605
		}
		yyv3605 = make([]EndpointSubset, yyrl3605)
		yyc3605 = true
	}

	if yyl3605 == 0 {
		if len(yyv3605) != 0 {
			yyv3605 = yyv3605[:0]
			yyc3605 = true
		}
	} else if yyl3605 > 0 {

		if yyl3605 > cap(yyv3605) {
			yyrl3605, yyrt3605 = z.DecInferLen(yyl3605, z.DecBasicHandle().MaxInitLen, 72)
			yyv3605 = make([]EndpointSubset, yyrl3605)
			yyc3605 = true

			yyrr3605 = len(yyv3605)
		} else if yyl3605 != len(yyv3605) {
			yyv3605 = yyv3605[:yyl3605]
			yyc3605 = true
		}
		yyj3605 := 0
		for ; yyj3605 < yyrr3605; yyj3605++ {
			if r.TryDecodeAsNil() {
				yyv3605[yyj3605] = EndpointSubset{}
			} else {
				yyv3606 := &yyv3605[yyj3605]
				yyv3606.CodecDecodeSelf(d)
			}

		}
		if yyrt3605 {
			for ; yyj3605 < yyl3605; yyj3605++ {
				yyv3605 = append(yyv3605, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3605[yyj3605] = EndpointSubset{}
				} else {
					yyv3607 := &yyv3605[yyj3605]
					yyv3607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3605 := 0; !r.CheckBreak(); yyj3605++ {
			if yyj3605 >= len(yyv3605) {
				yyv3605 = append(yyv3605, EndpointSubset{}) // var yyz3605 EndpointSubset
				yyc3605 = true
			}

			if yyj3605 < len(yyv3605) {
				if r.TryDecodeAsNil() {
					yyv3605[yyj3605] = EndpointSubset{}
				} else {
					yyv3608 := &yyv3605[yyj3605]
					yyv3608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3605.End()
	}
	if yyc3605 {
		*v = yyv3605
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3609 := range v {
		yy3610 := &yyv3609
		yy3610.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3611 := *v
	yyh3611, yyl3611 := z.DecSliceHelperStart()

	var yyrr3611, yyrl3611 int
	var yyc3611, yyrt3611 bool
	_, _, _ = yyc3611, yyrt3611, yyrl3611
	yyrr3611 = yyl3611

	if yyv3611 == nil {
		if yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 24); yyrt3611 {
			yyrr3611 = yyrl3611
		}
		yyv3611 = make([]EndpointAddress, yyrl3611)
		yyc3611 = true
	}

	if yyl3611 == 0 {
		if len(yyv3611) != 0 {
			yyv3611 = yyv3611[:0]
			yyc3611 = true
		}
	} else if yyl3611 > 0 {

		if yyl3611 > cap(yyv3611) {
			yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 24)
			yyv3611 = make([]EndpointAddress, yyrl3611)
			yyc3611 = true

			yyrr3611 = len(yyv3611)
		} else if yyl3611 != len(yyv3611) {
			yyv3611 = yyv3611[:yyl3611]
			yyc3611 = true
		}
		yyj3611 := 0
		for ; yyj3611 < yyrr3611; yyj3611++ {
			if r.TryDecodeAsNil() {
				yyv3611[yyj3611] = EndpointAddress{}
			} else {
				yyv3612 := &yyv3611[yyj3611]
				yyv3612.CodecDecodeSelf(d)
			}

		}
		if yyrt3611 {
			for ; yyj3611 < yyl3611; yyj3611++ {
				yyv3611 = append(yyv3611, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = EndpointAddress{}
				} else {
					yyv3613 := &yyv3611[yyj3611]
					yyv3613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3611 := 0; !r.CheckBreak(); yyj3611++ {
			if yyj3611 >= len(yyv3611) {
				yyv3611 = append(yyv3611, EndpointAddress{}) // var yyz3611 EndpointAddress
				yyc3611 = true
			}

			if yyj3611 < len(yyv3611) {
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = EndpointAddress{}
				} else {
					yyv3614 := &yyv3611[yyj3611]
					yyv3614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3611.End()
	}
	if yyc3611 {
		*v = yyv3611
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3615 := range v {
		yy3616 := &yyv3615
		yy3616.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3617 := *v
	yyh3617, yyl3617 := z.DecSliceHelperStart()

	var yyrr3617, yyrl3617 int
	var yyc3617, yyrt3617 bool
	_, _, _ = yyc3617, yyrt3617, yyrl3617
	yyrr3617 = yyl3617

	if yyv3617 == nil {
		if yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 40); yyrt3617 {
			yyrr3617 = yyrl3617
		}
		yyv3617 = make([]EndpointPort, yyrl3617)
		yyc3617 = true
	}

	if yyl3617 == 0 {
		if len(yyv3617) != 0 {
			yyv3617 = yyv3617[:0]
			yyc3617 = true
		}
	} else if yyl3617 > 0 {

		if yyl3617 > cap(yyv3617) {
			yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 40)
			yyv3617 = make([]EndpointPort, yyrl3617)
			yyc3617 = true

			yyrr3617 = len(yyv3617)
		} else if yyl3617 != len(yyv3617) {
			yyv3617 = yyv3617[:yyl3617]
			yyc3617 = true
		}
		yyj3617 := 0
		for ; yyj3617 < yyrr3617; yyj3617++ {
			if r.TryDecodeAsNil() {
				yyv3617[yyj3617] = EndpointPort{}
			} else {
				yyv3618 := &yyv3617[yyj3617]
				yyv3618.CodecDecodeSelf(d)
			}

		}
		if yyrt3617 {
			for ; yyj3617 < yyl3617; yyj3617++ {
				yyv3617 = append(yyv3617, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = EndpointPort{}
				} else {
					yyv3619 := &yyv3617[yyj3617]
					yyv3619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3617 := 0; !r.CheckBreak(); yyj3617++ {
			if yyj3617 >= len(yyv3617) {
				yyv3617 = append(yyv3617, EndpointPort{}) // var yyz3617 EndpointPort
				yyc3617 = true
			}

			if yyj3617 < len(yyv3617) {
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = EndpointPort{}
				} else {
					yyv3620 := &yyv3617[yyj3617]
					yyv3620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3617.End()
	}
	if yyc3617 {
		*v = yyv3617
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3621 := range v {
		yy3622 := &yyv3621
		yy3622.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3623 := *v
	yyh3623, yyl3623 := z.DecSliceHelperStart()

	var yyrr3623, yyrl3623 int
	var yyc3623, yyrt3623 bool
	_, _, _ = yyc3623, yyrt3623, yyrl3623
	yyrr3623 = yyl3623

	if yyv3623 == nil {
		if yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 216); yyrt3623 {
			yyrr3623 = yyrl3623
		}
		yyv3623 = make([]Endpoints, yyrl3623)
		yyc3623 = true
	}

	if yyl3623 == 0 {
		if len(yyv3623) != 0 {
			yyv3623 = yyv3623[:0]
			yyc3623 = true
		}
	} else if yyl3623 > 0 {

		if yyl3623 > cap(yyv3623) {
			yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 216)
			yyv3623 = make([]Endpoints, yyrl3623)
			yyc3623 = true

			yyrr3623 = len(yyv3623)
		} else if yyl3623 != len(yyv3623) {
			yyv3623 = yyv3623[:yyl3623]
			yyc3623 = true
		}
		yyj3623 := 0
		for ; yyj3623 < yyrr3623; yyj3623++ {
			if r.TryDecodeAsNil() {
				yyv3623[yyj3623] = Endpoints{}
			} else {
				yyv3624 := &yyv3623[yyj3623]
				yyv3624.CodecDecodeSelf(d)
			}

		}
		if yyrt3623 {
			for ; yyj3623 < yyl3623; yyj3623++ {
				yyv3623 = append(yyv3623, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = Endpoints{}
				} else {
					yyv3625 := &yyv3623[yyj3623]
					yyv3625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3623 := 0; !r.CheckBreak(); yyj3623++ {
			if yyj3623 >= len(yyv3623) {
				yyv3623 = append(yyv3623, Endpoints{}) // var yyz3623 Endpoints
				yyc3623 = true
			}

			if yyj3623 < len(yyv3623) {
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = Endpoints{}
				} else {
					yyv3626 := &yyv3623[yyj3623]
					yyv3626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3623.End()
	}
	if yyc3623 {
		*v = yyv3623
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3627 := range v {
		yy3628 := &yyv3627
		yy3628.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3629 := *v
	yyh3629, yyl3629 := z.DecSliceHelperStart()

	var yyrr3629, yyrl3629 int
	var yyc3629, yyrt3629 bool
	_, _, _ = yyc3629, yyrt3629, yyrl3629
	yyrr3629 = yyl3629

	if yyv3629 == nil {
		if yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 112); yyrt3629 {
			yyrr3629 = yyrl3629
		}
		yyv3629 = make([]NodeCondition, yyrl3629)
		yyc3629 = true
	}

	if yyl3629 == 0 {
		if len(yyv3629) != 0 {
			yyv3629 = yyv3629[:0]
			yyc3629 = true
		}
	} else if yyl3629 > 0 {

		if yyl3629 > cap(yyv3629) {
			yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 112)
			yyv3629 = make([]NodeCondition, yyrl3629)
			yyc3629 = true

			yyrr3629 = len(yyv3629)
		} else if yyl3629 != len(yyv3629) {
			yyv3629 = yyv3629[:yyl3629]
			yyc3629 = true
		}
		yyj3629 := 0
		for ; yyj3629 < yyrr3629; yyj3629++ {
			if r.TryDecodeAsNil() {
				yyv3629[yyj3629] = NodeCondition{}
			} else {
				yyv3630 := &yyv3629[yyj3629]
				yyv3630.CodecDecodeSelf(d)
			}

		}
		if yyrt3629 {
			for ; yyj3629 < yyl3629; yyj3629++ {
				yyv3629 = append(yyv3629, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = NodeCondition{}
				} else {
					yyv3631 := &yyv3629[yyj3629]
					yyv3631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3629 := 0; !r.CheckBreak(); yyj3629++ {
			if yyj3629 >= len(yyv3629) {
				yyv3629 = append(yyv3629, NodeCondition{}) // var yyz3629 NodeCondition
				yyc3629 = true
			}

			if yyj3629 < len(yyv3629) {
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = NodeCondition{}
				} else {
					yyv3632 := &yyv3629[yyj3629]
					yyv3632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3629.End()
	}
	if yyc3629 {
		*v = yyv3629
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3633 := range v {
		yy3634 := &yyv3633
		yy3634.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3635 := *v
	yyh3635, yyl3635 := z.DecSliceHelperStart()

	var yyrr3635, yyrl3635 int
	var yyc3635, yyrt3635 bool
	_, _, _ = yyc3635, yyrt3635, yyrl3635
	yyrr3635 = yyl3635

	if yyv3635 == nil {
		if yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 32); yyrt3635 {
			yyrr3635 = yyrl3635
		}
		yyv3635 = make([]NodeAddress, yyrl3635)
		yyc3635 = true
	}

	if yyl3635 == 0 {
		if len(yyv3635) != 0 {
			yyv3635 = yyv3635[:0]
			yyc3635 = true
		}
	} else if yyl3635 > 0 {

		if yyl3635 > cap(yyv3635) {
			yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 32)
			yyv3635 = make([]NodeAddress, yyrl3635)
			yyc3635 = true

			yyrr3635 = len(yyv3635)
		} else if yyl3635 != len(yyv3635) {
			yyv3635 = yyv3635[:yyl3635]
			yyc3635 = true
		}
		yyj3635 := 0
		for ; yyj3635 < yyrr3635; yyj3635++ {
			if r.TryDecodeAsNil() {
				yyv3635[yyj3635] = NodeAddress{}
			} else {
				yyv3636 := &yyv3635[yyj3635]
				yyv3636.CodecDecodeSelf(d)
			}

		}
		if yyrt3635 {
			for ; yyj3635 < yyl3635; yyj3635++ {
				yyv3635 = append(yyv3635, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = NodeAddress{}
				} else {
					yyv3637 := &yyv3635[yyj3635]
					yyv3637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3635 := 0; !r.CheckBreak(); yyj3635++ {
			if yyj3635 >= len(yyv3635) {
				yyv3635 = append(yyv3635, NodeAddress{}) // var yyz3635 NodeAddress
				yyc3635 = true
			}

			if yyj3635 < len(yyv3635) {
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = NodeAddress{}
				} else {
					yyv3638 := &yyv3635[yyj3635]
					yyv3638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3635.End()
	}
	if yyc3635 {
		*v = yyv3635
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3639, yyv3639 := range v {
		yyk3639.CodecEncodeSelf(e)
		yy3640 := &yyv3639
		yym3641 := z.EncBinary()
		_ = yym3641
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3640) {
		} else if !yym3641 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3640)
		} else {
			z.EncFallback(yy3640)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3642 := *v
	yyl3642 := r.ReadMapStart()
	yybh3642 := z.DecBasicHandle()
	if yyv3642 == nil {
		yyrl3642, _ := z.DecInferLen(yyl3642, yybh3642.MaxInitLen, 40)
		yyv3642 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3642)
		*v = yyv3642
	}
	var yymk3642 ResourceName
	var yymv3642 pkg3_resource.Quantity
	var yymg3642 bool
	if yybh3642.MapValueReset {
		yymg3642 = true
	}
	if yyl3642 > 0 {
		for yyj3642 := 0; yyj3642 < yyl3642; yyj3642++ {
			if r.TryDecodeAsNil() {
				yymk3642 = ""
			} else {
				yymk3642 = ResourceName(r.DecodeString())
			}

			if yymg3642 {
				yymv3642 = yyv3642[yymk3642]
			} else {
				yymv3642 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3642 = pkg3_resource.Quantity{}
			} else {
				yyv3644 := &yymv3642
				yym3645 := z.DecBinary()
				_ = yym3645
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3644) {
				} else if !yym3645 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3644)
				} else {
					z.DecFallback(yyv3644, false)
				}
			}

			if yyv3642 != nil {
				yyv3642[yymk3642] = yymv3642
			}
		}
	} else if yyl3642 < 0 {
		for yyj3642 := 0; !r.CheckBreak(); yyj3642++ {
			if r.TryDecodeAsNil() {
				yymk3642 = ""
			} else {
				yymk3642 = ResourceName(r.DecodeString())
			}

			if yymg3642 {
				yymv3642 = yyv3642[yymk3642]
			} else {
				yymv3642 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3642 = pkg3_resource.Quantity{}
			} else {
				yyv3647 := &yymv3642
				yym3648 := z.DecBinary()
				_ = yym3648
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3647) {
				} else if !yym3648 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3647)
				} else {
					z.DecFallback(yyv3647, false)
				}
			}

			if yyv3642 != nil {
				yyv3642[yymk3642] = yymv3642
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3649 := range v {
		yy3650 := &yyv3649
		yy3650.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3651 := *v
	yyh3651, yyl3651 := z.DecSliceHelperStart()

	var yyrr3651, yyrl3651 int
	var yyc3651, yyrt3651 bool
	_, _, _ = yyc3651, yyrt3651, yyrl3651
	yyrr3651 = yyl3651

	if yyv3651 == nil {
		if yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 456); yyrt3651 {
			yyrr3651 = yyrl3651
		}
		yyv3651 = make([]Node, yyrl3651)
		yyc3651 = true
	}

	if yyl3651 == 0 {
		if len(yyv3651) != 0 {
			yyv3651 = yyv3651[:0]
			yyc3651 = true
		}
	} else if yyl3651 > 0 {

		if yyl3651 > cap(yyv3651) {
			yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 456)
			yyv3651 = make([]Node, yyrl3651)
			yyc3651 = true

			yyrr3651 = len(yyv3651)
		} else if yyl3651 != len(yyv3651) {
			yyv3651 = yyv3651[:yyl3651]
			yyc3651 = true
		}
		yyj3651 := 0
		for ; yyj3651 < yyrr3651; yyj3651++ {
			if r.TryDecodeAsNil() {
				yyv3651[yyj3651] = Node{}
			} else {
				yyv3652 := &yyv3651[yyj3651]
				yyv3652.CodecDecodeSelf(d)
			}

		}
		if yyrt3651 {
			for ; yyj3651 < yyl3651; yyj3651++ {
				yyv3651 = append(yyv3651, Node{})
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = Node{}
				} else {
					yyv3653 := &yyv3651[yyj3651]
					yyv3653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3651 := 0; !r.CheckBreak(); yyj3651++ {
			if yyj3651 >= len(yyv3651) {
				yyv3651 = append(yyv3651, Node{}) // var yyz3651 Node
				yyc3651 = true
			}

			if yyj3651 < len(yyv3651) {
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = Node{}
				} else {
					yyv3654 := &yyv3651[yyj3651]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3651.End()
	}
	if yyc3651 {
		*v = yyv3651
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		yyv3655.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3656 := *v
	yyh3656, yyl3656 := z.DecSliceHelperStart()

	var yyrr3656, yyrl3656 int
	var yyc3656, yyrt3656 bool
	_, _, _ = yyc3656, yyrt3656, yyrl3656
	yyrr3656 = yyl3656

	if yyv3656 == nil {
		if yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 16); yyrt3656 {
			yyrr3656 = yyrl3656
		}
		yyv3656 = make([]FinalizerName, yyrl3656)
		yyc3656 = true
	}

	if yyl3656 == 0 {
		if len(yyv3656) != 0 {
			yyv3656 = yyv3656[:0]
			yyc3656 = true
		}
	} else if yyl3656 > 0 {

		if yyl3656 > cap(yyv3656) {
			yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 16)

			yyv23656 := yyv3656
			yyv3656 = make([]FinalizerName, yyrl3656)
			if len(yyv3656) > 0 {
				copy(yyv3656, yyv23656[:cap(yyv23656)])
			}
			yyc3656 = true

			yyrr3656 = len(yyv3656)
		} else if yyl3656 != len(yyv3656) {
			yyv3656 = yyv3656[:yyl3656]
			yyc3656 = true
		}
		yyj3656 := 0
		for ; yyj3656 < yyrr3656; yyj3656++ {
			if r.TryDecodeAsNil() {
				yyv3656[yyj3656] = ""
			} else {
				yyv3656[yyj3656] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3656 {
			for ; yyj3656 < yyl3656; yyj3656++ {
				yyv3656 = append(yyv3656, "")
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ""
				} else {
					yyv3656[yyj3656] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3656 := 0; !r.CheckBreak(); yyj3656++ {
			if yyj3656 >= len(yyv3656) {
				yyv3656 = append(yyv3656, "") // var yyz3656 FinalizerName
				yyc3656 = true
			}

			if yyj3656 < len(yyv3656) {
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ""
				} else {
					yyv3656[yyj3656] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3656.End()
	}
	if yyc3656 {
		*v = yyv3656
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3660 := range v {
		yy3661 := &yyv3660
		yy3661.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()

	var yyrr3662, yyrl3662 int
	var yyc3662, yyrt3662 bool
	_, _, _ = yyc3662, yyrt3662, yyrl3662
	yyrr3662 = yyl3662

	if yyv3662 == nil {
		if yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 232); yyrt3662 {
			yyrr3662 = yyrl3662
		}
		yyv3662 = make([]Namespace, yyrl3662)
		yyc3662 = true
	}

	if yyl3662 == 0 {
		if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {

		if yyl3662 > cap(yyv3662) {
			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 232)
			yyv3662 = make([]Namespace, yyrl3662)
			yyc3662 = true

			yyrr3662 = len(yyv3662)
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = Namespace{}
			} else {
				yyv3663 := &yyv3662[yyj3662]
				yyv3663.CodecDecodeSelf(d)
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = Namespace{}
				} else {
					yyv3664 := &yyv3662[yyj3662]
					yyv3664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3662 := 0; !r.CheckBreak(); yyj3662++ {
			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, Namespace{}) // var yyz3662 Namespace
				yyc3662 = true
			}

			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = Namespace{}
				} else {
					yyv3665 := &yyv3662[yyj3662]
					yyv3665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3662.End()
	}
	if yyc3662 {
		*v = yyv3662
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3666 := range v {
		yy3667 := &yyv3666
		yy3667.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3668 := *v
	yyh3668, yyl3668 := z.DecSliceHelperStart()

	var yyrr3668, yyrl3668 int
	var yyc3668, yyrt3668 bool
	_, _, _ = yyc3668, yyrt3668, yyrl3668
	yyrr3668 = yyl3668

	if yyv3668 == nil {
		if yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 424); yyrt3668 {
			yyrr3668 = yyrl3668
		}
		yyv3668 = make([]Event, yyrl3668)
		yyc3668 = true
	}

	if yyl3668 == 0 {
		if len(yyv3668) != 0 {
			yyv3668 = yyv3668[:0]
			yyc3668 = true
		}
	} else if yyl3668 > 0 {

		if yyl3668 > cap(yyv3668) {
			yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 424)
			yyv3668 = make([]Event, yyrl3668)
			yyc3668 = true

			yyrr3668 = len(yyv3668)
		} else if yyl3668 != len(yyv3668) {
			yyv3668 = yyv3668[:yyl3668]
			yyc3668 = true
		}
		yyj3668 := 0
		for ; yyj3668 < yyrr3668; yyj3668++ {
			if r.TryDecodeAsNil() {
				yyv3668[yyj3668] = Event{}
			} else {
				yyv3669 := &yyv3668[yyj3668]
				yyv3669.CodecDecodeSelf(d)
			}

		}
		if yyrt3668 {
			for ; yyj3668 < yyl3668; yyj3668++ {
				yyv3668 = append(yyv3668, Event{})
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = Event{}
				} else {
					yyv3670 := &yyv3668[yyj3668]
					yyv3670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3668 := 0; !r.CheckBreak(); yyj3668++ {
			if yyj3668 >= len(yyv3668) {
				yyv3668 = append(yyv3668, Event{}) // var yyz3668 Event
				yyc3668 = true
			}

			if yyj3668 < len(yyv3668) {
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = Event{}
				} else {
					yyv3671 := &yyv3668[yyj3668]
					yyv3671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3668.End()
	}
	if yyc3668 {
		*v = yyv3668
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		yy3673 := &yyv3672
		yym3674 := z.EncBinary()
		_ = yym3674
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3673) {
		} else if !yym3674 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3673)
		} else {
			z.EncFallback(yy3673)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3675 := *v
	yyh3675, yyl3675 := z.DecSliceHelperStart()

	var yyrr3675, yyrl3675 int
	var yyc3675, yyrt3675 bool
	_, _, _ = yyc3675, yyrt3675, yyrl3675
	yyrr3675 = yyl3675

	if yyv3675 == nil {
		if yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 24); yyrt3675 {
			yyrr3675 = yyrl3675
		}
		yyv3675 = make([]pkg6_runtime.RawExtension, yyrl3675)
		yyc3675 = true
	}

	if yyl3675 == 0 {
		if len(yyv3675) != 0 {
			yyv3675 = yyv3675[:0]
			yyc3675 = true
		}
	} else if yyl3675 > 0 {

		if yyl3675 > cap(yyv3675) {
			yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 24)
			yyv3675 = make([]pkg6_runtime.RawExtension, yyrl3675)
			yyc3675 = true

			yyrr3675 = len(yyv3675)
		} else if yyl3675 != len(yyv3675) {
			yyv3675 = yyv3675[:yyl3675]
			yyc3675 = true
		}
		yyj3675 := 0
		for ; yyj3675 < yyrr3675; yyj3675++ {
			if r.TryDecodeAsNil() {
				yyv3675[yyj3675] = pkg6_runtime.RawExtension{}
			} else {
				yyv3676 := &yyv3675[yyj3675]
				yym3677 := z.DecBinary()
				_ = yym3677
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3676) {
				} else if !yym3677 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3676)
				} else {
					z.DecFallback(yyv3676, false)
				}
			}

		}
		if yyrt3675 {
			for ; yyj3675 < yyl3675; yyj3675++ {
				yyv3675 = append(yyv3675, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = pkg6_runtime.RawExtension{}
				} else {
					yyv3678 := &yyv3675[yyj3675]
					yym3679 := z.DecBinary()
					_ = yym3679
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3678) {
					} else if !yym3679 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3678)
					} else {
						z.DecFallback(yyv3678, false)
					}
				}

			}
		}

	} else {
		for yyj3675 := 0; !r.CheckBreak(); yyj3675++ {
			if yyj3675 >= len(yyv3675) {
				yyv3675 = append(yyv3675, pkg6_runtime.RawExtension{}) // var yyz3675 pkg6_runtime.RawExtension
				yyc3675 = true
			}

			if yyj3675 < len(yyv3675) {
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = pkg6_runtime.RawExtension{}
				} else {
					yyv3680 := &yyv3675[yyj3675]
					yym3681 := z.DecBinary()
					_ = yym3681
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3680) {
					} else if !yym3681 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3680)
					} else {
						z.DecFallback(yyv3680, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3675.End()
	}
	if yyc3675 {
		*v = yyv3675
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3682 := range v {
		yy3683 := &yyv3682
		yy3683.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3684 := *v
	yyh3684, yyl3684 := z.DecSliceHelperStart()

	var yyrr3684, yyrl3684 int
	var yyc3684, yyrt3684 bool
	_, _, _ = yyc3684, yyrt3684, yyrl3684
	yyrr3684 = yyl3684

	if yyv3684 == nil {
		if yyrl3684, yyrt3684 = z.DecInferLen(yyl3684, z.DecBasicHandle().MaxInitLen, 56); yyrt3684 {
			yyrr3684 = yyrl3684
		}
		yyv3684 = make([]LimitRangeItem, yyrl3684)
		yyc3684 = true
	}

	if yyl3684 == 0 {
		if len(yyv3684) != 0 {
			yyv3684 = yyv3684[:0]
			yyc3684 = true
		}
	} else if yyl3684 > 0 {

		if yyl3684 > cap(yyv3684) {
			yyrl3684, yyrt3684 = z.DecInferLen(yyl3684, z.DecBasicHandle().MaxInitLen, 56)
			yyv3684 = make([]LimitRangeItem, yyrl3684)
			yyc3684 = true

			yyrr3684 = len(yyv3684)
		} else if yyl3684 != len(yyv3684) {
			yyv3684 = yyv3684[:yyl3684]
			yyc3684 = true
		}
		yyj3684 := 0
		for ; yyj3684 < yyrr3684; yyj3684++ {
			if r.TryDecodeAsNil() {
				yyv3684[yyj3684] = LimitRangeItem{}
			} else {
				yyv3685 := &yyv3684[yyj3684]
				yyv3685.CodecDecodeSelf(d)
			}

		}
		if yyrt3684 {
			for ; yyj3684 < yyl3684; yyj3684++ {
				yyv3684 = append(yyv3684, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = LimitRangeItem{}
				} else {
					yyv3686 := &yyv3684[yyj3684]
					yyv3686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3684 := 0; !r.CheckBreak(); yyj3684++ {
			if yyj3684 >= len(yyv3684) {
				yyv3684 = append(yyv3684, LimitRangeItem{}) // var yyz3684 LimitRangeItem
				yyc3684 = true
			}

			if yyj3684 < len(yyv3684) {
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = LimitRangeItem{}
				} else {
					yyv3687 := &yyv3684[yyj3684]
					yyv3687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3684.End()
	}
	if yyc3684 {
		*v = yyv3684
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3688 := range v {
		yy3689 := &yyv3688
		yy3689.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3690 := *v
	yyh3690, yyl3690 := z.DecSliceHelperStart()

	var yyrr3690, yyrl3690 int
	var yyc3690, yyrt3690 bool
	_, _, _ = yyc3690, yyrt3690, yyrl3690
	yyrr3690 = yyl3690

	if yyv3690 == nil {
		if yyrl3690, yyrt3690 = z.DecInferLen(yyl3690, z.DecBasicHandle().MaxInitLen, 216); yyrt3690 {
			yyrr3690 = yyrl3690
		}
		yyv3690 = make([]LimitRange, yyrl3690)
		yyc3690 = true
	}

	if yyl3690 == 0 {
		if len(yyv3690) != 0 {
			yyv3690 = yyv3690[:0]
			yyc3690 = true
		}
	} else if yyl3690 > 0 {

		if yyl3690 > cap(yyv3690) {
			yyrl3690, yyrt3690 = z.DecInferLen(yyl3690, z.DecBasicHandle().MaxInitLen, 216)
			yyv3690 = make([]LimitRange, yyrl3690)
			yyc3690 = true

			yyrr3690 = len(yyv3690)
		} else if yyl3690 != len(yyv3690) {
			yyv3690 = yyv3690[:yyl3690]
			yyc3690 = true
		}
		yyj3690 := 0
		for ; yyj3690 < yyrr3690; yyj3690++ {
			if r.TryDecodeAsNil() {
				yyv3690[yyj3690] = LimitRange{}
			} else {
				yyv3691 := &yyv3690[yyj3690]
				yyv3691.CodecDecodeSelf(d)
			}

		}
		if yyrt3690 {
			for ; yyj3690 < yyl3690; yyj3690++ {
				yyv3690 = append(yyv3690, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = LimitRange{}
				} else {
					yyv3692 := &yyv3690[yyj3690]
					yyv3692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3690 := 0; !r.CheckBreak(); yyj3690++ {
			if yyj3690 >= len(yyv3690) {
				yyv3690 = append(yyv3690, LimitRange{}) // var yyz3690 LimitRange
				yyc3690 = true
			}

			if yyj3690 < len(yyv3690) {
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = LimitRange{}
				} else {
					yyv3693 := &yyv3690[yyj3690]
					yyv3693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3690.End()
	}
	if yyc3690 {
		*v = yyv3690
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3694 := range v {
		yy3695 := &yyv3694
		yy3695.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3696 := *v
	yyh3696, yyl3696 := z.DecSliceHelperStart()

	var yyrr3696, yyrl3696 int
	var yyc3696, yyrt3696 bool
	_, _, _ = yyc3696, yyrt3696, yyrl3696
	yyrr3696 = yyl3696

	if yyv3696 == nil {
		if yyrl3696, yyrt3696 = z.DecInferLen(yyl3696, z.DecBasicHandle().MaxInitLen, 216); yyrt3696 {
			yyrr3696 = yyrl3696
		}
		yyv3696 = make([]ResourceQuota, yyrl3696)
		yyc3696 = true
	}

	if yyl3696 == 0 {
		if len(yyv3696) != 0 {
			yyv3696 = yyv3696[:0]
			yyc3696 = true
		}
	} else if yyl3696 > 0 {

		if yyl3696 > cap(yyv3696) {
			yyrl3696, yyrt3696 = z.DecInferLen(yyl3696, z.DecBasicHandle().MaxInitLen, 216)
			yyv3696 = make([]ResourceQuota, yyrl3696)
			yyc3696 = true

			yyrr3696 = len(yyv3696)
		} else if yyl3696 != len(yyv3696) {
			yyv3696 = yyv3696[:yyl3696]
			yyc3696 = true
		}
		yyj3696 := 0
		for ; yyj3696 < yyrr3696; yyj3696++ {
			if r.TryDecodeAsNil() {
				yyv3696[yyj3696] = ResourceQuota{}
			} else {
				yyv3697 := &yyv3696[yyj3696]
				yyv3697.CodecDecodeSelf(d)
			}

		}
		if yyrt3696 {
			for ; yyj3696 < yyl3696; yyj3696++ {
				yyv3696 = append(yyv3696, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = ResourceQuota{}
				} else {
					yyv3698 := &yyv3696[yyj3696]
					yyv3698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3696 := 0; !r.CheckBreak(); yyj3696++ {
			if yyj3696 >= len(yyv3696) {
				yyv3696 = append(yyv3696, ResourceQuota{}) // var yyz3696 ResourceQuota
				yyc3696 = true
			}

			if yyj3696 < len(yyv3696) {
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = ResourceQuota{}
				} else {
					yyv3699 := &yyv3696[yyj3696]
					yyv3699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3696.End()
	}
	if yyc3696 {
		*v = yyv3696
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3700, yyv3700 := range v {
		yym3701 := z.EncBinary()
		_ = yym3701
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3700))
		}
		if yyv3700 == nil {
			r.EncodeNil()
		} else {
			yym3702 := z.EncBinary()
			_ = yym3702
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3700))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyl3703 := r.ReadMapStart()
	yybh3703 := z.DecBasicHandle()
	if yyv3703 == nil {
		yyrl3703, _ := z.DecInferLen(yyl3703, yybh3703.MaxInitLen, 40)
		yyv3703 = make(map[string][]uint8, yyrl3703)
		*v = yyv3703
	}
	var yymk3703 string
	var yymv3703 []uint8
	var yymg3703 bool
	if yybh3703.MapValueReset {
		yymg3703 = true
	}
	if yyl3703 > 0 {
		for yyj3703 := 0; yyj3703 < yyl3703; yyj3703++ {
			if r.TryDecodeAsNil() {
				yymk3703 = ""
			} else {
				yymk3703 = string(r.DecodeString())
			}

			if yymg3703 {
				yymv3703 = yyv3703[yymk3703]
			} else {
				yymv3703 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3703 = nil
			} else {
				yyv3705 := &yymv3703
				yym3706 := z.DecBinary()
				_ = yym3706
				if false {
				} else {
					*yyv3705 = r.DecodeBytes(*(*[]byte)(yyv3705), false, false)
				}
			}

			if yyv3703 != nil {
				yyv3703[yymk3703] = yymv3703
			}
		}
	} else if yyl3703 < 0 {
		for yyj3703 := 0; !r.CheckBreak(); yyj3703++ {
			if r.TryDecodeAsNil() {
				yymk3703 = ""
			} else {
				yymk3703 = string(r.DecodeString())
			}

			if yymg3703 {
				yymv3703 = yyv3703[yymk3703]
			} else {
				yymv3703 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3703 = nil
			} else {
				yyv3708 := &yymv3703
				yym3709 := z.DecBinary()
				_ = yym3709
				if false {
				} else {
					*yyv3708 = r.DecodeBytes(*(*[]byte)(yyv3708), false, false)
				}
			}

			if yyv3703 != nil {
				yyv3703[yymk3703] = yymv3703
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3710 := range v {
		yy3711 := &yyv3710
		yy3711.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3712 := *v
	yyh3712, yyl3712 := z.DecSliceHelperStart()

	var yyrr3712, yyrl3712 int
	var yyc3712, yyrt3712 bool
	_, _, _ = yyc3712, yyrt3712, yyrl3712
	yyrr3712 = yyl3712

	if yyv3712 == nil {
		if yyrl3712, yyrt3712 = z.DecInferLen(yyl3712, z.DecBasicHandle().MaxInitLen, 216); yyrt3712 {
			yyrr3712 = yyrl3712
		}
		yyv3712 = make([]Secret, yyrl3712)
		yyc3712 = true
	}

	if yyl3712 == 0 {
		if len(yyv3712) != 0 {
			yyv3712 = yyv3712[:0]
			yyc3712 = true
		}
	} else if yyl3712 > 0 {

		if yyl3712 > cap(yyv3712) {
			yyrl3712, yyrt3712 = z.DecInferLen(yyl3712, z.DecBasicHandle().MaxInitLen, 216)
			yyv3712 = make([]Secret, yyrl3712)
			yyc3712 = true

			yyrr3712 = len(yyv3712)
		} else if yyl3712 != len(yyv3712) {
			yyv3712 = yyv3712[:yyl3712]
			yyc3712 = true
		}
		yyj3712 := 0
		for ; yyj3712 < yyrr3712; yyj3712++ {
			if r.TryDecodeAsNil() {
				yyv3712[yyj3712] = Secret{}
			} else {
				yyv3713 := &yyv3712[yyj3712]
				yyv3713.CodecDecodeSelf(d)
			}

		}
		if yyrt3712 {
			for ; yyj3712 < yyl3712; yyj3712++ {
				yyv3712 = append(yyv3712, Secret{})
				if r.TryDecodeAsNil() {
					yyv3712[yyj3712] = Secret{}
				} else {
					yyv3714 := &yyv3712[yyj3712]
					yyv3714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3712 := 0; !r.CheckBreak(); yyj3712++ {
			if yyj3712 >= len(yyv3712) {
				yyv3712 = append(yyv3712, Secret{}) // var yyz3712 Secret
				yyc3712 = true
			}

			if yyj3712 < len(yyv3712) {
				if r.TryDecodeAsNil() {
					yyv3712[yyj3712] = Secret{}
				} else {
					yyv3715 := &yyv3712[yyj3712]
					yyv3715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3712.End()
	}
	if yyc3712 {
		*v = yyv3712
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3716 := range v {
		yy3717 := &yyv3716
		yy3717.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3718 := *v
	yyh3718, yyl3718 := z.DecSliceHelperStart()

	var yyrr3718, yyrl3718 int
	var yyc3718, yyrt3718 bool
	_, _, _ = yyc3718, yyrt3718, yyrl3718
	yyrr3718 = yyl3718

	if yyv3718 == nil {
		if yyrl3718, yyrt3718 = z.DecInferLen(yyl3718, z.DecBasicHandle().MaxInitLen, 64); yyrt3718 {
			yyrr3718 = yyrl3718
		}
		yyv3718 = make([]ComponentCondition, yyrl3718)
		yyc3718 = true
	}

	if yyl3718 == 0 {
		if len(yyv3718) != 0 {
			yyv3718 = yyv3718[:0]
			yyc3718 = true
		}
	} else if yyl3718 > 0 {

		if yyl3718 > cap(yyv3718) {
			yyrl3718, yyrt3718 = z.DecInferLen(yyl3718, z.DecBasicHandle().MaxInitLen, 64)
			yyv3718 = make([]ComponentCondition, yyrl3718)
			yyc3718 = true

			yyrr3718 = len(yyv3718)
		} else if yyl3718 != len(yyv3718) {
			yyv3718 = yyv3718[:yyl3718]
			yyc3718 = true
		}
		yyj3718 := 0
		for ; yyj3718 < yyrr3718; yyj3718++ {
			if r.TryDecodeAsNil() {
				yyv3718[yyj3718] = ComponentCondition{}
			} else {
				yyv3719 := &yyv3718[yyj3718]
				yyv3719.CodecDecodeSelf(d)
			}

		}
		if yyrt3718 {
			for ; yyj3718 < yyl3718; yyj3718++ {
				yyv3718 = append(yyv3718, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3718[yyj3718] = ComponentCondition{}
				} else {
					yyv3720 := &yyv3718[yyj3718]
					yyv3720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3718 := 0; !r.CheckBreak(); yyj3718++ {
			if yyj3718 >= len(yyv3718) {
				yyv3718 = append(yyv3718, ComponentCondition{}) // var yyz3718 ComponentCondition
				yyc3718 = true
			}

			if yyj3718 < len(yyv3718) {
				if r.TryDecodeAsNil() {
					yyv3718[yyj3718] = ComponentCondition{}
				} else {
					yyv3721 := &yyv3718[yyj3718]
					yyv3721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3718.End()
	}
	if yyc3718 {
		*v = yyv3718
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3722 := range v {
		yy3723 := &yyv3722
		yy3723.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3724 := *v
	yyh3724, yyl3724 := z.DecSliceHelperStart()

	var yyrr3724, yyrl3724 int
	var yyc3724, yyrt3724 bool
	_, _, _ = yyc3724, yyrt3724, yyrl3724
	yyrr3724 = yyl3724

	if yyv3724 == nil {
		if yyrl3724, yyrt3724 = z.DecInferLen(yyl3724, z.DecBasicHandle().MaxInitLen, 216); yyrt3724 {
			yyrr3724 = yyrl3724
		}
		yyv3724 = make([]ComponentStatus, yyrl3724)
		yyc3724 = true
	}

	if yyl3724 == 0 {
		if len(yyv3724) != 0 {
			yyv3724 = yyv3724[:0]
			yyc3724 = true
		}
	} else if yyl3724 > 0 {

		if yyl3724 > cap(yyv3724) {
			yyrl3724, yyrt3724 = z.DecInferLen(yyl3724, z.DecBasicHandle().MaxInitLen, 216)
			yyv3724 = make([]ComponentStatus, yyrl3724)
			yyc3724 = true

			yyrr3724 = len(yyv3724)
		} else if yyl3724 != len(yyv3724) {
			yyv3724 = yyv3724[:yyl3724]
			yyc3724 = true
		}
		yyj3724 := 0
		for ; yyj3724 < yyrr3724; yyj3724++ {
			if r.TryDecodeAsNil() {
				yyv3724[yyj3724] = ComponentStatus{}
			} else {
				yyv3725 := &yyv3724[yyj3724]
				yyv3725.CodecDecodeSelf(d)
			}

		}
		if yyrt3724 {
			for ; yyj3724 < yyl3724; yyj3724++ {
				yyv3724 = append(yyv3724, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3724[yyj3724] = ComponentStatus{}
				} else {
					yyv3726 := &yyv3724[yyj3724]
					yyv3726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3724 := 0; !r.CheckBreak(); yyj3724++ {
			if yyj3724 >= len(yyv3724) {
				yyv3724 = append(yyv3724, ComponentStatus{}) // var yyz3724 ComponentStatus
				yyc3724 = true
			}

			if yyj3724 < len(yyv3724) {
				if r.TryDecodeAsNil() {
					yyv3724[yyj3724] = ComponentStatus{}
				} else {
					yyv3727 := &yyv3724[yyj3724]
					yyv3727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3724.End()
	}
	if yyc3724 {
		*v = yyv3724
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3728 := range v {
		yy3729 := &yyv3728
		yy3729.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3730 := *v
	yyh3730, yyl3730 := z.DecSliceHelperStart()

	var yyrr3730, yyrl3730 int
	var yyc3730, yyrt3730 bool
	_, _, _ = yyc3730, yyrt3730, yyrl3730
	yyrr3730 = yyl3730

	if yyv3730 == nil {
		if yyrl3730, yyrt3730 = z.DecInferLen(yyl3730, z.DecBasicHandle().MaxInitLen, 48); yyrt3730 {
			yyrr3730 = yyrl3730
		}
		yyv3730 = make([]DownwardAPIVolumeFile, yyrl3730)
		yyc3730 = true
	}

	if yyl3730 == 0 {
		if len(yyv3730) != 0 {
			yyv3730 = yyv3730[:0]
			yyc3730 = true
		}
	} else if yyl3730 > 0 {

		if yyl3730 > cap(yyv3730) {
			yyrl3730, yyrt3730 = z.DecInferLen(yyl3730, z.DecBasicHandle().MaxInitLen, 48)
			yyv3730 = make([]DownwardAPIVolumeFile, yyrl3730)
			yyc3730 = true

			yyrr3730 = len(yyv3730)
		} else if yyl3730 != len(yyv3730) {
			yyv3730 = yyv3730[:yyl3730]
			yyc3730 = true
		}
		yyj3730 := 0
		for ; yyj3730 < yyrr3730; yyj3730++ {
			if r.TryDecodeAsNil() {
				yyv3730[yyj3730] = DownwardAPIVolumeFile{}
			} else {
				yyv3731 := &yyv3730[yyj3730]
				yyv3731.CodecDecodeSelf(d)
			}

		}
		if yyrt3730 {
			for ; yyj3730 < yyl3730; yyj3730++ {
				yyv3730 = append(yyv3730, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3730[yyj3730] = DownwardAPIVolumeFile{}
				} else {
					yyv3732 := &yyv3730[yyj3730]
					yyv3732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3730 := 0; !r.CheckBreak(); yyj3730++ {
			if yyj3730 >= len(yyv3730) {
				yyv3730 = append(yyv3730, DownwardAPIVolumeFile{}) // var yyz3730 DownwardAPIVolumeFile
				yyc3730 = true
			}

			if yyj3730 < len(yyv3730) {
				if r.TryDecodeAsNil() {
					yyv3730[yyj3730] = DownwardAPIVolumeFile{}
				} else {
					yyv3733 := &yyv3730[yyj3730]
					yyv3733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3730.End()
	}
	if yyc3730 {
		*v = yyv3730
	}

}
